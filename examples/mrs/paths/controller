

TEST CASE 1

Dimensions:
input__controller = 1;
input__controller[0].input_arr = 8;
input__controller[0].int_state_arr = 0;
input__controller[0].float_state_arr = 0;
input__controller[0].x_arr = 4;
ret_val__controller = 1;
ret_val__controller[0].int_state_arr = 0;
ret_val__controller[0].float_state_arr = 0;
ret_val__controller[0].output_arr = 1;

Other input values:
input__controller[0].input_arr[0] = -484.000000;
input__controller[0].input_arr[1] = -426.000000;
input__controller[0].input_arr[2] = 31.000000;
input__controller[0].input_arr[3] = -30.000000;
input__controller[0].input_arr[4] = -189.000000;
input__controller[0].input_arr[5] = 179.000000;
input__controller[0].input_arr[6] = 463.000000;
input__controller[0].input_arr[7] = 101.000000;
input__controller[0].x_arr[0] = 171.000000;
input__controller[0].x_arr[1] = 274.000000;
input__controller[0].x_arr[2] = -322.000000;
input__controller[0].x_arr[3] = -489.000000;
ret_val__controller[0].output_arr[0] = 298.000000;

Result:
unknown

Path Covered :
toy_model_no1_controller.c
+26


Path Predicate for case 1:
toy_model_no1_controller.c: +26 input[0].input_arr[0]<((double)90)

Simplified Path Predicate for case 1:
input[0].input_arr[0]<((double)90)

Output Values for case 1: (Symbolic,Concrete)
return value = 0, 0
ret_val[0].output_arr[0] = input[0].x_arr[2], -322.000000

to explore negation deepest unexplored condition of predicate,
Path Predicate Prefix to solve :
toy_model_no1_controller.c: -26 input[0].input_arr[0]>=((double)90)
Path Prefix to cover :
toy_model_no1_controller.c
-26


TEST CASE 2

Dimensions:
input__controller = 1;
input__controller[0].input_arr = 8;
input__controller[0].int_state_arr = 0;
input__controller[0].float_state_arr = 0;
input__controller[0].x_arr = 4;
ret_val__controller = 1;
ret_val__controller[0].int_state_arr = 0;
ret_val__controller[0].float_state_arr = 0;
ret_val__controller[0].output_arr = 1;

Other input values:
input__controller[0].input_arr[0] = 778.000000;
input__controller[0].input_arr[1] = -426.000000;
input__controller[0].input_arr[2] = 31.000000;
input__controller[0].input_arr[3] = -30.000000;
input__controller[0].input_arr[4] = -189.000000;
input__controller[0].input_arr[5] = 179.000000;
input__controller[0].input_arr[6] = 463.000000;
input__controller[0].input_arr[7] = 101.000000;
input__controller[0].x_arr[0] = 171.000000;
input__controller[0].x_arr[1] = 274.000000;
input__controller[0].x_arr[2] = -322.000000;
input__controller[0].x_arr[3] = -489.000000;
ret_val__controller[0].output_arr[0] = 298.000000;

Result:
unknown

Path Covered :
toy_model_no1_controller.c
-26 -26b +27


Path Predicate for case 2:
toy_model_no1_controller.c: -26 input[0].input_arr[0]>=((double)90)
toy_model_no1_controller.c: -26b input[0].input_arr[1]=<((double)10)
toy_model_no1_controller.c: +27 input[0].input_arr[2]<((double)90)

Simplified Path Predicate for case 2:
input[0].input_arr[0]>=((double)90) AND
input[0].input_arr[1]=<((double)10) AND
input[0].input_arr[2]<((double)90)

Output Values for case 2: (Symbolic,Concrete)
return value = 0, 0
ret_val[0].output_arr[0] = input[0].x_arr[2], -322.000000

to explore negation deepest unexplored condition of predicate,
Path Predicate Prefix to solve :
toy_model_no1_controller.c: -26 input[0].input_arr[0]>=((double)90)
toy_model_no1_controller.c: -26b input[0].input_arr[1]=<((double)10)
toy_model_no1_controller.c: -27 input[0].input_arr[2]>=((double)90)
Path Prefix to cover :
toy_model_no1_controller.c
-26 -26b -27


TEST CASE 3

Dimensions:
input__controller = 1;
input__controller[0].input_arr = 8;
input__controller[0].int_state_arr = 0;
input__controller[0].float_state_arr = 0;
input__controller[0].x_arr = 4;
ret_val__controller = 1;
ret_val__controller[0].int_state_arr = 0;
ret_val__controller[0].float_state_arr = 0;
ret_val__controller[0].output_arr = 1;

Other input values:
input__controller[0].input_arr[0] = 778.000000;
input__controller[0].input_arr[1] = -426.000000;
input__controller[0].input_arr[2] = 617.000000;
input__controller[0].input_arr[3] = -30.000000;
input__controller[0].input_arr[4] = -189.000000;
input__controller[0].input_arr[5] = 179.000000;
input__controller[0].input_arr[6] = 463.000000;
input__controller[0].input_arr[7] = 101.000000;
input__controller[0].x_arr[0] = 171.000000;
input__controller[0].x_arr[1] = 274.000000;
input__controller[0].x_arr[2] = -322.000000;
input__controller[0].x_arr[3] = -489.000000;
ret_val__controller[0].output_arr[0] = 298.000000;

Result:
unknown

Path Covered :
toy_model_no1_controller.c
-26 -26b -27 -27b +28


Path Predicate for case 3:
toy_model_no1_controller.c: -26 input[0].input_arr[0]>=((double)90)
toy_model_no1_controller.c: -26b input[0].input_arr[1]=<((double)10)
toy_model_no1_controller.c: -27 input[0].input_arr[2]>=((double)90)
toy_model_no1_controller.c: -27b input[0].input_arr[3]=<((double)10)
toy_model_no1_controller.c: +28 input[0].input_arr[4]<((double)90)

Simplified Path Predicate for case 3:
input[0].input_arr[0]>=((double)90) AND
input[0].input_arr[1]=<((double)10) AND
input[0].input_arr[2]>=((double)90) AND
input[0].input_arr[3]=<((double)10) AND
input[0].input_arr[4]<((double)90)

Output Values for case 3: (Symbolic,Concrete)
return value = 0, 0
ret_val[0].output_arr[0] = input[0].x_arr[2], -322.000000

to explore negation deepest unexplored condition of predicate,
Path Predicate Prefix to solve :
toy_model_no1_controller.c: -26 input[0].input_arr[0]>=((double)90)
toy_model_no1_controller.c: -26b input[0].input_arr[1]=<((double)10)
toy_model_no1_controller.c: -27 input[0].input_arr[2]>=((double)90)
toy_model_no1_controller.c: -27b input[0].input_arr[3]=<((double)10)
toy_model_no1_controller.c: -28 input[0].input_arr[4]>=((double)90)
Path Prefix to cover :
toy_model_no1_controller.c
-26 -26b -27 -27b -28


TEST CASE 4

Dimensions:
input__controller = 1;
input__controller[0].input_arr = 8;
input__controller[0].int_state_arr = 0;
input__controller[0].float_state_arr = 0;
input__controller[0].x_arr = 4;
ret_val__controller = 1;
ret_val__controller[0].int_state_arr = 0;
ret_val__controller[0].float_state_arr = 0;
ret_val__controller[0].output_arr = 1;

Other input values:
input__controller[0].input_arr[0] = 778.000000;
input__controller[0].input_arr[1] = -426.000000;
input__controller[0].input_arr[2] = 617.000000;
input__controller[0].input_arr[3] = -30.000000;
input__controller[0].input_arr[4] = 618.000000;
input__controller[0].input_arr[5] = 179.000000;
input__controller[0].input_arr[6] = 463.000000;
input__controller[0].input_arr[7] = 101.000000;
input__controller[0].x_arr[0] = 171.000000;
input__controller[0].x_arr[1] = 274.000000;
input__controller[0].x_arr[2] = -322.000000;
input__controller[0].x_arr[3] = -489.000000;
ret_val__controller[0].output_arr[0] = 298.000000;

Result:
unknown

Path Covered :
toy_model_no1_controller.c
-26 -26b -27 -27b -28 +28b


Path Predicate for case 4:
toy_model_no1_controller.c: -26 input[0].input_arr[0]>=((double)90)
toy_model_no1_controller.c: -26b input[0].input_arr[1]=<((double)10)
toy_model_no1_controller.c: -27 input[0].input_arr[2]>=((double)90)
toy_model_no1_controller.c: -27b input[0].input_arr[3]=<((double)10)
toy_model_no1_controller.c: -28 input[0].input_arr[4]>=((double)90)
toy_model_no1_controller.c: +28b input[0].input_arr[5]>((double)10)

Simplified Path Predicate for case 4:
input[0].input_arr[0]>=((double)90) AND
input[0].input_arr[1]=<((double)10) AND
input[0].input_arr[2]>=((double)90) AND
input[0].input_arr[3]=<((double)10) AND
input[0].input_arr[4]>=((double)90) AND
input[0].input_arr[5]>((double)10)

Output Values for case 4: (Symbolic,Concrete)
return value = 0, 0
ret_val[0].output_arr[0] = input[0].x_arr[2], -322.000000

to explore negation deepest unexplored condition of predicate,
Path Predicate Prefix to solve :
toy_model_no1_controller.c: -26 input[0].input_arr[0]>=((double)90)
toy_model_no1_controller.c: -26b input[0].input_arr[1]=<((double)10)
toy_model_no1_controller.c: -27 input[0].input_arr[2]>=((double)90)
toy_model_no1_controller.c: -27b input[0].input_arr[3]=<((double)10)
toy_model_no1_controller.c: -28 input[0].input_arr[4]>=((double)90)
toy_model_no1_controller.c: -28b input[0].input_arr[5]=<((double)10)
Path Prefix to cover :
toy_model_no1_controller.c
-26 -26b -27 -27b -28 -28b


TEST CASE 5

Dimensions:
input__controller = 1;
input__controller[0].input_arr = 8;
input__controller[0].int_state_arr = 0;
input__controller[0].float_state_arr = 0;
input__controller[0].x_arr = 4;
ret_val__controller = 1;
ret_val__controller[0].int_state_arr = 0;
ret_val__controller[0].float_state_arr = 0;
ret_val__controller[0].output_arr = 1;

Other input values:
input__controller[0].input_arr[0] = 778.000000;
input__controller[0].input_arr[1] = -426.000000;
input__controller[0].input_arr[2] = 617.000000;
input__controller[0].input_arr[3] = -30.000000;
input__controller[0].input_arr[4] = 618.000000;
input__controller[0].input_arr[5] = 3.000000;
input__controller[0].input_arr[6] = 463.000000;
input__controller[0].input_arr[7] = 101.000000;
input__controller[0].x_arr[0] = 171.000000;
input__controller[0].x_arr[1] = 274.000000;
input__controller[0].x_arr[2] = -322.000000;
input__controller[0].x_arr[3] = -489.000000;
ret_val__controller[0].output_arr[0] = 298.000000;

Result:
unknown

Path Covered :
toy_model_no1_controller.c
-26 -26b -27 -27b -28 -28b -29 +29b


Path Predicate for case 5:
toy_model_no1_controller.c: -26 input[0].input_arr[0]>=((double)90)
toy_model_no1_controller.c: -26b input[0].input_arr[1]=<((double)10)
toy_model_no1_controller.c: -27 input[0].input_arr[2]>=((double)90)
toy_model_no1_controller.c: -27b input[0].input_arr[3]=<((double)10)
toy_model_no1_controller.c: -28 input[0].input_arr[4]>=((double)90)
toy_model_no1_controller.c: -28b input[0].input_arr[5]=<((double)10)
toy_model_no1_controller.c: -29 input[0].input_arr[6]>=((double)90)
toy_model_no1_controller.c: +29b input[0].input_arr[7]>((double)10)

Simplified Path Predicate for case 5:
input[0].input_arr[0]>=((double)90) AND
input[0].input_arr[1]=<((double)10) AND
input[0].input_arr[2]>=((double)90) AND
input[0].input_arr[3]=<((double)10) AND
input[0].input_arr[4]>=((double)90) AND
input[0].input_arr[5]=<((double)10) AND
input[0].input_arr[6]>=((double)90) AND
input[0].input_arr[7]>((double)10)

Output Values for case 5: (Symbolic,Concrete)
return value = 0, 0
ret_val[0].output_arr[0] = input[0].x_arr[2], -322.000000

to explore negation deepest unexplored condition of predicate,
Path Predicate Prefix to solve :
toy_model_no1_controller.c: -26 input[0].input_arr[0]>=((double)90)
toy_model_no1_controller.c: -26b input[0].input_arr[1]=<((double)10)
toy_model_no1_controller.c: -27 input[0].input_arr[2]>=((double)90)
toy_model_no1_controller.c: -27b input[0].input_arr[3]=<((double)10)
toy_model_no1_controller.c: -28 input[0].input_arr[4]>=((double)90)
toy_model_no1_controller.c: -28b input[0].input_arr[5]=<((double)10)
toy_model_no1_controller.c: -29 input[0].input_arr[6]>=((double)90)
toy_model_no1_controller.c: -29b input[0].input_arr[7]=<((double)10)
Path Prefix to cover :
toy_model_no1_controller.c
-26 -26b -27 -27b -28 -28b -29 -29b


TEST CASE 6

Dimensions:
input__controller = 1;
input__controller[0].input_arr = 8;
input__controller[0].int_state_arr = 0;
input__controller[0].float_state_arr = 0;
input__controller[0].x_arr = 4;
ret_val__controller = 1;
ret_val__controller[0].int_state_arr = 0;
ret_val__controller[0].float_state_arr = 0;
ret_val__controller[0].output_arr = 1;

Other input values:
input__controller[0].input_arr[0] = 778.000000;
input__controller[0].input_arr[1] = -426.000000;
input__controller[0].input_arr[2] = 617.000000;
input__controller[0].input_arr[3] = -30.000000;
input__controller[0].input_arr[4] = 618.000000;
input__controller[0].input_arr[5] = 3.000000;
input__controller[0].input_arr[6] = 463.000000;
input__controller[0].input_arr[7] = -5.000000;
input__controller[0].x_arr[0] = 171.000000;
input__controller[0].x_arr[1] = 274.000000;
input__controller[0].x_arr[2] = -322.000000;
input__controller[0].x_arr[3] = -489.000000;
ret_val__controller[0].output_arr[0] = 298.000000;

Result:
unknown

Path Covered :
toy_model_no1_controller.c
-26 -26b -27 -27b -28 -28b -29 -29b


Path Predicate for case 6:
toy_model_no1_controller.c: -26 input[0].input_arr[0]>=((double)90)
toy_model_no1_controller.c: -26b input[0].input_arr[1]=<((double)10)
toy_model_no1_controller.c: -27 input[0].input_arr[2]>=((double)90)
toy_model_no1_controller.c: -27b input[0].input_arr[3]=<((double)10)
toy_model_no1_controller.c: -28 input[0].input_arr[4]>=((double)90)
toy_model_no1_controller.c: -28b input[0].input_arr[5]=<((double)10)
toy_model_no1_controller.c: -29 input[0].input_arr[6]>=((double)90)
toy_model_no1_controller.c: -29b input[0].input_arr[7]=<((double)10)

Simplified Path Predicate for case 6:
input[0].input_arr[0]>=((double)90) AND
input[0].input_arr[1]=<((double)10) AND
input[0].input_arr[2]>=((double)90) AND
input[0].input_arr[3]=<((double)10) AND
input[0].input_arr[4]>=((double)90) AND
input[0].input_arr[5]=<((double)10) AND
input[0].input_arr[6]>=((double)90) AND
input[0].input_arr[7]=<((double)10)

Output Values for case 6: (Symbolic,Concrete)
return value = 0, 0
ret_val[0].output_arr[0] = input[0].x_arr[1], 274.000000

to explore negation deepest unexplored condition of predicate,
Path Predicate Prefix to solve :
toy_model_no1_controller.c: -26 input[0].input_arr[0]>=((double)90)
toy_model_no1_controller.c: -26b input[0].input_arr[1]=<((double)10)
toy_model_no1_controller.c: -27 input[0].input_arr[2]>=((double)90)
toy_model_no1_controller.c: -27b input[0].input_arr[3]=<((double)10)
toy_model_no1_controller.c: -28 input[0].input_arr[4]>=((double)90)
toy_model_no1_controller.c: -28b input[0].input_arr[5]=<((double)10)
toy_model_no1_controller.c: +29 input[0].input_arr[6]<((double)90)
Path Prefix to cover :
toy_model_no1_controller.c
-26 -26b -27 -27b -28 -28b +29


TEST CASE 7

Dimensions:
input__controller = 1;
input__controller[0].input_arr = 8;
input__controller[0].int_state_arr = 0;
input__controller[0].float_state_arr = 0;
input__controller[0].x_arr = 4;
ret_val__controller = 1;
ret_val__controller[0].int_state_arr = 0;
ret_val__controller[0].float_state_arr = 0;
ret_val__controller[0].output_arr = 1;

Other input values:
input__controller[0].input_arr[0] = 778.000000;
input__controller[0].input_arr[1] = -426.000000;
input__controller[0].input_arr[2] = 617.000000;
input__controller[0].input_arr[3] = -30.000000;
input__controller[0].input_arr[4] = 618.000000;
input__controller[0].input_arr[5] = 3.000000;
input__controller[0].input_arr[6] = -80.000000;
input__controller[0].input_arr[7] = 101.000000;
input__controller[0].x_arr[0] = 171.000000;
input__controller[0].x_arr[1] = 274.000000;
input__controller[0].x_arr[2] = -322.000000;
input__controller[0].x_arr[3] = -489.000000;
ret_val__controller[0].output_arr[0] = 298.000000;

Result:
unknown

Path Covered :
toy_model_no1_controller.c
-26 -26b -27 -27b -28 -28b +29


Path Predicate for case 7:
toy_model_no1_controller.c: -26 input[0].input_arr[0]>=((double)90)
toy_model_no1_controller.c: -26b input[0].input_arr[1]=<((double)10)
toy_model_no1_controller.c: -27 input[0].input_arr[2]>=((double)90)
toy_model_no1_controller.c: -27b input[0].input_arr[3]=<((double)10)
toy_model_no1_controller.c: -28 input[0].input_arr[4]>=((double)90)
toy_model_no1_controller.c: -28b input[0].input_arr[5]=<((double)10)
toy_model_no1_controller.c: +29 input[0].input_arr[6]<((double)90)

Simplified Path Predicate for case 7:
input[0].input_arr[0]>=((double)90) AND
input[0].input_arr[1]=<((double)10) AND
input[0].input_arr[2]>=((double)90) AND
input[0].input_arr[3]=<((double)10) AND
input[0].input_arr[4]>=((double)90) AND
input[0].input_arr[5]=<((double)10) AND
input[0].input_arr[6]<((double)90)

Output Values for case 7: (Symbolic,Concrete)
return value = 0, 0
ret_val[0].output_arr[0] = input[0].x_arr[2], -322.000000

to explore negation deepest unexplored condition of predicate,
Path Predicate Prefix to solve :
toy_model_no1_controller.c: -26 input[0].input_arr[0]>=((double)90)
toy_model_no1_controller.c: -26b input[0].input_arr[1]=<((double)10)
toy_model_no1_controller.c: -27 input[0].input_arr[2]>=((double)90)
toy_model_no1_controller.c: +27b input[0].input_arr[3]>((double)10)
Path Prefix to cover :
toy_model_no1_controller.c
-26 -26b -27 +27b


TEST CASE 8

Dimensions:
input__controller = 1;
input__controller[0].input_arr = 8;
input__controller[0].int_state_arr = 0;
input__controller[0].float_state_arr = 0;
input__controller[0].x_arr = 4;
ret_val__controller = 1;
ret_val__controller[0].int_state_arr = 0;
ret_val__controller[0].float_state_arr = 0;
ret_val__controller[0].output_arr = 1;

Other input values:
input__controller[0].input_arr[0] = 778.000000;
input__controller[0].input_arr[1] = -426.000000;
input__controller[0].input_arr[2] = 617.000000;
input__controller[0].input_arr[3] = 216.000000;
input__controller[0].input_arr[4] = -189.000000;
input__controller[0].input_arr[5] = 179.000000;
input__controller[0].input_arr[6] = 463.000000;
input__controller[0].input_arr[7] = 101.000000;
input__controller[0].x_arr[0] = 171.000000;
input__controller[0].x_arr[1] = 274.000000;
input__controller[0].x_arr[2] = -322.000000;
input__controller[0].x_arr[3] = -489.000000;
ret_val__controller[0].output_arr[0] = 298.000000;

Result:
unknown

Path Covered :
toy_model_no1_controller.c
-26 -26b -27 +27b


Path Predicate for case 8:
toy_model_no1_controller.c: -26 input[0].input_arr[0]>=((double)90)
toy_model_no1_controller.c: -26b input[0].input_arr[1]=<((double)10)
toy_model_no1_controller.c: -27 input[0].input_arr[2]>=((double)90)
toy_model_no1_controller.c: +27b input[0].input_arr[3]>((double)10)

Simplified Path Predicate for case 8:
input[0].input_arr[0]>=((double)90) AND
input[0].input_arr[1]=<((double)10) AND
input[0].input_arr[2]>=((double)90) AND
input[0].input_arr[3]>((double)10)

Output Values for case 8: (Symbolic,Concrete)
return value = 0, 0
ret_val[0].output_arr[0] = input[0].x_arr[2], -322.000000

to explore negation deepest unexplored condition of predicate,
Path Predicate Prefix to solve :
toy_model_no1_controller.c: -26 input[0].input_arr[0]>=((double)90)
toy_model_no1_controller.c: +26b input[0].input_arr[1]>((double)10)
Path Prefix to cover :
toy_model_no1_controller.c
-26 +26b


TEST CASE 9

Dimensions:
input__controller = 1;
input__controller[0].input_arr = 8;
input__controller[0].int_state_arr = 0;
input__controller[0].float_state_arr = 0;
input__controller[0].x_arr = 4;
ret_val__controller = 1;
ret_val__controller[0].int_state_arr = 0;
ret_val__controller[0].float_state_arr = 0;
ret_val__controller[0].output_arr = 1;

Other input values:
input__controller[0].input_arr[0] = 778.000000;
input__controller[0].input_arr[1] = 138.000000;
input__controller[0].input_arr[2] = 31.000000;
input__controller[0].input_arr[3] = -30.000000;
input__controller[0].input_arr[4] = -189.000000;
input__controller[0].input_arr[5] = 179.000000;
input__controller[0].input_arr[6] = 463.000000;
input__controller[0].input_arr[7] = 101.000000;
input__controller[0].x_arr[0] = 171.000000;
input__controller[0].x_arr[1] = 274.000000;
input__controller[0].x_arr[2] = -322.000000;
input__controller[0].x_arr[3] = -489.000000;
ret_val__controller[0].output_arr[0] = 298.000000;

Result:
unknown

Path Covered :
toy_model_no1_controller.c
-26 +26b


Path Predicate for case 9:
toy_model_no1_controller.c: -26 input[0].input_arr[0]>=((double)90)
toy_model_no1_controller.c: +26b input[0].input_arr[1]>((double)10)

Simplified Path Predicate for case 9:
input[0].input_arr[0]>=((double)90) AND
input[0].input_arr[1]>((double)10)

Output Values for case 9: (Symbolic,Concrete)
return value = 0, 0
ret_val[0].output_arr[0] = input[0].x_arr[2], -322.000000
