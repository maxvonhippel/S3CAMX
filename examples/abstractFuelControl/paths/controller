

TEST CASE 1

Dimensions:
input__controller = 1;
input__controller[0].input_arr = 1;
input__controller[0].int_state_arr = 0;
input__controller[0].float_state_arr = 7;
input__controller[0].x_arr = 13;
ret_val__controller = 1;
ret_val__controller[0].int_state_arr = 0;
ret_val__controller[0].float_state_arr = 7;
ret_val__controller[0].output_arr = 3;

Other input values:
input__controller[0].input_arr[0] = -423.000000;
input__controller[0].float_state_arr[0] = -371.000000;
input__controller[0].float_state_arr[1] = -78.000000;
input__controller[0].float_state_arr[2] = -292.000000;
input__controller[0].float_state_arr[3] = 272.000000;
input__controller[0].float_state_arr[4] = -193.000000;
input__controller[0].float_state_arr[5] = -384.000000;
input__controller[0].float_state_arr[6] = -73.000000;
input__controller[0].x_arr[0] = -493.000000;
input__controller[0].x_arr[1] = 170.000000;
input__controller[0].x_arr[2] = -8.000000;
input__controller[0].x_arr[3] = -463.000000;
input__controller[0].x_arr[4] = -387.000000;
input__controller[0].x_arr[5] = -245.000000;
input__controller[0].x_arr[6] = 150.000000;
input__controller[0].x_arr[7] = -475.000000;
input__controller[0].x_arr[8] = -478.000000;
input__controller[0].x_arr[9] = -156.000000;
input__controller[0].x_arr[10] = 417.000000;
input__controller[0].x_arr[11] = 173.000000;
input__controller[0].x_arr[12] = -343.000000;
ret_val__controller[0].float_state_arr[0] = 397.000000;
ret_val__controller[0].float_state_arr[1] = -241.000000;
ret_val__controller[0].float_state_arr[2] = -268.000000;
ret_val__controller[0].float_state_arr[3] = -365.000000;
ret_val__controller[0].float_state_arr[4] = -94.000000;
ret_val__controller[0].float_state_arr[5] = -68.000000;
ret_val__controller[0].float_state_arr[6] = -139.000000;
ret_val__controller[0].output_arr[0] = 438.000000;
ret_val__controller[0].output_arr[1] = -491.000000;
ret_val__controller[0].output_arr[2] = -16.000000;

Result:
unknown

Path Covered :
afc.c
-140 +142 -146 +148 +151 -158 +160 +162 -162b -182 +191 +205


Path Predicate for case 1:
afc.c: -140 input[0].x_arr[10]>-1.000000
afc.c: +142 ((unsigned char)input[0].float_state_arr[3])<>0
afc.c: -146 (input[0].float_state_arr[0]+0.010000)<10.000000
afc.c: +148 ((unsigned char)input[0].float_state_arr[5])<>0
afc.c: +151 ((unsigned char)input[0].float_state_arr[4])<>0
afc.c: -158 input[0].x_arr[8]<50.000000
afc.c: +160 1<>0
afc.c: +162 1<>0
afc.c: -162b 0=0
afc.c: -182 1<>0
afc.c: +191 1<>0
afc.c: +205 ((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))/14.700000)>1.660000

Simplified Path Predicate for case 1:
input[0].x_arr[10]>-1.000000 AND
((unsigned char)input[0].float_state_arr[3])<>0 AND
(input[0].float_state_arr[0]+0.010000)<10.000000 AND
((unsigned char)input[0].float_state_arr[5])<>0 AND
((unsigned char)input[0].float_state_arr[4])<>0 AND
input[0].x_arr[8]<50.000000 AND
((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))/14.700000)>1.660000

Output Values for case 1: (Symbolic,Concrete)
return value = 0, 0
ret_val[0].float_state_arr[0] = (input[0].float_state_arr[0]+0.010000), -370.990000
ret_val[0].float_state_arr[1] = input[0].float_state_arr[1], -78.000000
ret_val[0].float_state_arr[2] = (input[0].float_state_arr[2]+(((input[0].x_arr[9]+-((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))))*0.413280)*0.010000)), -5957.592441
ret_val[0].float_state_arr[3] = 1.000000, 1.000000
ret_val[0].float_state_arr[4] = 0.000000, 0.000000
ret_val[0].float_state_arr[5] = 1.000000, 1.000000
ret_val[0].float_state_arr[6] = input[0].float_state_arr[6], -73.000000
ret_val[0].output_arr[0] = 1.660000, 1.660000
ret_val[0].output_arr[1] = 1.000000, 1.000000
ret_val[0].output_arr[2] = 14.700000, 14.700000

to explore negation deepest unexplored condition of predicate,
Path Predicate Prefix to solve :
afc.c: -140 input[0].x_arr[10]>-1.000000
afc.c: +142 ((unsigned char)input[0].float_state_arr[3])<>0
afc.c: -146 (input[0].float_state_arr[0]+0.010000)<10.000000
afc.c: +148 ((unsigned char)input[0].float_state_arr[5])<>0
afc.c: +151 ((unsigned char)input[0].float_state_arr[4])<>0
afc.c: -158 input[0].x_arr[8]<50.000000
afc.c: +160 1<>0
afc.c: +162 1<>0
afc.c: -162b 0=0
afc.c: -182 1<>0
afc.c: +191 1<>0
afc.c: -205 ((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))/14.700000)=<1.660000
Path Prefix to cover :
afc.c
-140 +142 -146 +148 +151 -158 +160 +162 -162b -182 +191 -205


TEST CASE 2

Dimensions:
input__controller = 1;
input__controller[0].input_arr = 1;
input__controller[0].int_state_arr = 0;
input__controller[0].float_state_arr = 7;
input__controller[0].x_arr = 13;
ret_val__controller = 1;
ret_val__controller[0].int_state_arr = 0;
ret_val__controller[0].float_state_arr = 7;
ret_val__controller[0].output_arr = 3;

Other input values:
input__controller[0].input_arr[0] = -423.000000;
input__controller[0].float_state_arr[0] = -371.000000;
input__controller[0].float_state_arr[1] = -78.000000;
input__controller[0].float_state_arr[2] = 73.000000;
input__controller[0].float_state_arr[3] = 272.000000;
input__controller[0].float_state_arr[4] = -193.000000;
input__controller[0].float_state_arr[5] = -384.000000;
input__controller[0].float_state_arr[6] = -73.000000;
input__controller[0].x_arr[0] = -493.000000;
input__controller[0].x_arr[1] = 170.000000;
input__controller[0].x_arr[2] = -8.000000;
input__controller[0].x_arr[3] = -463.000000;
input__controller[0].x_arr[4] = -387.000000;
input__controller[0].x_arr[5] = -245.000000;
input__controller[0].x_arr[6] = 150.000000;
input__controller[0].x_arr[7] = -0.000000;
input__controller[0].x_arr[8] = -478.000000;
input__controller[0].x_arr[9] = -0.366000;
input__controller[0].x_arr[10] = 417.000000;
input__controller[0].x_arr[11] = 173.000000;
input__controller[0].x_arr[12] = -343.000000;
ret_val__controller[0].float_state_arr[0] = 397.000000;
ret_val__controller[0].float_state_arr[1] = -241.000000;
ret_val__controller[0].float_state_arr[2] = -268.000000;
ret_val__controller[0].float_state_arr[3] = -365.000000;
ret_val__controller[0].float_state_arr[4] = -94.000000;
ret_val__controller[0].float_state_arr[5] = -68.000000;
ret_val__controller[0].float_state_arr[6] = -139.000000;
ret_val__controller[0].output_arr[0] = 438.000000;
ret_val__controller[0].output_arr[1] = -491.000000;
ret_val__controller[0].output_arr[2] = -16.000000;

Result:
unknown

Path Covered :
afc.c
-140 +142 -146 +148 +151 -158 +160 +162 -162b -182 +191 -205 +207


Path Predicate for case 2:
afc.c: -140 input[0].x_arr[10]>-1.000000
afc.c: +142 ((unsigned char)input[0].float_state_arr[3])<>0
afc.c: -146 (input[0].float_state_arr[0]+0.010000)<10.000000
afc.c: +148 ((unsigned char)input[0].float_state_arr[5])<>0
afc.c: +151 ((unsigned char)input[0].float_state_arr[4])<>0
afc.c: -158 input[0].x_arr[8]<50.000000
afc.c: +160 1<>0
afc.c: +162 1<>0
afc.c: -162b 0=0
afc.c: -182 1<>0
afc.c: +191 1<>0
afc.c: -205 ((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))/14.700000)=<1.660000
afc.c: +207 ((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))/14.700000)<0.130000

Simplified Path Predicate for case 2:
input[0].x_arr[10]>-1.000000 AND
((unsigned char)input[0].float_state_arr[3])<>0 AND
(input[0].float_state_arr[0]+0.010000)<10.000000 AND
((unsigned char)input[0].float_state_arr[5])<>0 AND
((unsigned char)input[0].float_state_arr[4])<>0 AND
input[0].x_arr[8]<50.000000 AND
((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))/14.700000)=<1.660000 AND
((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))/14.700000)<0.130000

Output Values for case 2: (Symbolic,Concrete)
return value = 0, 0
ret_val[0].float_state_arr[0] = (input[0].float_state_arr[0]+0.010000), -370.990000
ret_val[0].float_state_arr[1] = input[0].float_state_arr[1], -78.000000
ret_val[0].float_state_arr[2] = (input[0].float_state_arr[2]+(((input[0].x_arr[9]+-((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))))*0.413280)*0.010000)), 73.000000
ret_val[0].float_state_arr[3] = 1.000000, 1.000000
ret_val[0].float_state_arr[4] = 0.000000, 0.000000
ret_val[0].float_state_arr[5] = 1.000000, 1.000000
ret_val[0].float_state_arr[6] = input[0].float_state_arr[6], -73.000000
ret_val[0].output_arr[0] = 0.130000, 0.130000
ret_val[0].output_arr[1] = 1.000000, 1.000000
ret_val[0].output_arr[2] = 14.700000, 14.700000

to explore negation deepest unexplored condition of predicate,
Path Predicate Prefix to solve :
afc.c: -140 input[0].x_arr[10]>-1.000000
afc.c: +142 ((unsigned char)input[0].float_state_arr[3])<>0
afc.c: -146 (input[0].float_state_arr[0]+0.010000)<10.000000
afc.c: +148 ((unsigned char)input[0].float_state_arr[5])<>0
afc.c: +151 ((unsigned char)input[0].float_state_arr[4])<>0
afc.c: -158 input[0].x_arr[8]<50.000000
afc.c: +160 1<>0
afc.c: +162 1<>0
afc.c: -162b 0=0
afc.c: -182 1<>0
afc.c: +191 1<>0
afc.c: -205 ((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))/14.700000)=<1.660000
afc.c: -207 ((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))/14.700000)>=0.130000
Path Prefix to cover :
afc.c
-140 +142 -146 +148 +151 -158 +160 +162 -162b -182 +191 -205 -207


TEST CASE 3

Dimensions:
input__controller = 1;
input__controller[0].input_arr = 1;
input__controller[0].int_state_arr = 0;
input__controller[0].float_state_arr = 7;
input__controller[0].x_arr = 13;
ret_val__controller = 1;
ret_val__controller[0].int_state_arr = 0;
ret_val__controller[0].float_state_arr = 7;
ret_val__controller[0].output_arr = 3;

Other input values:
input__controller[0].input_arr[0] = -423.000000;
input__controller[0].float_state_arr[0] = -371.000000;
input__controller[0].float_state_arr[1] = -78.000000;
input__controller[0].float_state_arr[2] = -184.000000;
input__controller[0].float_state_arr[3] = 272.000000;
input__controller[0].float_state_arr[4] = -193.000000;
input__controller[0].float_state_arr[5] = -384.000000;
input__controller[0].float_state_arr[6] = -73.000000;
input__controller[0].x_arr[0] = -493.000000;
input__controller[0].x_arr[1] = 170.000000;
input__controller[0].x_arr[2] = -8.000000;
input__controller[0].x_arr[3] = -463.000000;
input__controller[0].x_arr[4] = -387.000000;
input__controller[0].x_arr[5] = -245.000000;
input__controller[0].x_arr[6] = 150.000000;
input__controller[0].x_arr[7] = -0.007228;
input__controller[0].x_arr[8] = -478.000000;
input__controller[0].x_arr[9] = 8.000000;
input__controller[0].x_arr[10] = 417.000000;
input__controller[0].x_arr[11] = 173.000000;
input__controller[0].x_arr[12] = -343.000000;
ret_val__controller[0].float_state_arr[0] = 397.000000;
ret_val__controller[0].float_state_arr[1] = -241.000000;
ret_val__controller[0].float_state_arr[2] = -268.000000;
ret_val__controller[0].float_state_arr[3] = -365.000000;
ret_val__controller[0].float_state_arr[4] = -94.000000;
ret_val__controller[0].float_state_arr[5] = -68.000000;
ret_val__controller[0].float_state_arr[6] = -139.000000;
ret_val__controller[0].output_arr[0] = 438.000000;
ret_val__controller[0].output_arr[1] = -491.000000;
ret_val__controller[0].output_arr[2] = -16.000000;

Result:
unknown

Path Covered :
afc.c
-140 +142 -146 +148 +151 -158 +160 +162 -162b -182 +191 -205 -207


Path Predicate for case 3:
afc.c: -140 input[0].x_arr[10]>-1.000000
afc.c: +142 ((unsigned char)input[0].float_state_arr[3])<>0
afc.c: -146 (input[0].float_state_arr[0]+0.010000)<10.000000
afc.c: +148 ((unsigned char)input[0].float_state_arr[5])<>0
afc.c: +151 ((unsigned char)input[0].float_state_arr[4])<>0
afc.c: -158 input[0].x_arr[8]<50.000000
afc.c: +160 1<>0
afc.c: +162 1<>0
afc.c: -162b 0=0
afc.c: -182 1<>0
afc.c: +191 1<>0
afc.c: -205 ((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))/14.700000)=<1.660000
afc.c: -207 ((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))/14.700000)>=0.130000

Simplified Path Predicate for case 3:
input[0].x_arr[10]>-1.000000 AND
((unsigned char)input[0].float_state_arr[3])<>0 AND
(input[0].float_state_arr[0]+0.010000)<10.000000 AND
((unsigned char)input[0].float_state_arr[5])<>0 AND
((unsigned char)input[0].float_state_arr[4])<>0 AND
input[0].x_arr[8]<50.000000 AND
((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))/14.700000)=<1.660000 AND
((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))/14.700000)>=0.130000

Output Values for case 3: (Symbolic,Concrete)
return value = 0, 0
ret_val[0].float_state_arr[0] = (input[0].float_state_arr[0]+0.010000), -370.990000
ret_val[0].float_state_arr[1] = input[0].float_state_arr[1], -78.000000
ret_val[0].float_state_arr[2] = (input[0].float_state_arr[2]+(((input[0].x_arr[9]+-((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))))*0.413280)*0.010000)), -184.000000
ret_val[0].float_state_arr[3] = 1.000000, 1.000000
ret_val[0].float_state_arr[4] = 0.000000, 0.000000
ret_val[0].float_state_arr[5] = 1.000000, 1.000000
ret_val[0].float_state_arr[6] = input[0].float_state_arr[6], -73.000000
ret_val[0].output_arr[0] = ((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))/14.700000), 0.544218
ret_val[0].output_arr[1] = 1.000000, 1.000000
ret_val[0].output_arr[2] = 14.700000, 14.700000

to explore negation deepest unexplored condition of predicate,
Path Predicate Prefix to solve :
afc.c: -140 input[0].x_arr[10]>-1.000000
afc.c: +142 ((unsigned char)input[0].float_state_arr[3])<>0
afc.c: -146 (input[0].float_state_arr[0]+0.010000)<10.000000
afc.c: +148 ((unsigned char)input[0].float_state_arr[5])<>0
afc.c: +151 ((unsigned char)input[0].float_state_arr[4])<>0
afc.c: -158 input[0].x_arr[8]<50.000000
afc.c: +160 1<>0
afc.c: +162 1<>0
afc.c: -162b 0=0
afc.c: -182 1<>0
afc.c: -191 1=0
Path Prefix to cover :
afc.c
-140 +142 -146 +148 +151 -158 +160 +162 -162b -182 -191
trivially infeasible

to explore negation deepest unexplored condition of predicate,
Path Predicate Prefix to solve :
afc.c: -140 input[0].x_arr[10]>-1.000000
afc.c: +142 ((unsigned char)input[0].float_state_arr[3])<>0
afc.c: -146 (input[0].float_state_arr[0]+0.010000)<10.000000
afc.c: +148 ((unsigned char)input[0].float_state_arr[5])<>0
afc.c: +151 ((unsigned char)input[0].float_state_arr[4])<>0
afc.c: -158 input[0].x_arr[8]<50.000000
afc.c: +160 1<>0
afc.c: +162 1<>0
afc.c: -162b 0=0
afc.c: +182 1=0
Path Prefix to cover :
afc.c
-140 +142 -146 +148 +151 -158 +160 +162 -162b +182
trivially infeasible

to explore negation deepest unexplored condition of predicate,
Path Predicate Prefix to solve :
afc.c: -140 input[0].x_arr[10]>-1.000000
afc.c: +142 ((unsigned char)input[0].float_state_arr[3])<>0
afc.c: -146 (input[0].float_state_arr[0]+0.010000)<10.000000
afc.c: +148 ((unsigned char)input[0].float_state_arr[5])<>0
afc.c: +151 ((unsigned char)input[0].float_state_arr[4])<>0
afc.c: -158 input[0].x_arr[8]<50.000000
afc.c: +160 1<>0
afc.c: +162 1<>0
afc.c: +162b 0<>0
Path Prefix to cover :
afc.c
-140 +142 -146 +148 +151 -158 +160 +162 +162b
trivially infeasible

to explore negation deepest unexplored condition of predicate,
Path Predicate Prefix to solve :
afc.c: -140 input[0].x_arr[10]>-1.000000
afc.c: +142 ((unsigned char)input[0].float_state_arr[3])<>0
afc.c: -146 (input[0].float_state_arr[0]+0.010000)<10.000000
afc.c: +148 ((unsigned char)input[0].float_state_arr[5])<>0
afc.c: +151 ((unsigned char)input[0].float_state_arr[4])<>0
afc.c: -158 input[0].x_arr[8]<50.000000
afc.c: +160 1<>0
afc.c: -162 1=0
Path Prefix to cover :
afc.c
-140 +142 -146 +148 +151 -158 +160 -162
trivially infeasible

to explore negation deepest unexplored condition of predicate,
Path Predicate Prefix to solve :
afc.c: -140 input[0].x_arr[10]>-1.000000
afc.c: +142 ((unsigned char)input[0].float_state_arr[3])<>0
afc.c: -146 (input[0].float_state_arr[0]+0.010000)<10.000000
afc.c: +148 ((unsigned char)input[0].float_state_arr[5])<>0
afc.c: +151 ((unsigned char)input[0].float_state_arr[4])<>0
afc.c: -158 input[0].x_arr[8]<50.000000
afc.c: -160 1=0
Path Prefix to cover :
afc.c
-140 +142 -146 +148 +151 -158 -160
trivially infeasible

to explore negation deepest unexplored condition of predicate,
Path Predicate Prefix to solve :
afc.c: -140 input[0].x_arr[10]>-1.000000
afc.c: +142 ((unsigned char)input[0].float_state_arr[3])<>0
afc.c: -146 (input[0].float_state_arr[0]+0.010000)<10.000000
afc.c: +148 ((unsigned char)input[0].float_state_arr[5])<>0
afc.c: +151 ((unsigned char)input[0].float_state_arr[4])<>0
afc.c: +158 input[0].x_arr[8]>=50.000000
Path Prefix to cover :
afc.c
-140 +142 -146 +148 +151 +158


TEST CASE 4

Dimensions:
input__controller = 1;
input__controller[0].input_arr = 1;
input__controller[0].int_state_arr = 0;
input__controller[0].float_state_arr = 7;
input__controller[0].x_arr = 13;
ret_val__controller = 1;
ret_val__controller[0].int_state_arr = 0;
ret_val__controller[0].float_state_arr = 7;
ret_val__controller[0].output_arr = 3;

Other input values:
input__controller[0].input_arr[0] = -423.000000;
input__controller[0].float_state_arr[0] = -371.000000;
input__controller[0].float_state_arr[1] = -78.000000;
input__controller[0].float_state_arr[2] = -292.000000;
input__controller[0].float_state_arr[3] = 272.000000;
input__controller[0].float_state_arr[4] = -193.000000;
input__controller[0].float_state_arr[5] = -384.000000;
input__controller[0].float_state_arr[6] = -73.000000;
input__controller[0].x_arr[0] = -493.000000;
input__controller[0].x_arr[1] = 170.000000;
input__controller[0].x_arr[2] = -8.000000;
input__controller[0].x_arr[3] = -463.000000;
input__controller[0].x_arr[4] = -387.000000;
input__controller[0].x_arr[5] = -245.000000;
input__controller[0].x_arr[6] = 150.000000;
input__controller[0].x_arr[7] = -475.000000;
input__controller[0].x_arr[8] = 466.000000;
input__controller[0].x_arr[9] = -156.000000;
input__controller[0].x_arr[10] = 417.000000;
input__controller[0].x_arr[11] = 173.000000;
input__controller[0].x_arr[12] = -343.000000;
ret_val__controller[0].float_state_arr[0] = 397.000000;
ret_val__controller[0].float_state_arr[1] = -241.000000;
ret_val__controller[0].float_state_arr[2] = -268.000000;
ret_val__controller[0].float_state_arr[3] = -365.000000;
ret_val__controller[0].float_state_arr[4] = -94.000000;
ret_val__controller[0].float_state_arr[5] = -68.000000;
ret_val__controller[0].float_state_arr[6] = -139.000000;
ret_val__controller[0].output_arr[0] = 438.000000;
ret_val__controller[0].output_arr[1] = -491.000000;
ret_val__controller[0].output_arr[2] = -16.000000;

Result:
unknown

Path Covered :
afc.c
-140 +142 -146 +148 +151 +158 +160 +162 +162b -182 +191 +205


Path Predicate for case 4:
afc.c: -140 input[0].x_arr[10]>-1.000000
afc.c: +142 ((unsigned char)input[0].float_state_arr[3])<>0
afc.c: -146 (input[0].float_state_arr[0]+0.010000)<10.000000
afc.c: +148 ((unsigned char)input[0].float_state_arr[5])<>0
afc.c: +151 ((unsigned char)input[0].float_state_arr[4])<>0
afc.c: +158 input[0].x_arr[8]>=50.000000
afc.c: +160 1<>0
afc.c: +162 1<>0
afc.c: +162b 1<>0
afc.c: -182 1<>0
afc.c: +191 1<>0
afc.c: +205 ((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))/12.500000)>1.660000

Simplified Path Predicate for case 4:
input[0].x_arr[10]>-1.000000 AND
((unsigned char)input[0].float_state_arr[3])<>0 AND
(input[0].float_state_arr[0]+0.010000)<10.000000 AND
((unsigned char)input[0].float_state_arr[5])<>0 AND
((unsigned char)input[0].float_state_arr[4])<>0 AND
input[0].x_arr[8]>=50.000000 AND
((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))/12.500000)>1.660000

Output Values for case 4: (Symbolic,Concrete)
return value = 0, 0
ret_val[0].float_state_arr[0] = (input[0].float_state_arr[0]+0.010000), -370.990000
ret_val[0].float_state_arr[1] = input[0].float_state_arr[1], -78.000000
ret_val[0].float_state_arr[2] = (input[0].float_state_arr[2]+(((input[0].x_arr[9]+-((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))))*0.413280)*0.010000)), -5957.592441
ret_val[0].float_state_arr[3] = 1.000000, 1.000000
ret_val[0].float_state_arr[4] = 1.000000, 1.000000
ret_val[0].float_state_arr[5] = 1.000000, 1.000000
ret_val[0].float_state_arr[6] = input[0].float_state_arr[6], -73.000000
ret_val[0].output_arr[0] = 1.660000, 1.660000
ret_val[0].output_arr[1] = 1.000000, 1.000000
ret_val[0].output_arr[2] = 12.500000, 12.500000

to explore negation deepest unexplored condition of predicate,
Path Predicate Prefix to solve :
afc.c: -140 input[0].x_arr[10]>-1.000000
afc.c: +142 ((unsigned char)input[0].float_state_arr[3])<>0
afc.c: -146 (input[0].float_state_arr[0]+0.010000)<10.000000
afc.c: +148 ((unsigned char)input[0].float_state_arr[5])<>0
afc.c: +151 ((unsigned char)input[0].float_state_arr[4])<>0
afc.c: +158 input[0].x_arr[8]>=50.000000
afc.c: +160 1<>0
afc.c: +162 1<>0
afc.c: +162b 1<>0
afc.c: -182 1<>0
afc.c: +191 1<>0
afc.c: -205 ((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))/12.500000)=<1.660000
Path Prefix to cover :
afc.c
-140 +142 -146 +148 +151 +158 +160 +162 +162b -182 +191 -205


TEST CASE 5

Dimensions:
input__controller = 1;
input__controller[0].input_arr = 1;
input__controller[0].int_state_arr = 0;
input__controller[0].float_state_arr = 7;
input__controller[0].x_arr = 13;
ret_val__controller = 1;
ret_val__controller[0].int_state_arr = 0;
ret_val__controller[0].float_state_arr = 7;
ret_val__controller[0].output_arr = 3;

Other input values:
input__controller[0].input_arr[0] = -423.000000;
input__controller[0].float_state_arr[0] = -371.000000;
input__controller[0].float_state_arr[1] = -78.000000;
input__controller[0].float_state_arr[2] = -469.000000;
input__controller[0].float_state_arr[3] = 272.000000;
input__controller[0].float_state_arr[4] = -193.000000;
input__controller[0].float_state_arr[5] = -384.000000;
input__controller[0].float_state_arr[6] = -73.000000;
input__controller[0].x_arr[0] = -493.000000;
input__controller[0].x_arr[1] = 170.000000;
input__controller[0].x_arr[2] = -8.000000;
input__controller[0].x_arr[3] = -463.000000;
input__controller[0].x_arr[4] = -387.000000;
input__controller[0].x_arr[5] = -245.000000;
input__controller[0].x_arr[6] = 150.000000;
input__controller[0].x_arr[7] = 0.000000;
input__controller[0].x_arr[8] = 466.000000;
input__controller[0].x_arr[9] = -0.366000;
input__controller[0].x_arr[10] = 417.000000;
input__controller[0].x_arr[11] = 173.000000;
input__controller[0].x_arr[12] = -343.000000;
ret_val__controller[0].float_state_arr[0] = 397.000000;
ret_val__controller[0].float_state_arr[1] = -241.000000;
ret_val__controller[0].float_state_arr[2] = -268.000000;
ret_val__controller[0].float_state_arr[3] = -365.000000;
ret_val__controller[0].float_state_arr[4] = -94.000000;
ret_val__controller[0].float_state_arr[5] = -68.000000;
ret_val__controller[0].float_state_arr[6] = -139.000000;
ret_val__controller[0].output_arr[0] = 438.000000;
ret_val__controller[0].output_arr[1] = -491.000000;
ret_val__controller[0].output_arr[2] = -16.000000;

Result:
unknown

Path Covered :
afc.c
-140 +142 -146 +148 +151 +158 +160 +162 +162b -182 +191 -205 +207


Path Predicate for case 5:
afc.c: -140 input[0].x_arr[10]>-1.000000
afc.c: +142 ((unsigned char)input[0].float_state_arr[3])<>0
afc.c: -146 (input[0].float_state_arr[0]+0.010000)<10.000000
afc.c: +148 ((unsigned char)input[0].float_state_arr[5])<>0
afc.c: +151 ((unsigned char)input[0].float_state_arr[4])<>0
afc.c: +158 input[0].x_arr[8]>=50.000000
afc.c: +160 1<>0
afc.c: +162 1<>0
afc.c: +162b 1<>0
afc.c: -182 1<>0
afc.c: +191 1<>0
afc.c: -205 ((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))/12.500000)=<1.660000
afc.c: +207 ((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))/12.500000)<0.130000

Simplified Path Predicate for case 5:
input[0].x_arr[10]>-1.000000 AND
((unsigned char)input[0].float_state_arr[3])<>0 AND
(input[0].float_state_arr[0]+0.010000)<10.000000 AND
((unsigned char)input[0].float_state_arr[5])<>0 AND
((unsigned char)input[0].float_state_arr[4])<>0 AND
input[0].x_arr[8]>=50.000000 AND
((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))/12.500000)=<1.660000 AND
((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))/12.500000)<0.130000

Output Values for case 5: (Symbolic,Concrete)
return value = 0, 0
ret_val[0].float_state_arr[0] = (input[0].float_state_arr[0]+0.010000), -370.990000
ret_val[0].float_state_arr[1] = input[0].float_state_arr[1], -78.000000
ret_val[0].float_state_arr[2] = (input[0].float_state_arr[2]+(((input[0].x_arr[9]+-((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))))*0.413280)*0.010000)), -469.000000
ret_val[0].float_state_arr[3] = 1.000000, 1.000000
ret_val[0].float_state_arr[4] = 1.000000, 1.000000
ret_val[0].float_state_arr[5] = 1.000000, 1.000000
ret_val[0].float_state_arr[6] = input[0].float_state_arr[6], -73.000000
ret_val[0].output_arr[0] = 0.130000, 0.130000
ret_val[0].output_arr[1] = 1.000000, 1.000000
ret_val[0].output_arr[2] = 12.500000, 12.500000

to explore negation deepest unexplored condition of predicate,
Path Predicate Prefix to solve :
afc.c: -140 input[0].x_arr[10]>-1.000000
afc.c: +142 ((unsigned char)input[0].float_state_arr[3])<>0
afc.c: -146 (input[0].float_state_arr[0]+0.010000)<10.000000
afc.c: +148 ((unsigned char)input[0].float_state_arr[5])<>0
afc.c: +151 ((unsigned char)input[0].float_state_arr[4])<>0
afc.c: +158 input[0].x_arr[8]>=50.000000
afc.c: +160 1<>0
afc.c: +162 1<>0
afc.c: +162b 1<>0
afc.c: -182 1<>0
afc.c: +191 1<>0
afc.c: -205 ((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))/12.500000)=<1.660000
afc.c: -207 ((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))/12.500000)>=0.130000
Path Prefix to cover :
afc.c
-140 +142 -146 +148 +151 +158 +160 +162 +162b -182 +191 -205 -207


TEST CASE 6

Dimensions:
input__controller = 1;
input__controller[0].input_arr = 1;
input__controller[0].int_state_arr = 0;
input__controller[0].float_state_arr = 7;
input__controller[0].x_arr = 13;
ret_val__controller = 1;
ret_val__controller[0].int_state_arr = 0;
ret_val__controller[0].float_state_arr = 7;
ret_val__controller[0].output_arr = 3;

Other input values:
input__controller[0].input_arr[0] = -423.000000;
input__controller[0].float_state_arr[0] = -371.000000;
input__controller[0].float_state_arr[1] = -78.000000;
input__controller[0].float_state_arr[2] = 81.000000;
input__controller[0].float_state_arr[3] = 272.000000;
input__controller[0].float_state_arr[4] = -193.000000;
input__controller[0].float_state_arr[5] = -384.000000;
input__controller[0].float_state_arr[6] = -73.000000;
input__controller[0].x_arr[0] = -493.000000;
input__controller[0].x_arr[1] = 170.000000;
input__controller[0].x_arr[2] = -8.000000;
input__controller[0].x_arr[3] = -463.000000;
input__controller[0].x_arr[4] = -387.000000;
input__controller[0].x_arr[5] = -245.000000;
input__controller[0].x_arr[6] = 150.000000;
input__controller[0].x_arr[7] = 26399.190566;
input__controller[0].x_arr[8] = 466.000000;
input__controller[0].x_arr[9] = 19.000000;
input__controller[0].x_arr[10] = 417.000000;
input__controller[0].x_arr[11] = 173.000000;
input__controller[0].x_arr[12] = -343.000000;
ret_val__controller[0].float_state_arr[0] = 397.000000;
ret_val__controller[0].float_state_arr[1] = -241.000000;
ret_val__controller[0].float_state_arr[2] = -268.000000;
ret_val__controller[0].float_state_arr[3] = -365.000000;
ret_val__controller[0].float_state_arr[4] = -94.000000;
ret_val__controller[0].float_state_arr[5] = -68.000000;
ret_val__controller[0].float_state_arr[6] = -139.000000;
ret_val__controller[0].output_arr[0] = 438.000000;
ret_val__controller[0].output_arr[1] = -491.000000;
ret_val__controller[0].output_arr[2] = -16.000000;

Result:
unknown

Path Covered :
afc.c
-140 +142 -146 +148 +151 +158 +160 +162 +162b -182 +191 -205 -207


Path Predicate for case 6:
afc.c: -140 input[0].x_arr[10]>-1.000000
afc.c: +142 ((unsigned char)input[0].float_state_arr[3])<>0
afc.c: -146 (input[0].float_state_arr[0]+0.010000)<10.000000
afc.c: +148 ((unsigned char)input[0].float_state_arr[5])<>0
afc.c: +151 ((unsigned char)input[0].float_state_arr[4])<>0
afc.c: +158 input[0].x_arr[8]>=50.000000
afc.c: +160 1<>0
afc.c: +162 1<>0
afc.c: +162b 1<>0
afc.c: -182 1<>0
afc.c: +191 1<>0
afc.c: -205 ((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))/12.500000)=<1.660000
afc.c: -207 ((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))/12.500000)>=0.130000

Simplified Path Predicate for case 6:
input[0].x_arr[10]>-1.000000 AND
((unsigned char)input[0].float_state_arr[3])<>0 AND
(input[0].float_state_arr[0]+0.010000)<10.000000 AND
((unsigned char)input[0].float_state_arr[5])<>0 AND
((unsigned char)input[0].float_state_arr[4])<>0 AND
input[0].x_arr[8]>=50.000000 AND
((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))/12.500000)=<1.660000 AND
((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))/12.500000)>=0.130000

Output Values for case 6: (Symbolic,Concrete)
return value = 0, 0
ret_val[0].float_state_arr[0] = (input[0].float_state_arr[0]+0.010000), -370.990000
ret_val[0].float_state_arr[1] = input[0].float_state_arr[1], -78.000000
ret_val[0].float_state_arr[2] = (input[0].float_state_arr[2]+(((input[0].x_arr[9]+-((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))))*0.413280)*0.010000)), 81.000000
ret_val[0].float_state_arr[3] = 1.000000, 1.000000
ret_val[0].float_state_arr[4] = 1.000000, 1.000000
ret_val[0].float_state_arr[5] = 1.000000, 1.000000
ret_val[0].float_state_arr[6] = input[0].float_state_arr[6], -73.000000
ret_val[0].output_arr[0] = ((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))/12.500000), 1.520000
ret_val[0].output_arr[1] = 1.000000, 1.000000
ret_val[0].output_arr[2] = 12.500000, 12.500000

to explore negation deepest unexplored condition of predicate,
Path Predicate Prefix to solve :
afc.c: -140 input[0].x_arr[10]>-1.000000
afc.c: +142 ((unsigned char)input[0].float_state_arr[3])<>0
afc.c: -146 (input[0].float_state_arr[0]+0.010000)<10.000000
afc.c: +148 ((unsigned char)input[0].float_state_arr[5])<>0
afc.c: +151 ((unsigned char)input[0].float_state_arr[4])<>0
afc.c: +158 input[0].x_arr[8]>=50.000000
afc.c: +160 1<>0
afc.c: +162 1<>0
afc.c: +162b 1<>0
afc.c: -182 1<>0
afc.c: -191 1=0
Path Prefix to cover :
afc.c
-140 +142 -146 +148 +151 +158 +160 +162 +162b -182 -191
trivially infeasible

to explore negation deepest unexplored condition of predicate,
Path Predicate Prefix to solve :
afc.c: -140 input[0].x_arr[10]>-1.000000
afc.c: +142 ((unsigned char)input[0].float_state_arr[3])<>0
afc.c: -146 (input[0].float_state_arr[0]+0.010000)<10.000000
afc.c: +148 ((unsigned char)input[0].float_state_arr[5])<>0
afc.c: +151 ((unsigned char)input[0].float_state_arr[4])<>0
afc.c: +158 input[0].x_arr[8]>=50.000000
afc.c: +160 1<>0
afc.c: +162 1<>0
afc.c: +162b 1<>0
afc.c: +182 1=0
Path Prefix to cover :
afc.c
-140 +142 -146 +148 +151 +158 +160 +162 +162b +182
trivially infeasible

to explore negation deepest unexplored condition of predicate,
Path Predicate Prefix to solve :
afc.c: -140 input[0].x_arr[10]>-1.000000
afc.c: +142 ((unsigned char)input[0].float_state_arr[3])<>0
afc.c: -146 (input[0].float_state_arr[0]+0.010000)<10.000000
afc.c: +148 ((unsigned char)input[0].float_state_arr[5])<>0
afc.c: +151 ((unsigned char)input[0].float_state_arr[4])<>0
afc.c: +158 input[0].x_arr[8]>=50.000000
afc.c: +160 1<>0
afc.c: +162 1<>0
afc.c: -162b 1=0
Path Prefix to cover :
afc.c
-140 +142 -146 +148 +151 +158 +160 +162 -162b
trivially infeasible

to explore negation deepest unexplored condition of predicate,
Path Predicate Prefix to solve :
afc.c: -140 input[0].x_arr[10]>-1.000000
afc.c: +142 ((unsigned char)input[0].float_state_arr[3])<>0
afc.c: -146 (input[0].float_state_arr[0]+0.010000)<10.000000
afc.c: +148 ((unsigned char)input[0].float_state_arr[5])<>0
afc.c: +151 ((unsigned char)input[0].float_state_arr[4])<>0
afc.c: +158 input[0].x_arr[8]>=50.000000
afc.c: +160 1<>0
afc.c: -162 1=0
Path Prefix to cover :
afc.c
-140 +142 -146 +148 +151 +158 +160 -162
trivially infeasible

to explore negation deepest unexplored condition of predicate,
Path Predicate Prefix to solve :
afc.c: -140 input[0].x_arr[10]>-1.000000
afc.c: +142 ((unsigned char)input[0].float_state_arr[3])<>0
afc.c: -146 (input[0].float_state_arr[0]+0.010000)<10.000000
afc.c: +148 ((unsigned char)input[0].float_state_arr[5])<>0
afc.c: +151 ((unsigned char)input[0].float_state_arr[4])<>0
afc.c: +158 input[0].x_arr[8]>=50.000000
afc.c: -160 1=0
Path Prefix to cover :
afc.c
-140 +142 -146 +148 +151 +158 -160
trivially infeasible

to explore negation deepest unexplored condition of predicate,
Path Predicate Prefix to solve :
afc.c: -140 input[0].x_arr[10]>-1.000000
afc.c: +142 ((unsigned char)input[0].float_state_arr[3])<>0
afc.c: -146 (input[0].float_state_arr[0]+0.010000)<10.000000
afc.c: +148 ((unsigned char)input[0].float_state_arr[5])<>0
afc.c: -151 ((unsigned char)input[0].float_state_arr[4])=0
Path Prefix to cover :
afc.c
-140 +142 -146 +148 -151


TEST CASE 7

Dimensions:
input__controller = 1;
input__controller[0].input_arr = 1;
input__controller[0].int_state_arr = 0;
input__controller[0].float_state_arr = 7;
input__controller[0].x_arr = 13;
ret_val__controller = 1;
ret_val__controller[0].int_state_arr = 0;
ret_val__controller[0].float_state_arr = 7;
ret_val__controller[0].output_arr = 3;

Other input values:
input__controller[0].input_arr[0] = -423.000000;
input__controller[0].float_state_arr[0] = -371.000000;
input__controller[0].float_state_arr[1] = -78.000000;
input__controller[0].float_state_arr[2] = -292.000000;
input__controller[0].float_state_arr[3] = 272.000000;
input__controller[0].float_state_arr[4] = -0.200000;
input__controller[0].float_state_arr[5] = -384.000000;
input__controller[0].float_state_arr[6] = -73.000000;
input__controller[0].x_arr[0] = -493.000000;
input__controller[0].x_arr[1] = 170.000000;
input__controller[0].x_arr[2] = -8.000000;
input__controller[0].x_arr[3] = -463.000000;
input__controller[0].x_arr[4] = -387.000000;
input__controller[0].x_arr[5] = -245.000000;
input__controller[0].x_arr[6] = 150.000000;
input__controller[0].x_arr[7] = -475.000000;
input__controller[0].x_arr[8] = -478.000000;
input__controller[0].x_arr[9] = -156.000000;
input__controller[0].x_arr[10] = 417.000000;
input__controller[0].x_arr[11] = 173.000000;
input__controller[0].x_arr[12] = -343.000000;
ret_val__controller[0].float_state_arr[0] = 397.000000;
ret_val__controller[0].float_state_arr[1] = -241.000000;
ret_val__controller[0].float_state_arr[2] = -268.000000;
ret_val__controller[0].float_state_arr[3] = -365.000000;
ret_val__controller[0].float_state_arr[4] = -94.000000;
ret_val__controller[0].float_state_arr[5] = -68.000000;
ret_val__controller[0].float_state_arr[6] = -139.000000;
ret_val__controller[0].output_arr[0] = 438.000000;
ret_val__controller[0].output_arr[1] = -491.000000;
ret_val__controller[0].output_arr[2] = -16.000000;

Result:
unknown

Path Covered :
afc.c
-140 +142 -146 +148 -151 -158 +160 +162 -162b -182 +191 +205


Path Predicate for case 7:
afc.c: -140 input[0].x_arr[10]>-1.000000
afc.c: +142 ((unsigned char)input[0].float_state_arr[3])<>0
afc.c: -146 (input[0].float_state_arr[0]+0.010000)<10.000000
afc.c: +148 ((unsigned char)input[0].float_state_arr[5])<>0
afc.c: -151 ((unsigned char)input[0].float_state_arr[4])=0
afc.c: -158 input[0].x_arr[8]<70.000000
afc.c: +160 1<>0
afc.c: +162 1<>0
afc.c: -162b 0=0
afc.c: -182 1<>0
afc.c: +191 1<>0
afc.c: +205 ((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))/14.700000)>1.660000

Simplified Path Predicate for case 7:
input[0].x_arr[10]>-1.000000 AND
((unsigned char)input[0].float_state_arr[3])<>0 AND
(input[0].float_state_arr[0]+0.010000)<10.000000 AND
((unsigned char)input[0].float_state_arr[5])<>0 AND
((unsigned char)input[0].float_state_arr[4])=0 AND
input[0].x_arr[8]<70.000000 AND
((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))/14.700000)>1.660000

Output Values for case 7: (Symbolic,Concrete)
return value = 0, 0
ret_val[0].float_state_arr[0] = (input[0].float_state_arr[0]+0.010000), -370.990000
ret_val[0].float_state_arr[1] = input[0].float_state_arr[1], -78.000000
ret_val[0].float_state_arr[2] = (input[0].float_state_arr[2]+(((input[0].x_arr[9]+-((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))))*0.413280)*0.010000)), -5957.592441
ret_val[0].float_state_arr[3] = 1.000000, 1.000000
ret_val[0].float_state_arr[4] = 0.000000, 0.000000
ret_val[0].float_state_arr[5] = 1.000000, 1.000000
ret_val[0].float_state_arr[6] = input[0].float_state_arr[6], -73.000000
ret_val[0].output_arr[0] = 1.660000, 1.660000
ret_val[0].output_arr[1] = 1.000000, 1.000000
ret_val[0].output_arr[2] = 14.700000, 14.700000

to explore negation deepest unexplored condition of predicate,
Path Predicate Prefix to solve :
afc.c: -140 input[0].x_arr[10]>-1.000000
afc.c: +142 ((unsigned char)input[0].float_state_arr[3])<>0
afc.c: -146 (input[0].float_state_arr[0]+0.010000)<10.000000
afc.c: +148 ((unsigned char)input[0].float_state_arr[5])<>0
afc.c: -151 ((unsigned char)input[0].float_state_arr[4])=0
afc.c: -158 input[0].x_arr[8]<70.000000
afc.c: +160 1<>0
afc.c: +162 1<>0
afc.c: -162b 0=0
afc.c: -182 1<>0
afc.c: +191 1<>0
afc.c: -205 ((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))/14.700000)=<1.660000
Path Prefix to cover :
afc.c
-140 +142 -146 +148 -151 -158 +160 +162 -162b -182 +191 -205


TEST CASE 8

Dimensions:
input__controller = 1;
input__controller[0].input_arr = 1;
input__controller[0].int_state_arr = 0;
input__controller[0].float_state_arr = 7;
input__controller[0].x_arr = 13;
ret_val__controller = 1;
ret_val__controller[0].int_state_arr = 0;
ret_val__controller[0].float_state_arr = 7;
ret_val__controller[0].output_arr = 3;

Other input values:
input__controller[0].input_arr[0] = -423.000000;
input__controller[0].float_state_arr[0] = -371.000000;
input__controller[0].float_state_arr[1] = -78.000000;
input__controller[0].float_state_arr[2] = 466.000000;
input__controller[0].float_state_arr[3] = 272.000000;
input__controller[0].float_state_arr[4] = -0.200000;
input__controller[0].float_state_arr[5] = -384.000000;
input__controller[0].float_state_arr[6] = -73.000000;
input__controller[0].x_arr[0] = -493.000000;
input__controller[0].x_arr[1] = 170.000000;
input__controller[0].x_arr[2] = -8.000000;
input__controller[0].x_arr[3] = -463.000000;
input__controller[0].x_arr[4] = -387.000000;
input__controller[0].x_arr[5] = -245.000000;
input__controller[0].x_arr[6] = 150.000000;
input__controller[0].x_arr[7] = 0.000000;
input__controller[0].x_arr[8] = -478.000000;
input__controller[0].x_arr[9] = -0.366000;
input__controller[0].x_arr[10] = 417.000000;
input__controller[0].x_arr[11] = 173.000000;
input__controller[0].x_arr[12] = -343.000000;
ret_val__controller[0].float_state_arr[0] = 397.000000;
ret_val__controller[0].float_state_arr[1] = -241.000000;
ret_val__controller[0].float_state_arr[2] = -268.000000;
ret_val__controller[0].float_state_arr[3] = -365.000000;
ret_val__controller[0].float_state_arr[4] = -94.000000;
ret_val__controller[0].float_state_arr[5] = -68.000000;
ret_val__controller[0].float_state_arr[6] = -139.000000;
ret_val__controller[0].output_arr[0] = 438.000000;
ret_val__controller[0].output_arr[1] = -491.000000;
ret_val__controller[0].output_arr[2] = -16.000000;

Result:
unknown

Path Covered :
afc.c
-140 +142 -146 +148 -151 -158 +160 +162 -162b -182 +191 -205 +207


Path Predicate for case 8:
afc.c: -140 input[0].x_arr[10]>-1.000000
afc.c: +142 ((unsigned char)input[0].float_state_arr[3])<>0
afc.c: -146 (input[0].float_state_arr[0]+0.010000)<10.000000
afc.c: +148 ((unsigned char)input[0].float_state_arr[5])<>0
afc.c: -151 ((unsigned char)input[0].float_state_arr[4])=0
afc.c: -158 input[0].x_arr[8]<70.000000
afc.c: +160 1<>0
afc.c: +162 1<>0
afc.c: -162b 0=0
afc.c: -182 1<>0
afc.c: +191 1<>0
afc.c: -205 ((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))/14.700000)=<1.660000
afc.c: +207 ((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))/14.700000)<0.130000

Simplified Path Predicate for case 8:
input[0].x_arr[10]>-1.000000 AND
((unsigned char)input[0].float_state_arr[3])<>0 AND
(input[0].float_state_arr[0]+0.010000)<10.000000 AND
((unsigned char)input[0].float_state_arr[5])<>0 AND
((unsigned char)input[0].float_state_arr[4])=0 AND
input[0].x_arr[8]<70.000000 AND
((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))/14.700000)=<1.660000 AND
((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))/14.700000)<0.130000

Output Values for case 8: (Symbolic,Concrete)
return value = 0, 0
ret_val[0].float_state_arr[0] = (input[0].float_state_arr[0]+0.010000), -370.990000
ret_val[0].float_state_arr[1] = input[0].float_state_arr[1], -78.000000
ret_val[0].float_state_arr[2] = (input[0].float_state_arr[2]+(((input[0].x_arr[9]+-((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))))*0.413280)*0.010000)), 466.000000
ret_val[0].float_state_arr[3] = 1.000000, 1.000000
ret_val[0].float_state_arr[4] = 0.000000, 0.000000
ret_val[0].float_state_arr[5] = 1.000000, 1.000000
ret_val[0].float_state_arr[6] = input[0].float_state_arr[6], -73.000000
ret_val[0].output_arr[0] = 0.130000, 0.130000
ret_val[0].output_arr[1] = 1.000000, 1.000000
ret_val[0].output_arr[2] = 14.700000, 14.700000

to explore negation deepest unexplored condition of predicate,
Path Predicate Prefix to solve :
afc.c: -140 input[0].x_arr[10]>-1.000000
afc.c: +142 ((unsigned char)input[0].float_state_arr[3])<>0
afc.c: -146 (input[0].float_state_arr[0]+0.010000)<10.000000
afc.c: +148 ((unsigned char)input[0].float_state_arr[5])<>0
afc.c: -151 ((unsigned char)input[0].float_state_arr[4])=0
afc.c: -158 input[0].x_arr[8]<70.000000
afc.c: +160 1<>0
afc.c: +162 1<>0
afc.c: -162b 0=0
afc.c: -182 1<>0
afc.c: +191 1<>0
afc.c: -205 ((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))/14.700000)=<1.660000
afc.c: -207 ((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))/14.700000)>=0.130000
Path Prefix to cover :
afc.c
-140 +142 -146 +148 -151 -158 +160 +162 -162b -182 +191 -205 -207


TEST CASE 9

Dimensions:
input__controller = 1;
input__controller[0].input_arr = 1;
input__controller[0].int_state_arr = 0;
input__controller[0].float_state_arr = 7;
input__controller[0].x_arr = 13;
ret_val__controller = 1;
ret_val__controller[0].int_state_arr = 0;
ret_val__controller[0].float_state_arr = 7;
ret_val__controller[0].output_arr = 3;

Other input values:
input__controller[0].input_arr[0] = -423.000000;
input__controller[0].float_state_arr[0] = -371.000000;
input__controller[0].float_state_arr[1] = -78.000000;
input__controller[0].float_state_arr[2] = 392.000000;
input__controller[0].float_state_arr[3] = 272.000000;
input__controller[0].float_state_arr[4] = -0.200000;
input__controller[0].float_state_arr[5] = -384.000000;
input__controller[0].float_state_arr[6] = -73.000000;
input__controller[0].x_arr[0] = -493.000000;
input__controller[0].x_arr[1] = 170.000000;
input__controller[0].x_arr[2] = -8.000000;
input__controller[0].x_arr[3] = -463.000000;
input__controller[0].x_arr[4] = -387.000000;
input__controller[0].x_arr[5] = -245.000000;
input__controller[0].x_arr[6] = 150.000000;
input__controller[0].x_arr[7] = -0.002793;
input__controller[0].x_arr[8] = -478.000000;
input__controller[0].x_arr[9] = 14.000000;
input__controller[0].x_arr[10] = 417.000000;
input__controller[0].x_arr[11] = 173.000000;
input__controller[0].x_arr[12] = -343.000000;
ret_val__controller[0].float_state_arr[0] = 397.000000;
ret_val__controller[0].float_state_arr[1] = -241.000000;
ret_val__controller[0].float_state_arr[2] = -268.000000;
ret_val__controller[0].float_state_arr[3] = -365.000000;
ret_val__controller[0].float_state_arr[4] = -94.000000;
ret_val__controller[0].float_state_arr[5] = -68.000000;
ret_val__controller[0].float_state_arr[6] = -139.000000;
ret_val__controller[0].output_arr[0] = 438.000000;
ret_val__controller[0].output_arr[1] = -491.000000;
ret_val__controller[0].output_arr[2] = -16.000000;

Result:
unknown

Path Covered :
afc.c
-140 +142 -146 +148 -151 -158 +160 +162 -162b -182 +191 -205 -207


Path Predicate for case 9:
afc.c: -140 input[0].x_arr[10]>-1.000000
afc.c: +142 ((unsigned char)input[0].float_state_arr[3])<>0
afc.c: -146 (input[0].float_state_arr[0]+0.010000)<10.000000
afc.c: +148 ((unsigned char)input[0].float_state_arr[5])<>0
afc.c: -151 ((unsigned char)input[0].float_state_arr[4])=0
afc.c: -158 input[0].x_arr[8]<70.000000
afc.c: +160 1<>0
afc.c: +162 1<>0
afc.c: -162b 0=0
afc.c: -182 1<>0
afc.c: +191 1<>0
afc.c: -205 ((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))/14.700000)=<1.660000
afc.c: -207 ((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))/14.700000)>=0.130000

Simplified Path Predicate for case 9:
input[0].x_arr[10]>-1.000000 AND
((unsigned char)input[0].float_state_arr[3])<>0 AND
(input[0].float_state_arr[0]+0.010000)<10.000000 AND
((unsigned char)input[0].float_state_arr[5])<>0 AND
((unsigned char)input[0].float_state_arr[4])=0 AND
input[0].x_arr[8]<70.000000 AND
((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))/14.700000)=<1.660000 AND
((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))/14.700000)>=0.130000

Output Values for case 9: (Symbolic,Concrete)
return value = 0, 0
ret_val[0].float_state_arr[0] = (input[0].float_state_arr[0]+0.010000), -370.990000
ret_val[0].float_state_arr[1] = input[0].float_state_arr[1], -78.000000
ret_val[0].float_state_arr[2] = (input[0].float_state_arr[2]+(((input[0].x_arr[9]+-((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))))*0.413280)*0.010000)), 392.000000
ret_val[0].float_state_arr[3] = 1.000000, 1.000000
ret_val[0].float_state_arr[4] = 0.000000, 0.000000
ret_val[0].float_state_arr[5] = 1.000000, 1.000000
ret_val[0].float_state_arr[6] = input[0].float_state_arr[6], -73.000000
ret_val[0].output_arr[0] = ((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))/14.700000), 0.952381
ret_val[0].output_arr[1] = 1.000000, 1.000000
ret_val[0].output_arr[2] = 14.700000, 14.700000

to explore negation deepest unexplored condition of predicate,
Path Predicate Prefix to solve :
afc.c: -140 input[0].x_arr[10]>-1.000000
afc.c: +142 ((unsigned char)input[0].float_state_arr[3])<>0
afc.c: -146 (input[0].float_state_arr[0]+0.010000)<10.000000
afc.c: +148 ((unsigned char)input[0].float_state_arr[5])<>0
afc.c: -151 ((unsigned char)input[0].float_state_arr[4])=0
afc.c: -158 input[0].x_arr[8]<70.000000
afc.c: +160 1<>0
afc.c: +162 1<>0
afc.c: -162b 0=0
afc.c: -182 1<>0
afc.c: -191 1=0
Path Prefix to cover :
afc.c
-140 +142 -146 +148 -151 -158 +160 +162 -162b -182 -191
trivially infeasible

to explore negation deepest unexplored condition of predicate,
Path Predicate Prefix to solve :
afc.c: -140 input[0].x_arr[10]>-1.000000
afc.c: +142 ((unsigned char)input[0].float_state_arr[3])<>0
afc.c: -146 (input[0].float_state_arr[0]+0.010000)<10.000000
afc.c: +148 ((unsigned char)input[0].float_state_arr[5])<>0
afc.c: -151 ((unsigned char)input[0].float_state_arr[4])=0
afc.c: -158 input[0].x_arr[8]<70.000000
afc.c: +160 1<>0
afc.c: +162 1<>0
afc.c: -162b 0=0
afc.c: +182 1=0
Path Prefix to cover :
afc.c
-140 +142 -146 +148 -151 -158 +160 +162 -162b +182
trivially infeasible

to explore negation deepest unexplored condition of predicate,
Path Predicate Prefix to solve :
afc.c: -140 input[0].x_arr[10]>-1.000000
afc.c: +142 ((unsigned char)input[0].float_state_arr[3])<>0
afc.c: -146 (input[0].float_state_arr[0]+0.010000)<10.000000
afc.c: +148 ((unsigned char)input[0].float_state_arr[5])<>0
afc.c: -151 ((unsigned char)input[0].float_state_arr[4])=0
afc.c: -158 input[0].x_arr[8]<70.000000
afc.c: +160 1<>0
afc.c: +162 1<>0
afc.c: +162b 0<>0
Path Prefix to cover :
afc.c
-140 +142 -146 +148 -151 -158 +160 +162 +162b
trivially infeasible

to explore negation deepest unexplored condition of predicate,
Path Predicate Prefix to solve :
afc.c: -140 input[0].x_arr[10]>-1.000000
afc.c: +142 ((unsigned char)input[0].float_state_arr[3])<>0
afc.c: -146 (input[0].float_state_arr[0]+0.010000)<10.000000
afc.c: +148 ((unsigned char)input[0].float_state_arr[5])<>0
afc.c: -151 ((unsigned char)input[0].float_state_arr[4])=0
afc.c: -158 input[0].x_arr[8]<70.000000
afc.c: +160 1<>0
afc.c: -162 1=0
Path Prefix to cover :
afc.c
-140 +142 -146 +148 -151 -158 +160 -162
trivially infeasible

to explore negation deepest unexplored condition of predicate,
Path Predicate Prefix to solve :
afc.c: -140 input[0].x_arr[10]>-1.000000
afc.c: +142 ((unsigned char)input[0].float_state_arr[3])<>0
afc.c: -146 (input[0].float_state_arr[0]+0.010000)<10.000000
afc.c: +148 ((unsigned char)input[0].float_state_arr[5])<>0
afc.c: -151 ((unsigned char)input[0].float_state_arr[4])=0
afc.c: -158 input[0].x_arr[8]<70.000000
afc.c: -160 1=0
Path Prefix to cover :
afc.c
-140 +142 -146 +148 -151 -158 -160
trivially infeasible

to explore negation deepest unexplored condition of predicate,
Path Predicate Prefix to solve :
afc.c: -140 input[0].x_arr[10]>-1.000000
afc.c: +142 ((unsigned char)input[0].float_state_arr[3])<>0
afc.c: -146 (input[0].float_state_arr[0]+0.010000)<10.000000
afc.c: +148 ((unsigned char)input[0].float_state_arr[5])<>0
afc.c: -151 ((unsigned char)input[0].float_state_arr[4])=0
afc.c: +158 input[0].x_arr[8]>=70.000000
Path Prefix to cover :
afc.c
-140 +142 -146 +148 -151 +158


TEST CASE 10

Dimensions:
input__controller = 1;
input__controller[0].input_arr = 1;
input__controller[0].int_state_arr = 0;
input__controller[0].float_state_arr = 7;
input__controller[0].x_arr = 13;
ret_val__controller = 1;
ret_val__controller[0].int_state_arr = 0;
ret_val__controller[0].float_state_arr = 7;
ret_val__controller[0].output_arr = 3;

Other input values:
input__controller[0].input_arr[0] = -423.000000;
input__controller[0].float_state_arr[0] = -371.000000;
input__controller[0].float_state_arr[1] = -78.000000;
input__controller[0].float_state_arr[2] = -292.000000;
input__controller[0].float_state_arr[3] = 272.000000;
input__controller[0].float_state_arr[4] = -0.200000;
input__controller[0].float_state_arr[5] = -384.000000;
input__controller[0].float_state_arr[6] = -73.000000;
input__controller[0].x_arr[0] = -493.000000;
input__controller[0].x_arr[1] = 170.000000;
input__controller[0].x_arr[2] = -8.000000;
input__controller[0].x_arr[3] = -463.000000;
input__controller[0].x_arr[4] = -387.000000;
input__controller[0].x_arr[5] = -245.000000;
input__controller[0].x_arr[6] = 150.000000;
input__controller[0].x_arr[7] = -475.000000;
input__controller[0].x_arr[8] = 533.000000;
input__controller[0].x_arr[9] = -156.000000;
input__controller[0].x_arr[10] = 417.000000;
input__controller[0].x_arr[11] = 173.000000;
input__controller[0].x_arr[12] = -343.000000;
ret_val__controller[0].float_state_arr[0] = 397.000000;
ret_val__controller[0].float_state_arr[1] = -241.000000;
ret_val__controller[0].float_state_arr[2] = -268.000000;
ret_val__controller[0].float_state_arr[3] = -365.000000;
ret_val__controller[0].float_state_arr[4] = -94.000000;
ret_val__controller[0].float_state_arr[5] = -68.000000;
ret_val__controller[0].float_state_arr[6] = -139.000000;
ret_val__controller[0].output_arr[0] = 438.000000;
ret_val__controller[0].output_arr[1] = -491.000000;
ret_val__controller[0].output_arr[2] = -16.000000;

Result:
unknown

Path Covered :
afc.c
-140 +142 -146 +148 -151 +158 +160 +162 +162b -182 +191 +205


Path Predicate for case 10:
afc.c: -140 input[0].x_arr[10]>-1.000000
afc.c: +142 ((unsigned char)input[0].float_state_arr[3])<>0
afc.c: -146 (input[0].float_state_arr[0]+0.010000)<10.000000
afc.c: +148 ((unsigned char)input[0].float_state_arr[5])<>0
afc.c: -151 ((unsigned char)input[0].float_state_arr[4])=0
afc.c: +158 input[0].x_arr[8]>=70.000000
afc.c: +160 1<>0
afc.c: +162 1<>0
afc.c: +162b 1<>0
afc.c: -182 1<>0
afc.c: +191 1<>0
afc.c: +205 ((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))/12.500000)>1.660000

Simplified Path Predicate for case 10:
input[0].x_arr[10]>-1.000000 AND
((unsigned char)input[0].float_state_arr[3])<>0 AND
(input[0].float_state_arr[0]+0.010000)<10.000000 AND
((unsigned char)input[0].float_state_arr[5])<>0 AND
((unsigned char)input[0].float_state_arr[4])=0 AND
input[0].x_arr[8]>=70.000000 AND
((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))/12.500000)>1.660000

Output Values for case 10: (Symbolic,Concrete)
return value = 0, 0
ret_val[0].float_state_arr[0] = (input[0].float_state_arr[0]+0.010000), -370.990000
ret_val[0].float_state_arr[1] = input[0].float_state_arr[1], -78.000000
ret_val[0].float_state_arr[2] = (input[0].float_state_arr[2]+(((input[0].x_arr[9]+-((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))))*0.413280)*0.010000)), -5957.592441
ret_val[0].float_state_arr[3] = 1.000000, 1.000000
ret_val[0].float_state_arr[4] = 1.000000, 1.000000
ret_val[0].float_state_arr[5] = 1.000000, 1.000000
ret_val[0].float_state_arr[6] = input[0].float_state_arr[6], -73.000000
ret_val[0].output_arr[0] = 1.660000, 1.660000
ret_val[0].output_arr[1] = 1.000000, 1.000000
ret_val[0].output_arr[2] = 12.500000, 12.500000

to explore negation deepest unexplored condition of predicate,
Path Predicate Prefix to solve :
afc.c: -140 input[0].x_arr[10]>-1.000000
afc.c: +142 ((unsigned char)input[0].float_state_arr[3])<>0
afc.c: -146 (input[0].float_state_arr[0]+0.010000)<10.000000
afc.c: +148 ((unsigned char)input[0].float_state_arr[5])<>0
afc.c: -151 ((unsigned char)input[0].float_state_arr[4])=0
afc.c: +158 input[0].x_arr[8]>=70.000000
afc.c: +160 1<>0
afc.c: +162 1<>0
afc.c: +162b 1<>0
afc.c: -182 1<>0
afc.c: +191 1<>0
afc.c: -205 ((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))/12.500000)=<1.660000
Path Prefix to cover :
afc.c
-140 +142 -146 +148 -151 +158 +160 +162 +162b -182 +191 -205


TEST CASE 11

Dimensions:
input__controller = 1;
input__controller[0].input_arr = 1;
input__controller[0].int_state_arr = 0;
input__controller[0].float_state_arr = 7;
input__controller[0].x_arr = 13;
ret_val__controller = 1;
ret_val__controller[0].int_state_arr = 0;
ret_val__controller[0].float_state_arr = 7;
ret_val__controller[0].output_arr = 3;

Other input values:
input__controller[0].input_arr[0] = -423.000000;
input__controller[0].float_state_arr[0] = -371.000000;
input__controller[0].float_state_arr[1] = -78.000000;
input__controller[0].float_state_arr[2] = 318.000000;
input__controller[0].float_state_arr[3] = 272.000000;
input__controller[0].float_state_arr[4] = -0.200000;
input__controller[0].float_state_arr[5] = -384.000000;
input__controller[0].float_state_arr[6] = -73.000000;
input__controller[0].x_arr[0] = -493.000000;
input__controller[0].x_arr[1] = 170.000000;
input__controller[0].x_arr[2] = -8.000000;
input__controller[0].x_arr[3] = -463.000000;
input__controller[0].x_arr[4] = -387.000000;
input__controller[0].x_arr[5] = -245.000000;
input__controller[0].x_arr[6] = 150.000000;
input__controller[0].x_arr[7] = -0.000000;
input__controller[0].x_arr[8] = 533.000000;
input__controller[0].x_arr[9] = -0.366000;
input__controller[0].x_arr[10] = 417.000000;
input__controller[0].x_arr[11] = 173.000000;
input__controller[0].x_arr[12] = -343.000000;
ret_val__controller[0].float_state_arr[0] = 397.000000;
ret_val__controller[0].float_state_arr[1] = -241.000000;
ret_val__controller[0].float_state_arr[2] = -268.000000;
ret_val__controller[0].float_state_arr[3] = -365.000000;
ret_val__controller[0].float_state_arr[4] = -94.000000;
ret_val__controller[0].float_state_arr[5] = -68.000000;
ret_val__controller[0].float_state_arr[6] = -139.000000;
ret_val__controller[0].output_arr[0] = 438.000000;
ret_val__controller[0].output_arr[1] = -491.000000;
ret_val__controller[0].output_arr[2] = -16.000000;

Result:
unknown

Path Covered :
afc.c
-140 +142 -146 +148 -151 +158 +160 +162 +162b -182 +191 -205 +207


Path Predicate for case 11:
afc.c: -140 input[0].x_arr[10]>-1.000000
afc.c: +142 ((unsigned char)input[0].float_state_arr[3])<>0
afc.c: -146 (input[0].float_state_arr[0]+0.010000)<10.000000
afc.c: +148 ((unsigned char)input[0].float_state_arr[5])<>0
afc.c: -151 ((unsigned char)input[0].float_state_arr[4])=0
afc.c: +158 input[0].x_arr[8]>=70.000000
afc.c: +160 1<>0
afc.c: +162 1<>0
afc.c: +162b 1<>0
afc.c: -182 1<>0
afc.c: +191 1<>0
afc.c: -205 ((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))/12.500000)=<1.660000
afc.c: +207 ((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))/12.500000)<0.130000

Simplified Path Predicate for case 11:
input[0].x_arr[10]>-1.000000 AND
((unsigned char)input[0].float_state_arr[3])<>0 AND
(input[0].float_state_arr[0]+0.010000)<10.000000 AND
((unsigned char)input[0].float_state_arr[5])<>0 AND
((unsigned char)input[0].float_state_arr[4])=0 AND
input[0].x_arr[8]>=70.000000 AND
((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))/12.500000)=<1.660000 AND
((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))/12.500000)<0.130000

Output Values for case 11: (Symbolic,Concrete)
return value = 0, 0
ret_val[0].float_state_arr[0] = (input[0].float_state_arr[0]+0.010000), -370.990000
ret_val[0].float_state_arr[1] = input[0].float_state_arr[1], -78.000000
ret_val[0].float_state_arr[2] = (input[0].float_state_arr[2]+(((input[0].x_arr[9]+-((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))))*0.413280)*0.010000)), 318.000000
ret_val[0].float_state_arr[3] = 1.000000, 1.000000
ret_val[0].float_state_arr[4] = 1.000000, 1.000000
ret_val[0].float_state_arr[5] = 1.000000, 1.000000
ret_val[0].float_state_arr[6] = input[0].float_state_arr[6], -73.000000
ret_val[0].output_arr[0] = 0.130000, 0.130000
ret_val[0].output_arr[1] = 1.000000, 1.000000
ret_val[0].output_arr[2] = 12.500000, 12.500000

to explore negation deepest unexplored condition of predicate,
Path Predicate Prefix to solve :
afc.c: -140 input[0].x_arr[10]>-1.000000
afc.c: +142 ((unsigned char)input[0].float_state_arr[3])<>0
afc.c: -146 (input[0].float_state_arr[0]+0.010000)<10.000000
afc.c: +148 ((unsigned char)input[0].float_state_arr[5])<>0
afc.c: -151 ((unsigned char)input[0].float_state_arr[4])=0
afc.c: +158 input[0].x_arr[8]>=70.000000
afc.c: +160 1<>0
afc.c: +162 1<>0
afc.c: +162b 1<>0
afc.c: -182 1<>0
afc.c: +191 1<>0
afc.c: -205 ((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))/12.500000)=<1.660000
afc.c: -207 ((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))/12.500000)>=0.130000
Path Prefix to cover :
afc.c
-140 +142 -146 +148 -151 +158 +160 +162 +162b -182 +191 -205 -207


TEST CASE 12

Dimensions:
input__controller = 1;
input__controller[0].input_arr = 1;
input__controller[0].int_state_arr = 0;
input__controller[0].float_state_arr = 7;
input__controller[0].x_arr = 13;
ret_val__controller = 1;
ret_val__controller[0].int_state_arr = 0;
ret_val__controller[0].float_state_arr = 7;
ret_val__controller[0].output_arr = 3;

Other input values:
input__controller[0].input_arr[0] = -423.000000;
input__controller[0].float_state_arr[0] = -371.000000;
input__controller[0].float_state_arr[1] = -78.000000;
input__controller[0].float_state_arr[2] = 418.000000;
input__controller[0].float_state_arr[3] = 272.000000;
input__controller[0].float_state_arr[4] = -0.200000;
input__controller[0].float_state_arr[5] = -384.000000;
input__controller[0].float_state_arr[6] = -73.000000;
input__controller[0].x_arr[0] = -493.000000;
input__controller[0].x_arr[1] = 170.000000;
input__controller[0].x_arr[2] = -8.000000;
input__controller[0].x_arr[3] = -463.000000;
input__controller[0].x_arr[4] = -387.000000;
input__controller[0].x_arr[5] = -245.000000;
input__controller[0].x_arr[6] = 150.000000;
input__controller[0].x_arr[7] = -0.001943;
input__controller[0].x_arr[8] = 533.000000;
input__controller[0].x_arr[9] = 11.000000;
input__controller[0].x_arr[10] = 417.000000;
input__controller[0].x_arr[11] = 173.000000;
input__controller[0].x_arr[12] = -343.000000;
ret_val__controller[0].float_state_arr[0] = 397.000000;
ret_val__controller[0].float_state_arr[1] = -241.000000;
ret_val__controller[0].float_state_arr[2] = -268.000000;
ret_val__controller[0].float_state_arr[3] = -365.000000;
ret_val__controller[0].float_state_arr[4] = -94.000000;
ret_val__controller[0].float_state_arr[5] = -68.000000;
ret_val__controller[0].float_state_arr[6] = -139.000000;
ret_val__controller[0].output_arr[0] = 438.000000;
ret_val__controller[0].output_arr[1] = -491.000000;
ret_val__controller[0].output_arr[2] = -16.000000;

Result:
unknown

Path Covered :
afc.c
-140 +142 -146 +148 -151 +158 +160 +162 +162b -182 +191 -205 -207


Path Predicate for case 12:
afc.c: -140 input[0].x_arr[10]>-1.000000
afc.c: +142 ((unsigned char)input[0].float_state_arr[3])<>0
afc.c: -146 (input[0].float_state_arr[0]+0.010000)<10.000000
afc.c: +148 ((unsigned char)input[0].float_state_arr[5])<>0
afc.c: -151 ((unsigned char)input[0].float_state_arr[4])=0
afc.c: +158 input[0].x_arr[8]>=70.000000
afc.c: +160 1<>0
afc.c: +162 1<>0
afc.c: +162b 1<>0
afc.c: -182 1<>0
afc.c: +191 1<>0
afc.c: -205 ((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))/12.500000)=<1.660000
afc.c: -207 ((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))/12.500000)>=0.130000

Simplified Path Predicate for case 12:
input[0].x_arr[10]>-1.000000 AND
((unsigned char)input[0].float_state_arr[3])<>0 AND
(input[0].float_state_arr[0]+0.010000)<10.000000 AND
((unsigned char)input[0].float_state_arr[5])<>0 AND
((unsigned char)input[0].float_state_arr[4])=0 AND
input[0].x_arr[8]>=70.000000 AND
((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))/12.500000)=<1.660000 AND
((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))/12.500000)>=0.130000

Output Values for case 12: (Symbolic,Concrete)
return value = 0, 0
ret_val[0].float_state_arr[0] = (input[0].float_state_arr[0]+0.010000), -370.990000
ret_val[0].float_state_arr[1] = input[0].float_state_arr[1], -78.000000
ret_val[0].float_state_arr[2] = (input[0].float_state_arr[2]+(((input[0].x_arr[9]+-((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))))*0.413280)*0.010000)), 418.000000
ret_val[0].float_state_arr[3] = 1.000000, 1.000000
ret_val[0].float_state_arr[4] = 1.000000, 1.000000
ret_val[0].float_state_arr[5] = 1.000000, 1.000000
ret_val[0].float_state_arr[6] = input[0].float_state_arr[6], -73.000000
ret_val[0].output_arr[0] = ((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))/12.500000), 0.880000
ret_val[0].output_arr[1] = 1.000000, 1.000000
ret_val[0].output_arr[2] = 12.500000, 12.500000

to explore negation deepest unexplored condition of predicate,
Path Predicate Prefix to solve :
afc.c: -140 input[0].x_arr[10]>-1.000000
afc.c: +142 ((unsigned char)input[0].float_state_arr[3])<>0
afc.c: -146 (input[0].float_state_arr[0]+0.010000)<10.000000
afc.c: +148 ((unsigned char)input[0].float_state_arr[5])<>0
afc.c: -151 ((unsigned char)input[0].float_state_arr[4])=0
afc.c: +158 input[0].x_arr[8]>=70.000000
afc.c: +160 1<>0
afc.c: +162 1<>0
afc.c: +162b 1<>0
afc.c: -182 1<>0
afc.c: -191 1=0
Path Prefix to cover :
afc.c
-140 +142 -146 +148 -151 +158 +160 +162 +162b -182 -191
trivially infeasible

to explore negation deepest unexplored condition of predicate,
Path Predicate Prefix to solve :
afc.c: -140 input[0].x_arr[10]>-1.000000
afc.c: +142 ((unsigned char)input[0].float_state_arr[3])<>0
afc.c: -146 (input[0].float_state_arr[0]+0.010000)<10.000000
afc.c: +148 ((unsigned char)input[0].float_state_arr[5])<>0
afc.c: -151 ((unsigned char)input[0].float_state_arr[4])=0
afc.c: +158 input[0].x_arr[8]>=70.000000
afc.c: +160 1<>0
afc.c: +162 1<>0
afc.c: +162b 1<>0
afc.c: +182 1=0
Path Prefix to cover :
afc.c
-140 +142 -146 +148 -151 +158 +160 +162 +162b +182
trivially infeasible

to explore negation deepest unexplored condition of predicate,
Path Predicate Prefix to solve :
afc.c: -140 input[0].x_arr[10]>-1.000000
afc.c: +142 ((unsigned char)input[0].float_state_arr[3])<>0
afc.c: -146 (input[0].float_state_arr[0]+0.010000)<10.000000
afc.c: +148 ((unsigned char)input[0].float_state_arr[5])<>0
afc.c: -151 ((unsigned char)input[0].float_state_arr[4])=0
afc.c: +158 input[0].x_arr[8]>=70.000000
afc.c: +160 1<>0
afc.c: +162 1<>0
afc.c: -162b 1=0
Path Prefix to cover :
afc.c
-140 +142 -146 +148 -151 +158 +160 +162 -162b
trivially infeasible

to explore negation deepest unexplored condition of predicate,
Path Predicate Prefix to solve :
afc.c: -140 input[0].x_arr[10]>-1.000000
afc.c: +142 ((unsigned char)input[0].float_state_arr[3])<>0
afc.c: -146 (input[0].float_state_arr[0]+0.010000)<10.000000
afc.c: +148 ((unsigned char)input[0].float_state_arr[5])<>0
afc.c: -151 ((unsigned char)input[0].float_state_arr[4])=0
afc.c: +158 input[0].x_arr[8]>=70.000000
afc.c: +160 1<>0
afc.c: -162 1=0
Path Prefix to cover :
afc.c
-140 +142 -146 +148 -151 +158 +160 -162
trivially infeasible

to explore negation deepest unexplored condition of predicate,
Path Predicate Prefix to solve :
afc.c: -140 input[0].x_arr[10]>-1.000000
afc.c: +142 ((unsigned char)input[0].float_state_arr[3])<>0
afc.c: -146 (input[0].float_state_arr[0]+0.010000)<10.000000
afc.c: +148 ((unsigned char)input[0].float_state_arr[5])<>0
afc.c: -151 ((unsigned char)input[0].float_state_arr[4])=0
afc.c: +158 input[0].x_arr[8]>=70.000000
afc.c: -160 1=0
Path Prefix to cover :
afc.c
-140 +142 -146 +148 -151 +158 -160
trivially infeasible

to explore negation deepest unexplored condition of predicate,
Path Predicate Prefix to solve :
afc.c: -140 input[0].x_arr[10]>-1.000000
afc.c: +142 ((unsigned char)input[0].float_state_arr[3])<>0
afc.c: -146 (input[0].float_state_arr[0]+0.010000)<10.000000
afc.c: -148 ((unsigned char)input[0].float_state_arr[5])=0
Path Prefix to cover :
afc.c
-140 +142 -146 -148


TEST CASE 13

Dimensions:
input__controller = 1;
input__controller[0].input_arr = 1;
input__controller[0].int_state_arr = 0;
input__controller[0].float_state_arr = 7;
input__controller[0].x_arr = 13;
ret_val__controller = 1;
ret_val__controller[0].int_state_arr = 0;
ret_val__controller[0].float_state_arr = 7;
ret_val__controller[0].output_arr = 3;

Other input values:
input__controller[0].input_arr[0] = -423.000000;
input__controller[0].float_state_arr[0] = -371.000000;
input__controller[0].float_state_arr[1] = -78.000000;
input__controller[0].float_state_arr[2] = -292.000000;
input__controller[0].float_state_arr[3] = 272.000000;
input__controller[0].float_state_arr[4] = -193.000000;
input__controller[0].float_state_arr[5] = 0.400000;
input__controller[0].float_state_arr[6] = -73.000000;
input__controller[0].x_arr[0] = -493.000000;
input__controller[0].x_arr[1] = 170.000000;
input__controller[0].x_arr[2] = -8.000000;
input__controller[0].x_arr[3] = -463.000000;
input__controller[0].x_arr[4] = -387.000000;
input__controller[0].x_arr[5] = -245.000000;
input__controller[0].x_arr[6] = 150.000000;
input__controller[0].x_arr[7] = -475.000000;
input__controller[0].x_arr[8] = -478.000000;
input__controller[0].x_arr[9] = -156.000000;
input__controller[0].x_arr[10] = 417.000000;
input__controller[0].x_arr[11] = 173.000000;
input__controller[0].x_arr[12] = -343.000000;
ret_val__controller[0].float_state_arr[0] = 397.000000;
ret_val__controller[0].float_state_arr[1] = -241.000000;
ret_val__controller[0].float_state_arr[2] = -268.000000;
ret_val__controller[0].float_state_arr[3] = -365.000000;
ret_val__controller[0].float_state_arr[4] = -94.000000;
ret_val__controller[0].float_state_arr[5] = -68.000000;
ret_val__controller[0].float_state_arr[6] = -139.000000;
ret_val__controller[0].output_arr[0] = 438.000000;
ret_val__controller[0].output_arr[1] = -491.000000;
ret_val__controller[0].output_arr[2] = -16.000000;

Result:
unknown

Path Covered :
afc.c
-140 +142 -146 -148 +151 -158 +160 -162 -182 +191 +205


Path Predicate for case 13:
afc.c: -140 input[0].x_arr[10]>-1.000000
afc.c: +142 ((unsigned char)input[0].float_state_arr[3])<>0
afc.c: -146 (input[0].float_state_arr[0]+0.010000)<10.000000
afc.c: -148 ((unsigned char)input[0].float_state_arr[5])=0
afc.c: +151 ((unsigned char)input[0].float_state_arr[4])<>0
afc.c: -158 input[0].x_arr[8]<50.000000
afc.c: +160 1<>0
afc.c: -162 0=0
afc.c: -182 1<>0
afc.c: +191 1<>0
afc.c: +205 ((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))/14.700000)>1.660000

Simplified Path Predicate for case 13:
input[0].x_arr[10]>-1.000000 AND
((unsigned char)input[0].float_state_arr[3])<>0 AND
(input[0].float_state_arr[0]+0.010000)<10.000000 AND
((unsigned char)input[0].float_state_arr[5])=0 AND
((unsigned char)input[0].float_state_arr[4])<>0 AND
input[0].x_arr[8]<50.000000 AND
((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))/14.700000)>1.660000

Output Values for case 13: (Symbolic,Concrete)
return value = 0, 0
ret_val[0].float_state_arr[0] = (input[0].float_state_arr[0]+0.010000), -370.990000
ret_val[0].float_state_arr[1] = input[0].float_state_arr[1], -78.000000
ret_val[0].float_state_arr[2] = (input[0].float_state_arr[2]+(((input[0].x_arr[9]+-((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))))*0.413280)*0.010000)), -5957.592441
ret_val[0].float_state_arr[3] = 1.000000, 1.000000
ret_val[0].float_state_arr[4] = 0.000000, 0.000000
ret_val[0].float_state_arr[5] = 0.000000, 0.000000
ret_val[0].float_state_arr[6] = input[0].float_state_arr[6], -73.000000
ret_val[0].output_arr[0] = 1.660000, 1.660000
ret_val[0].output_arr[1] = 1.000000, 1.000000
ret_val[0].output_arr[2] = 14.700000, 14.700000

to explore negation deepest unexplored condition of predicate,
Path Predicate Prefix to solve :
afc.c: -140 input[0].x_arr[10]>-1.000000
afc.c: +142 ((unsigned char)input[0].float_state_arr[3])<>0
afc.c: -146 (input[0].float_state_arr[0]+0.010000)<10.000000
afc.c: -148 ((unsigned char)input[0].float_state_arr[5])=0
afc.c: +151 ((unsigned char)input[0].float_state_arr[4])<>0
afc.c: -158 input[0].x_arr[8]<50.000000
afc.c: +160 1<>0
afc.c: -162 0=0
afc.c: -182 1<>0
afc.c: +191 1<>0
afc.c: -205 ((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))/14.700000)=<1.660000
Path Prefix to cover :
afc.c
-140 +142 -146 -148 +151 -158 +160 -162 -182 +191 -205


TEST CASE 14

Dimensions:
input__controller = 1;
input__controller[0].input_arr = 1;
input__controller[0].int_state_arr = 0;
input__controller[0].float_state_arr = 7;
input__controller[0].x_arr = 13;
ret_val__controller = 1;
ret_val__controller[0].int_state_arr = 0;
ret_val__controller[0].float_state_arr = 7;
ret_val__controller[0].output_arr = 3;

Other input values:
input__controller[0].input_arr[0] = -423.000000;
input__controller[0].float_state_arr[0] = -371.000000;
input__controller[0].float_state_arr[1] = -78.000000;
input__controller[0].float_state_arr[2] = -421.000000;
input__controller[0].float_state_arr[3] = 272.000000;
input__controller[0].float_state_arr[4] = -193.000000;
input__controller[0].float_state_arr[5] = 0.400000;
input__controller[0].float_state_arr[6] = -73.000000;
input__controller[0].x_arr[0] = -493.000000;
input__controller[0].x_arr[1] = 170.000000;
input__controller[0].x_arr[2] = -8.000000;
input__controller[0].x_arr[3] = -463.000000;
input__controller[0].x_arr[4] = -387.000000;
input__controller[0].x_arr[5] = -245.000000;
input__controller[0].x_arr[6] = 150.000000;
input__controller[0].x_arr[7] = 0.000000;
input__controller[0].x_arr[8] = -478.000000;
input__controller[0].x_arr[9] = -0.366000;
input__controller[0].x_arr[10] = 417.000000;
input__controller[0].x_arr[11] = 173.000000;
input__controller[0].x_arr[12] = -343.000000;
ret_val__controller[0].float_state_arr[0] = 397.000000;
ret_val__controller[0].float_state_arr[1] = -241.000000;
ret_val__controller[0].float_state_arr[2] = -268.000000;
ret_val__controller[0].float_state_arr[3] = -365.000000;
ret_val__controller[0].float_state_arr[4] = -94.000000;
ret_val__controller[0].float_state_arr[5] = -68.000000;
ret_val__controller[0].float_state_arr[6] = -139.000000;
ret_val__controller[0].output_arr[0] = 438.000000;
ret_val__controller[0].output_arr[1] = -491.000000;
ret_val__controller[0].output_arr[2] = -16.000000;

Result:
unknown

Path Covered :
afc.c
-140 +142 -146 -148 +151 -158 +160 -162 -182 +191 -205 +207


Path Predicate for case 14:
afc.c: -140 input[0].x_arr[10]>-1.000000
afc.c: +142 ((unsigned char)input[0].float_state_arr[3])<>0
afc.c: -146 (input[0].float_state_arr[0]+0.010000)<10.000000
afc.c: -148 ((unsigned char)input[0].float_state_arr[5])=0
afc.c: +151 ((unsigned char)input[0].float_state_arr[4])<>0
afc.c: -158 input[0].x_arr[8]<50.000000
afc.c: +160 1<>0
afc.c: -162 0=0
afc.c: -182 1<>0
afc.c: +191 1<>0
afc.c: -205 ((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))/14.700000)=<1.660000
afc.c: +207 ((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))/14.700000)<0.130000

Simplified Path Predicate for case 14:
input[0].x_arr[10]>-1.000000 AND
((unsigned char)input[0].float_state_arr[3])<>0 AND
(input[0].float_state_arr[0]+0.010000)<10.000000 AND
((unsigned char)input[0].float_state_arr[5])=0 AND
((unsigned char)input[0].float_state_arr[4])<>0 AND
input[0].x_arr[8]<50.000000 AND
((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))/14.700000)=<1.660000 AND
((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))/14.700000)<0.130000

Output Values for case 14: (Symbolic,Concrete)
return value = 0, 0
ret_val[0].float_state_arr[0] = (input[0].float_state_arr[0]+0.010000), -370.990000
ret_val[0].float_state_arr[1] = input[0].float_state_arr[1], -78.000000
ret_val[0].float_state_arr[2] = (input[0].float_state_arr[2]+(((input[0].x_arr[9]+-((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))))*0.413280)*0.010000)), -421.000000
ret_val[0].float_state_arr[3] = 1.000000, 1.000000
ret_val[0].float_state_arr[4] = 0.000000, 0.000000
ret_val[0].float_state_arr[5] = 0.000000, 0.000000
ret_val[0].float_state_arr[6] = input[0].float_state_arr[6], -73.000000
ret_val[0].output_arr[0] = 0.130000, 0.130000
ret_val[0].output_arr[1] = 1.000000, 1.000000
ret_val[0].output_arr[2] = 14.700000, 14.700000

to explore negation deepest unexplored condition of predicate,
Path Predicate Prefix to solve :
afc.c: -140 input[0].x_arr[10]>-1.000000
afc.c: +142 ((unsigned char)input[0].float_state_arr[3])<>0
afc.c: -146 (input[0].float_state_arr[0]+0.010000)<10.000000
afc.c: -148 ((unsigned char)input[0].float_state_arr[5])=0
afc.c: +151 ((unsigned char)input[0].float_state_arr[4])<>0
afc.c: -158 input[0].x_arr[8]<50.000000
afc.c: +160 1<>0
afc.c: -162 0=0
afc.c: -182 1<>0
afc.c: +191 1<>0
afc.c: -205 ((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))/14.700000)=<1.660000
afc.c: -207 ((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))/14.700000)>=0.130000
Path Prefix to cover :
afc.c
-140 +142 -146 -148 +151 -158 +160 -162 -182 +191 -205 -207


TEST CASE 15

Dimensions:
input__controller = 1;
input__controller[0].input_arr = 1;
input__controller[0].int_state_arr = 0;
input__controller[0].float_state_arr = 7;
input__controller[0].x_arr = 13;
ret_val__controller = 1;
ret_val__controller[0].int_state_arr = 0;
ret_val__controller[0].float_state_arr = 7;
ret_val__controller[0].output_arr = 3;

Other input values:
input__controller[0].input_arr[0] = -423.000000;
input__controller[0].float_state_arr[0] = -371.000000;
input__controller[0].float_state_arr[1] = -78.000000;
input__controller[0].float_state_arr[2] = -271.000000;
input__controller[0].float_state_arr[3] = 272.000000;
input__controller[0].float_state_arr[4] = -193.000000;
input__controller[0].float_state_arr[5] = 0.400000;
input__controller[0].float_state_arr[6] = -73.000000;
input__controller[0].x_arr[0] = -493.000000;
input__controller[0].x_arr[1] = 170.000000;
input__controller[0].x_arr[2] = -8.000000;
input__controller[0].x_arr[3] = -463.000000;
input__controller[0].x_arr[4] = -387.000000;
input__controller[0].x_arr[5] = -245.000000;
input__controller[0].x_arr[6] = 150.000000;
input__controller[0].x_arr[7] = -92224.896253;
input__controller[0].x_arr[8] = -478.000000;
input__controller[0].x_arr[9] = 9.000000;
input__controller[0].x_arr[10] = 417.000000;
input__controller[0].x_arr[11] = 173.000000;
input__controller[0].x_arr[12] = -343.000000;
ret_val__controller[0].float_state_arr[0] = 397.000000;
ret_val__controller[0].float_state_arr[1] = -241.000000;
ret_val__controller[0].float_state_arr[2] = -268.000000;
ret_val__controller[0].float_state_arr[3] = -365.000000;
ret_val__controller[0].float_state_arr[4] = -94.000000;
ret_val__controller[0].float_state_arr[5] = -68.000000;
ret_val__controller[0].float_state_arr[6] = -139.000000;
ret_val__controller[0].output_arr[0] = 438.000000;
ret_val__controller[0].output_arr[1] = -491.000000;
ret_val__controller[0].output_arr[2] = -16.000000;

Result:
unknown

Path Covered :
afc.c
-140 +142 -146 -148 +151 -158 +160 -162 -182 +191 -205 -207


Path Predicate for case 15:
afc.c: -140 input[0].x_arr[10]>-1.000000
afc.c: +142 ((unsigned char)input[0].float_state_arr[3])<>0
afc.c: -146 (input[0].float_state_arr[0]+0.010000)<10.000000
afc.c: -148 ((unsigned char)input[0].float_state_arr[5])=0
afc.c: +151 ((unsigned char)input[0].float_state_arr[4])<>0
afc.c: -158 input[0].x_arr[8]<50.000000
afc.c: +160 1<>0
afc.c: -162 0=0
afc.c: -182 1<>0
afc.c: +191 1<>0
afc.c: -205 ((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))/14.700000)=<1.660000
afc.c: -207 ((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))/14.700000)>=0.130000

Simplified Path Predicate for case 15:
input[0].x_arr[10]>-1.000000 AND
((unsigned char)input[0].float_state_arr[3])<>0 AND
(input[0].float_state_arr[0]+0.010000)<10.000000 AND
((unsigned char)input[0].float_state_arr[5])=0 AND
((unsigned char)input[0].float_state_arr[4])<>0 AND
input[0].x_arr[8]<50.000000 AND
((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))/14.700000)=<1.660000 AND
((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))/14.700000)>=0.130000

Output Values for case 15: (Symbolic,Concrete)
return value = 0, 0
ret_val[0].float_state_arr[0] = (input[0].float_state_arr[0]+0.010000), -370.990000
ret_val[0].float_state_arr[1] = input[0].float_state_arr[1], -78.000000
ret_val[0].float_state_arr[2] = (input[0].float_state_arr[2]+(((input[0].x_arr[9]+-((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))))*0.413280)*0.010000)), -271.000000
ret_val[0].float_state_arr[3] = 1.000000, 1.000000
ret_val[0].float_state_arr[4] = 0.000000, 0.000000
ret_val[0].float_state_arr[5] = 0.000000, 0.000000
ret_val[0].float_state_arr[6] = input[0].float_state_arr[6], -73.000000
ret_val[0].output_arr[0] = ((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))/14.700000), 0.612245
ret_val[0].output_arr[1] = 1.000000, 1.000000
ret_val[0].output_arr[2] = 14.700000, 14.700000

to explore negation deepest unexplored condition of predicate,
Path Predicate Prefix to solve :
afc.c: -140 input[0].x_arr[10]>-1.000000
afc.c: +142 ((unsigned char)input[0].float_state_arr[3])<>0
afc.c: -146 (input[0].float_state_arr[0]+0.010000)<10.000000
afc.c: -148 ((unsigned char)input[0].float_state_arr[5])=0
afc.c: +151 ((unsigned char)input[0].float_state_arr[4])<>0
afc.c: -158 input[0].x_arr[8]<50.000000
afc.c: +160 1<>0
afc.c: -162 0=0
afc.c: -182 1<>0
afc.c: -191 1=0
Path Prefix to cover :
afc.c
-140 +142 -146 -148 +151 -158 +160 -162 -182 -191
trivially infeasible

to explore negation deepest unexplored condition of predicate,
Path Predicate Prefix to solve :
afc.c: -140 input[0].x_arr[10]>-1.000000
afc.c: +142 ((unsigned char)input[0].float_state_arr[3])<>0
afc.c: -146 (input[0].float_state_arr[0]+0.010000)<10.000000
afc.c: -148 ((unsigned char)input[0].float_state_arr[5])=0
afc.c: +151 ((unsigned char)input[0].float_state_arr[4])<>0
afc.c: -158 input[0].x_arr[8]<50.000000
afc.c: +160 1<>0
afc.c: -162 0=0
afc.c: +182 1=0
Path Prefix to cover :
afc.c
-140 +142 -146 -148 +151 -158 +160 -162 +182
trivially infeasible

to explore negation deepest unexplored condition of predicate,
Path Predicate Prefix to solve :
afc.c: -140 input[0].x_arr[10]>-1.000000
afc.c: +142 ((unsigned char)input[0].float_state_arr[3])<>0
afc.c: -146 (input[0].float_state_arr[0]+0.010000)<10.000000
afc.c: -148 ((unsigned char)input[0].float_state_arr[5])=0
afc.c: +151 ((unsigned char)input[0].float_state_arr[4])<>0
afc.c: -158 input[0].x_arr[8]<50.000000
afc.c: +160 1<>0
afc.c: +162 0<>0
Path Prefix to cover :
afc.c
-140 +142 -146 -148 +151 -158 +160 +162
trivially infeasible

to explore negation deepest unexplored condition of predicate,
Path Predicate Prefix to solve :
afc.c: -140 input[0].x_arr[10]>-1.000000
afc.c: +142 ((unsigned char)input[0].float_state_arr[3])<>0
afc.c: -146 (input[0].float_state_arr[0]+0.010000)<10.000000
afc.c: -148 ((unsigned char)input[0].float_state_arr[5])=0
afc.c: +151 ((unsigned char)input[0].float_state_arr[4])<>0
afc.c: -158 input[0].x_arr[8]<50.000000
afc.c: -160 1=0
Path Prefix to cover :
afc.c
-140 +142 -146 -148 +151 -158 -160
trivially infeasible

to explore negation deepest unexplored condition of predicate,
Path Predicate Prefix to solve :
afc.c: -140 input[0].x_arr[10]>-1.000000
afc.c: +142 ((unsigned char)input[0].float_state_arr[3])<>0
afc.c: -146 (input[0].float_state_arr[0]+0.010000)<10.000000
afc.c: -148 ((unsigned char)input[0].float_state_arr[5])=0
afc.c: +151 ((unsigned char)input[0].float_state_arr[4])<>0
afc.c: +158 input[0].x_arr[8]>=50.000000
Path Prefix to cover :
afc.c
-140 +142 -146 -148 +151 +158


TEST CASE 16

Dimensions:
input__controller = 1;
input__controller[0].input_arr = 1;
input__controller[0].int_state_arr = 0;
input__controller[0].float_state_arr = 7;
input__controller[0].x_arr = 13;
ret_val__controller = 1;
ret_val__controller[0].int_state_arr = 0;
ret_val__controller[0].float_state_arr = 7;
ret_val__controller[0].output_arr = 3;

Other input values:
input__controller[0].input_arr[0] = -423.000000;
input__controller[0].float_state_arr[0] = -371.000000;
input__controller[0].float_state_arr[1] = -78.000000;
input__controller[0].float_state_arr[2] = -292.000000;
input__controller[0].float_state_arr[3] = 272.000000;
input__controller[0].float_state_arr[4] = -193.000000;
input__controller[0].float_state_arr[5] = 0.400000;
input__controller[0].float_state_arr[6] = -73.000000;
input__controller[0].x_arr[0] = -493.000000;
input__controller[0].x_arr[1] = 170.000000;
input__controller[0].x_arr[2] = -8.000000;
input__controller[0].x_arr[3] = -463.000000;
input__controller[0].x_arr[4] = -387.000000;
input__controller[0].x_arr[5] = -245.000000;
input__controller[0].x_arr[6] = 150.000000;
input__controller[0].x_arr[7] = -475.000000;
input__controller[0].x_arr[8] = 161.000000;
input__controller[0].x_arr[9] = -156.000000;
input__controller[0].x_arr[10] = 417.000000;
input__controller[0].x_arr[11] = 173.000000;
input__controller[0].x_arr[12] = -343.000000;
ret_val__controller[0].float_state_arr[0] = 397.000000;
ret_val__controller[0].float_state_arr[1] = -241.000000;
ret_val__controller[0].float_state_arr[2] = -268.000000;
ret_val__controller[0].float_state_arr[3] = -365.000000;
ret_val__controller[0].float_state_arr[4] = -94.000000;
ret_val__controller[0].float_state_arr[5] = -68.000000;
ret_val__controller[0].float_state_arr[6] = -139.000000;
ret_val__controller[0].output_arr[0] = 438.000000;
ret_val__controller[0].output_arr[1] = -491.000000;
ret_val__controller[0].output_arr[2] = -16.000000;

Result:
unknown

Path Covered :
afc.c
-140 +142 -146 -148 +151 +158 +160 -162 -182 +191 +205


Path Predicate for case 16:
afc.c: -140 input[0].x_arr[10]>-1.000000
afc.c: +142 ((unsigned char)input[0].float_state_arr[3])<>0
afc.c: -146 (input[0].float_state_arr[0]+0.010000)<10.000000
afc.c: -148 ((unsigned char)input[0].float_state_arr[5])=0
afc.c: +151 ((unsigned char)input[0].float_state_arr[4])<>0
afc.c: +158 input[0].x_arr[8]>=50.000000
afc.c: +160 1<>0
afc.c: -162 0=0
afc.c: -182 1<>0
afc.c: +191 1<>0
afc.c: +205 ((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))/14.700000)>1.660000

Simplified Path Predicate for case 16:
input[0].x_arr[10]>-1.000000 AND
((unsigned char)input[0].float_state_arr[3])<>0 AND
(input[0].float_state_arr[0]+0.010000)<10.000000 AND
((unsigned char)input[0].float_state_arr[5])=0 AND
((unsigned char)input[0].float_state_arr[4])<>0 AND
input[0].x_arr[8]>=50.000000 AND
((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))/14.700000)>1.660000

Output Values for case 16: (Symbolic,Concrete)
return value = 0, 0
ret_val[0].float_state_arr[0] = (input[0].float_state_arr[0]+0.010000), -370.990000
ret_val[0].float_state_arr[1] = input[0].float_state_arr[1], -78.000000
ret_val[0].float_state_arr[2] = (input[0].float_state_arr[2]+(((input[0].x_arr[9]+-((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))))*0.413280)*0.010000)), -5957.592441
ret_val[0].float_state_arr[3] = 1.000000, 1.000000
ret_val[0].float_state_arr[4] = 1.000000, 1.000000
ret_val[0].float_state_arr[5] = 0.000000, 0.000000
ret_val[0].float_state_arr[6] = input[0].float_state_arr[6], -73.000000
ret_val[0].output_arr[0] = 1.660000, 1.660000
ret_val[0].output_arr[1] = 1.000000, 1.000000
ret_val[0].output_arr[2] = 14.700000, 14.700000

to explore negation deepest unexplored condition of predicate,
Path Predicate Prefix to solve :
afc.c: -140 input[0].x_arr[10]>-1.000000
afc.c: +142 ((unsigned char)input[0].float_state_arr[3])<>0
afc.c: -146 (input[0].float_state_arr[0]+0.010000)<10.000000
afc.c: -148 ((unsigned char)input[0].float_state_arr[5])=0
afc.c: +151 ((unsigned char)input[0].float_state_arr[4])<>0
afc.c: +158 input[0].x_arr[8]>=50.000000
afc.c: +160 1<>0
afc.c: -162 0=0
afc.c: -182 1<>0
afc.c: +191 1<>0
afc.c: -205 ((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))/14.700000)=<1.660000
Path Prefix to cover :
afc.c
-140 +142 -146 -148 +151 +158 +160 -162 -182 +191 -205


TEST CASE 17

Dimensions:
input__controller = 1;
input__controller[0].input_arr = 1;
input__controller[0].int_state_arr = 0;
input__controller[0].float_state_arr = 7;
input__controller[0].x_arr = 13;
ret_val__controller = 1;
ret_val__controller[0].int_state_arr = 0;
ret_val__controller[0].float_state_arr = 7;
ret_val__controller[0].output_arr = 3;

Other input values:
input__controller[0].input_arr[0] = -423.000000;
input__controller[0].float_state_arr[0] = -371.000000;
input__controller[0].float_state_arr[1] = -78.000000;
input__controller[0].float_state_arr[2] = 89.000000;
input__controller[0].float_state_arr[3] = 272.000000;
input__controller[0].float_state_arr[4] = -193.000000;
input__controller[0].float_state_arr[5] = 0.400000;
input__controller[0].float_state_arr[6] = -73.000000;
input__controller[0].x_arr[0] = -493.000000;
input__controller[0].x_arr[1] = 170.000000;
input__controller[0].x_arr[2] = -8.000000;
input__controller[0].x_arr[3] = -463.000000;
input__controller[0].x_arr[4] = -387.000000;
input__controller[0].x_arr[5] = -245.000000;
input__controller[0].x_arr[6] = 150.000000;
input__controller[0].x_arr[7] = 0.000000;
input__controller[0].x_arr[8] = 161.000000;
input__controller[0].x_arr[9] = -0.366000;
input__controller[0].x_arr[10] = 417.000000;
input__controller[0].x_arr[11] = 173.000000;
input__controller[0].x_arr[12] = -343.000000;
ret_val__controller[0].float_state_arr[0] = 397.000000;
ret_val__controller[0].float_state_arr[1] = -241.000000;
ret_val__controller[0].float_state_arr[2] = -268.000000;
ret_val__controller[0].float_state_arr[3] = -365.000000;
ret_val__controller[0].float_state_arr[4] = -94.000000;
ret_val__controller[0].float_state_arr[5] = -68.000000;
ret_val__controller[0].float_state_arr[6] = -139.000000;
ret_val__controller[0].output_arr[0] = 438.000000;
ret_val__controller[0].output_arr[1] = -491.000000;
ret_val__controller[0].output_arr[2] = -16.000000;

Result:
unknown

Path Covered :
afc.c
-140 +142 -146 -148 +151 +158 +160 -162 -182 +191 -205 +207


Path Predicate for case 17:
afc.c: -140 input[0].x_arr[10]>-1.000000
afc.c: +142 ((unsigned char)input[0].float_state_arr[3])<>0
afc.c: -146 (input[0].float_state_arr[0]+0.010000)<10.000000
afc.c: -148 ((unsigned char)input[0].float_state_arr[5])=0
afc.c: +151 ((unsigned char)input[0].float_state_arr[4])<>0
afc.c: +158 input[0].x_arr[8]>=50.000000
afc.c: +160 1<>0
afc.c: -162 0=0
afc.c: -182 1<>0
afc.c: +191 1<>0
afc.c: -205 ((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))/14.700000)=<1.660000
afc.c: +207 ((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))/14.700000)<0.130000

Simplified Path Predicate for case 17:
input[0].x_arr[10]>-1.000000 AND
((unsigned char)input[0].float_state_arr[3])<>0 AND
(input[0].float_state_arr[0]+0.010000)<10.000000 AND
((unsigned char)input[0].float_state_arr[5])=0 AND
((unsigned char)input[0].float_state_arr[4])<>0 AND
input[0].x_arr[8]>=50.000000 AND
((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))/14.700000)=<1.660000 AND
((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))/14.700000)<0.130000

Output Values for case 17: (Symbolic,Concrete)
return value = 0, 0
ret_val[0].float_state_arr[0] = (input[0].float_state_arr[0]+0.010000), -370.990000
ret_val[0].float_state_arr[1] = input[0].float_state_arr[1], -78.000000
ret_val[0].float_state_arr[2] = (input[0].float_state_arr[2]+(((input[0].x_arr[9]+-((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))))*0.413280)*0.010000)), 89.000000
ret_val[0].float_state_arr[3] = 1.000000, 1.000000
ret_val[0].float_state_arr[4] = 1.000000, 1.000000
ret_val[0].float_state_arr[5] = 0.000000, 0.000000
ret_val[0].float_state_arr[6] = input[0].float_state_arr[6], -73.000000
ret_val[0].output_arr[0] = 0.130000, 0.130000
ret_val[0].output_arr[1] = 1.000000, 1.000000
ret_val[0].output_arr[2] = 14.700000, 14.700000

to explore negation deepest unexplored condition of predicate,
Path Predicate Prefix to solve :
afc.c: -140 input[0].x_arr[10]>-1.000000
afc.c: +142 ((unsigned char)input[0].float_state_arr[3])<>0
afc.c: -146 (input[0].float_state_arr[0]+0.010000)<10.000000
afc.c: -148 ((unsigned char)input[0].float_state_arr[5])=0
afc.c: +151 ((unsigned char)input[0].float_state_arr[4])<>0
afc.c: +158 input[0].x_arr[8]>=50.000000
afc.c: +160 1<>0
afc.c: -162 0=0
afc.c: -182 1<>0
afc.c: +191 1<>0
afc.c: -205 ((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))/14.700000)=<1.660000
afc.c: -207 ((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))/14.700000)>=0.130000
Path Prefix to cover :
afc.c
-140 +142 -146 -148 +151 +158 +160 -162 -182 +191 -205 -207


TEST CASE 18

Dimensions:
input__controller = 1;
input__controller[0].input_arr = 1;
input__controller[0].int_state_arr = 0;
input__controller[0].float_state_arr = 7;
input__controller[0].x_arr = 13;
ret_val__controller = 1;
ret_val__controller[0].int_state_arr = 0;
ret_val__controller[0].float_state_arr = 7;
ret_val__controller[0].output_arr = 3;

Other input values:
input__controller[0].input_arr[0] = -423.000000;
input__controller[0].float_state_arr[0] = -371.000000;
input__controller[0].float_state_arr[1] = -78.000000;
input__controller[0].float_state_arr[2] = -68.000000;
input__controller[0].float_state_arr[3] = 272.000000;
input__controller[0].float_state_arr[4] = -193.000000;
input__controller[0].float_state_arr[5] = 0.400000;
input__controller[0].float_state_arr[6] = -73.000000;
input__controller[0].x_arr[0] = -493.000000;
input__controller[0].x_arr[1] = 170.000000;
input__controller[0].x_arr[2] = -8.000000;
input__controller[0].x_arr[3] = -463.000000;
input__controller[0].x_arr[4] = -387.000000;
input__controller[0].x_arr[5] = -245.000000;
input__controller[0].x_arr[6] = 150.000000;
input__controller[0].x_arr[7] = -0.138118;
input__controller[0].x_arr[8] = 161.000000;
input__controller[0].x_arr[9] = 22.000000;
input__controller[0].x_arr[10] = 417.000000;
input__controller[0].x_arr[11] = 173.000000;
input__controller[0].x_arr[12] = -343.000000;
ret_val__controller[0].float_state_arr[0] = 397.000000;
ret_val__controller[0].float_state_arr[1] = -241.000000;
ret_val__controller[0].float_state_arr[2] = -268.000000;
ret_val__controller[0].float_state_arr[3] = -365.000000;
ret_val__controller[0].float_state_arr[4] = -94.000000;
ret_val__controller[0].float_state_arr[5] = -68.000000;
ret_val__controller[0].float_state_arr[6] = -139.000000;
ret_val__controller[0].output_arr[0] = 438.000000;
ret_val__controller[0].output_arr[1] = -491.000000;
ret_val__controller[0].output_arr[2] = -16.000000;

Result:
unknown

Path Covered :
afc.c
-140 +142 -146 -148 +151 +158 +160 -162 -182 +191 -205 -207


Path Predicate for case 18:
afc.c: -140 input[0].x_arr[10]>-1.000000
afc.c: +142 ((unsigned char)input[0].float_state_arr[3])<>0
afc.c: -146 (input[0].float_state_arr[0]+0.010000)<10.000000
afc.c: -148 ((unsigned char)input[0].float_state_arr[5])=0
afc.c: +151 ((unsigned char)input[0].float_state_arr[4])<>0
afc.c: +158 input[0].x_arr[8]>=50.000000
afc.c: +160 1<>0
afc.c: -162 0=0
afc.c: -182 1<>0
afc.c: +191 1<>0
afc.c: -205 ((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))/14.700000)=<1.660000
afc.c: -207 ((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))/14.700000)>=0.130000

Simplified Path Predicate for case 18:
input[0].x_arr[10]>-1.000000 AND
((unsigned char)input[0].float_state_arr[3])<>0 AND
(input[0].float_state_arr[0]+0.010000)<10.000000 AND
((unsigned char)input[0].float_state_arr[5])=0 AND
((unsigned char)input[0].float_state_arr[4])<>0 AND
input[0].x_arr[8]>=50.000000 AND
((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))/14.700000)=<1.660000 AND
((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))/14.700000)>=0.130000

Output Values for case 18: (Symbolic,Concrete)
return value = 0, 0
ret_val[0].float_state_arr[0] = (input[0].float_state_arr[0]+0.010000), -370.990000
ret_val[0].float_state_arr[1] = input[0].float_state_arr[1], -78.000000
ret_val[0].float_state_arr[2] = (input[0].float_state_arr[2]+(((input[0].x_arr[9]+-((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))))*0.413280)*0.010000)), -68.000000
ret_val[0].float_state_arr[3] = 1.000000, 1.000000
ret_val[0].float_state_arr[4] = 1.000000, 1.000000
ret_val[0].float_state_arr[5] = 0.000000, 0.000000
ret_val[0].float_state_arr[6] = input[0].float_state_arr[6], -73.000000
ret_val[0].output_arr[0] = ((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))/14.700000), 1.496599
ret_val[0].output_arr[1] = 1.000000, 1.000000
ret_val[0].output_arr[2] = 14.700000, 14.700000

to explore negation deepest unexplored condition of predicate,
Path Predicate Prefix to solve :
afc.c: -140 input[0].x_arr[10]>-1.000000
afc.c: +142 ((unsigned char)input[0].float_state_arr[3])<>0
afc.c: -146 (input[0].float_state_arr[0]+0.010000)<10.000000
afc.c: -148 ((unsigned char)input[0].float_state_arr[5])=0
afc.c: +151 ((unsigned char)input[0].float_state_arr[4])<>0
afc.c: +158 input[0].x_arr[8]>=50.000000
afc.c: +160 1<>0
afc.c: -162 0=0
afc.c: -182 1<>0
afc.c: -191 1=0
Path Prefix to cover :
afc.c
-140 +142 -146 -148 +151 +158 +160 -162 -182 -191
trivially infeasible

to explore negation deepest unexplored condition of predicate,
Path Predicate Prefix to solve :
afc.c: -140 input[0].x_arr[10]>-1.000000
afc.c: +142 ((unsigned char)input[0].float_state_arr[3])<>0
afc.c: -146 (input[0].float_state_arr[0]+0.010000)<10.000000
afc.c: -148 ((unsigned char)input[0].float_state_arr[5])=0
afc.c: +151 ((unsigned char)input[0].float_state_arr[4])<>0
afc.c: +158 input[0].x_arr[8]>=50.000000
afc.c: +160 1<>0
afc.c: -162 0=0
afc.c: +182 1=0
Path Prefix to cover :
afc.c
-140 +142 -146 -148 +151 +158 +160 -162 +182
trivially infeasible

to explore negation deepest unexplored condition of predicate,
Path Predicate Prefix to solve :
afc.c: -140 input[0].x_arr[10]>-1.000000
afc.c: +142 ((unsigned char)input[0].float_state_arr[3])<>0
afc.c: -146 (input[0].float_state_arr[0]+0.010000)<10.000000
afc.c: -148 ((unsigned char)input[0].float_state_arr[5])=0
afc.c: +151 ((unsigned char)input[0].float_state_arr[4])<>0
afc.c: +158 input[0].x_arr[8]>=50.000000
afc.c: +160 1<>0
afc.c: +162 0<>0
Path Prefix to cover :
afc.c
-140 +142 -146 -148 +151 +158 +160 +162
trivially infeasible

to explore negation deepest unexplored condition of predicate,
Path Predicate Prefix to solve :
afc.c: -140 input[0].x_arr[10]>-1.000000
afc.c: +142 ((unsigned char)input[0].float_state_arr[3])<>0
afc.c: -146 (input[0].float_state_arr[0]+0.010000)<10.000000
afc.c: -148 ((unsigned char)input[0].float_state_arr[5])=0
afc.c: +151 ((unsigned char)input[0].float_state_arr[4])<>0
afc.c: +158 input[0].x_arr[8]>=50.000000
afc.c: -160 1=0
Path Prefix to cover :
afc.c
-140 +142 -146 -148 +151 +158 -160
trivially infeasible

to explore negation deepest unexplored condition of predicate,
Path Predicate Prefix to solve :
afc.c: -140 input[0].x_arr[10]>-1.000000
afc.c: +142 ((unsigned char)input[0].float_state_arr[3])<>0
afc.c: -146 (input[0].float_state_arr[0]+0.010000)<10.000000
afc.c: -148 ((unsigned char)input[0].float_state_arr[5])=0
afc.c: -151 ((unsigned char)input[0].float_state_arr[4])=0
Path Prefix to cover :
afc.c
-140 +142 -146 -148 -151


TEST CASE 19

Dimensions:
input__controller = 1;
input__controller[0].input_arr = 1;
input__controller[0].int_state_arr = 0;
input__controller[0].float_state_arr = 7;
input__controller[0].x_arr = 13;
ret_val__controller = 1;
ret_val__controller[0].int_state_arr = 0;
ret_val__controller[0].float_state_arr = 7;
ret_val__controller[0].output_arr = 3;

Other input values:
input__controller[0].input_arr[0] = -423.000000;
input__controller[0].float_state_arr[0] = -371.000000;
input__controller[0].float_state_arr[1] = -78.000000;
input__controller[0].float_state_arr[2] = -292.000000;
input__controller[0].float_state_arr[3] = 272.000000;
input__controller[0].float_state_arr[4] = -0.800000;
input__controller[0].float_state_arr[5] = 0.400000;
input__controller[0].float_state_arr[6] = -73.000000;
input__controller[0].x_arr[0] = -493.000000;
input__controller[0].x_arr[1] = 170.000000;
input__controller[0].x_arr[2] = -8.000000;
input__controller[0].x_arr[3] = -463.000000;
input__controller[0].x_arr[4] = -387.000000;
input__controller[0].x_arr[5] = -245.000000;
input__controller[0].x_arr[6] = 150.000000;
input__controller[0].x_arr[7] = -475.000000;
input__controller[0].x_arr[8] = -478.000000;
input__controller[0].x_arr[9] = -156.000000;
input__controller[0].x_arr[10] = 417.000000;
input__controller[0].x_arr[11] = 173.000000;
input__controller[0].x_arr[12] = -343.000000;
ret_val__controller[0].float_state_arr[0] = 397.000000;
ret_val__controller[0].float_state_arr[1] = -241.000000;
ret_val__controller[0].float_state_arr[2] = -268.000000;
ret_val__controller[0].float_state_arr[3] = -365.000000;
ret_val__controller[0].float_state_arr[4] = -94.000000;
ret_val__controller[0].float_state_arr[5] = -68.000000;
ret_val__controller[0].float_state_arr[6] = -139.000000;
ret_val__controller[0].output_arr[0] = 438.000000;
ret_val__controller[0].output_arr[1] = -491.000000;
ret_val__controller[0].output_arr[2] = -16.000000;

Result:
unknown

Path Covered :
afc.c
-140 +142 -146 -148 -151 -158 +160 -162 -182 +191 +205


Path Predicate for case 19:
afc.c: -140 input[0].x_arr[10]>-1.000000
afc.c: +142 ((unsigned char)input[0].float_state_arr[3])<>0
afc.c: -146 (input[0].float_state_arr[0]+0.010000)<10.000000
afc.c: -148 ((unsigned char)input[0].float_state_arr[5])=0
afc.c: -151 ((unsigned char)input[0].float_state_arr[4])=0
afc.c: -158 input[0].x_arr[8]<70.000000
afc.c: +160 1<>0
afc.c: -162 0=0
afc.c: -182 1<>0
afc.c: +191 1<>0
afc.c: +205 ((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))/14.700000)>1.660000

Simplified Path Predicate for case 19:
input[0].x_arr[10]>-1.000000 AND
((unsigned char)input[0].float_state_arr[3])<>0 AND
(input[0].float_state_arr[0]+0.010000)<10.000000 AND
((unsigned char)input[0].float_state_arr[5])=0 AND
((unsigned char)input[0].float_state_arr[4])=0 AND
input[0].x_arr[8]<70.000000 AND
((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))/14.700000)>1.660000

Output Values for case 19: (Symbolic,Concrete)
return value = 0, 0
ret_val[0].float_state_arr[0] = (input[0].float_state_arr[0]+0.010000), -370.990000
ret_val[0].float_state_arr[1] = input[0].float_state_arr[1], -78.000000
ret_val[0].float_state_arr[2] = (input[0].float_state_arr[2]+(((input[0].x_arr[9]+-((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))))*0.413280)*0.010000)), -5957.592441
ret_val[0].float_state_arr[3] = 1.000000, 1.000000
ret_val[0].float_state_arr[4] = 0.000000, 0.000000
ret_val[0].float_state_arr[5] = 0.000000, 0.000000
ret_val[0].float_state_arr[6] = input[0].float_state_arr[6], -73.000000
ret_val[0].output_arr[0] = 1.660000, 1.660000
ret_val[0].output_arr[1] = 1.000000, 1.000000
ret_val[0].output_arr[2] = 14.700000, 14.700000

to explore negation deepest unexplored condition of predicate,
Path Predicate Prefix to solve :
afc.c: -140 input[0].x_arr[10]>-1.000000
afc.c: +142 ((unsigned char)input[0].float_state_arr[3])<>0
afc.c: -146 (input[0].float_state_arr[0]+0.010000)<10.000000
afc.c: -148 ((unsigned char)input[0].float_state_arr[5])=0
afc.c: -151 ((unsigned char)input[0].float_state_arr[4])=0
afc.c: -158 input[0].x_arr[8]<70.000000
afc.c: +160 1<>0
afc.c: -162 0=0
afc.c: -182 1<>0
afc.c: +191 1<>0
afc.c: -205 ((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))/14.700000)=<1.660000
Path Prefix to cover :
afc.c
-140 +142 -146 -148 -151 -158 +160 -162 -182 +191 -205


TEST CASE 20

Dimensions:
input__controller = 1;
input__controller[0].input_arr = 1;
input__controller[0].int_state_arr = 0;
input__controller[0].float_state_arr = 7;
input__controller[0].x_arr = 13;
ret_val__controller = 1;
ret_val__controller[0].int_state_arr = 0;
ret_val__controller[0].float_state_arr = 7;
ret_val__controller[0].output_arr = 3;

Other input values:
input__controller[0].input_arr[0] = -423.000000;
input__controller[0].float_state_arr[0] = -371.000000;
input__controller[0].float_state_arr[1] = -78.000000;
input__controller[0].float_state_arr[2] = -183.000000;
input__controller[0].float_state_arr[3] = 272.000000;
input__controller[0].float_state_arr[4] = -0.800000;
input__controller[0].float_state_arr[5] = 0.400000;
input__controller[0].float_state_arr[6] = -73.000000;
input__controller[0].x_arr[0] = -493.000000;
input__controller[0].x_arr[1] = 170.000000;
input__controller[0].x_arr[2] = -8.000000;
input__controller[0].x_arr[3] = -463.000000;
input__controller[0].x_arr[4] = -387.000000;
input__controller[0].x_arr[5] = -245.000000;
input__controller[0].x_arr[6] = 150.000000;
input__controller[0].x_arr[7] = 0.000000;
input__controller[0].x_arr[8] = -478.000000;
input__controller[0].x_arr[9] = -0.366000;
input__controller[0].x_arr[10] = 417.000000;
input__controller[0].x_arr[11] = 173.000000;
input__controller[0].x_arr[12] = -343.000000;
ret_val__controller[0].float_state_arr[0] = 397.000000;
ret_val__controller[0].float_state_arr[1] = -241.000000;
ret_val__controller[0].float_state_arr[2] = -268.000000;
ret_val__controller[0].float_state_arr[3] = -365.000000;
ret_val__controller[0].float_state_arr[4] = -94.000000;
ret_val__controller[0].float_state_arr[5] = -68.000000;
ret_val__controller[0].float_state_arr[6] = -139.000000;
ret_val__controller[0].output_arr[0] = 438.000000;
ret_val__controller[0].output_arr[1] = -491.000000;
ret_val__controller[0].output_arr[2] = -16.000000;

Result:
unknown

Path Covered :
afc.c
-140 +142 -146 -148 -151 -158 +160 -162 -182 +191 -205 +207


Path Predicate for case 20:
afc.c: -140 input[0].x_arr[10]>-1.000000
afc.c: +142 ((unsigned char)input[0].float_state_arr[3])<>0
afc.c: -146 (input[0].float_state_arr[0]+0.010000)<10.000000
afc.c: -148 ((unsigned char)input[0].float_state_arr[5])=0
afc.c: -151 ((unsigned char)input[0].float_state_arr[4])=0
afc.c: -158 input[0].x_arr[8]<70.000000
afc.c: +160 1<>0
afc.c: -162 0=0
afc.c: -182 1<>0
afc.c: +191 1<>0
afc.c: -205 ((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))/14.700000)=<1.660000
afc.c: +207 ((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))/14.700000)<0.130000

Simplified Path Predicate for case 20:
input[0].x_arr[10]>-1.000000 AND
((unsigned char)input[0].float_state_arr[3])<>0 AND
(input[0].float_state_arr[0]+0.010000)<10.000000 AND
((unsigned char)input[0].float_state_arr[5])=0 AND
((unsigned char)input[0].float_state_arr[4])=0 AND
input[0].x_arr[8]<70.000000 AND
((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))/14.700000)=<1.660000 AND
((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))/14.700000)<0.130000

Output Values for case 20: (Symbolic,Concrete)
return value = 0, 0
ret_val[0].float_state_arr[0] = (input[0].float_state_arr[0]+0.010000), -370.990000
ret_val[0].float_state_arr[1] = input[0].float_state_arr[1], -78.000000
ret_val[0].float_state_arr[2] = (input[0].float_state_arr[2]+(((input[0].x_arr[9]+-((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))))*0.413280)*0.010000)), -183.000000
ret_val[0].float_state_arr[3] = 1.000000, 1.000000
ret_val[0].float_state_arr[4] = 0.000000, 0.000000
ret_val[0].float_state_arr[5] = 0.000000, 0.000000
ret_val[0].float_state_arr[6] = input[0].float_state_arr[6], -73.000000
ret_val[0].output_arr[0] = 0.130000, 0.130000
ret_val[0].output_arr[1] = 1.000000, 1.000000
ret_val[0].output_arr[2] = 14.700000, 14.700000

to explore negation deepest unexplored condition of predicate,
Path Predicate Prefix to solve :
afc.c: -140 input[0].x_arr[10]>-1.000000
afc.c: +142 ((unsigned char)input[0].float_state_arr[3])<>0
afc.c: -146 (input[0].float_state_arr[0]+0.010000)<10.000000
afc.c: -148 ((unsigned char)input[0].float_state_arr[5])=0
afc.c: -151 ((unsigned char)input[0].float_state_arr[4])=0
afc.c: -158 input[0].x_arr[8]<70.000000
afc.c: +160 1<>0
afc.c: -162 0=0
afc.c: -182 1<>0
afc.c: +191 1<>0
afc.c: -205 ((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))/14.700000)=<1.660000
afc.c: -207 ((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))/14.700000)>=0.130000
Path Prefix to cover :
afc.c
-140 +142 -146 -148 -151 -158 +160 -162 -182 +191 -205 -207


TEST CASE 21

Dimensions:
input__controller = 1;
input__controller[0].input_arr = 1;
input__controller[0].int_state_arr = 0;
input__controller[0].float_state_arr = 7;
input__controller[0].x_arr = 13;
ret_val__controller = 1;
ret_val__controller[0].int_state_arr = 0;
ret_val__controller[0].float_state_arr = 7;
ret_val__controller[0].output_arr = 3;

Other input values:
input__controller[0].input_arr[0] = -423.000000;
input__controller[0].float_state_arr[0] = -371.000000;
input__controller[0].float_state_arr[1] = -78.000000;
input__controller[0].float_state_arr[2] = 34.000000;
input__controller[0].float_state_arr[3] = 272.000000;
input__controller[0].float_state_arr[4] = -0.800000;
input__controller[0].float_state_arr[5] = 0.400000;
input__controller[0].float_state_arr[6] = -73.000000;
input__controller[0].x_arr[0] = -493.000000;
input__controller[0].x_arr[1] = 170.000000;
input__controller[0].x_arr[2] = -8.000000;
input__controller[0].x_arr[3] = -463.000000;
input__controller[0].x_arr[4] = -387.000000;
input__controller[0].x_arr[5] = -245.000000;
input__controller[0].x_arr[6] = 150.000000;
input__controller[0].x_arr[7] = 10560.750745;
input__controller[0].x_arr[8] = -478.000000;
input__controller[0].x_arr[9] = 23.000000;
input__controller[0].x_arr[10] = 417.000000;
input__controller[0].x_arr[11] = 173.000000;
input__controller[0].x_arr[12] = -343.000000;
ret_val__controller[0].float_state_arr[0] = 397.000000;
ret_val__controller[0].float_state_arr[1] = -241.000000;
ret_val__controller[0].float_state_arr[2] = -268.000000;
ret_val__controller[0].float_state_arr[3] = -365.000000;
ret_val__controller[0].float_state_arr[4] = -94.000000;
ret_val__controller[0].float_state_arr[5] = -68.000000;
ret_val__controller[0].float_state_arr[6] = -139.000000;
ret_val__controller[0].output_arr[0] = 438.000000;
ret_val__controller[0].output_arr[1] = -491.000000;
ret_val__controller[0].output_arr[2] = -16.000000;

Result:
unknown

Path Covered :
afc.c
-140 +142 -146 -148 -151 -158 +160 -162 -182 +191 -205 -207


Path Predicate for case 21:
afc.c: -140 input[0].x_arr[10]>-1.000000
afc.c: +142 ((unsigned char)input[0].float_state_arr[3])<>0
afc.c: -146 (input[0].float_state_arr[0]+0.010000)<10.000000
afc.c: -148 ((unsigned char)input[0].float_state_arr[5])=0
afc.c: -151 ((unsigned char)input[0].float_state_arr[4])=0
afc.c: -158 input[0].x_arr[8]<70.000000
afc.c: +160 1<>0
afc.c: -162 0=0
afc.c: -182 1<>0
afc.c: +191 1<>0
afc.c: -205 ((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))/14.700000)=<1.660000
afc.c: -207 ((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))/14.700000)>=0.130000

Simplified Path Predicate for case 21:
input[0].x_arr[10]>-1.000000 AND
((unsigned char)input[0].float_state_arr[3])<>0 AND
(input[0].float_state_arr[0]+0.010000)<10.000000 AND
((unsigned char)input[0].float_state_arr[5])=0 AND
((unsigned char)input[0].float_state_arr[4])=0 AND
input[0].x_arr[8]<70.000000 AND
((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))/14.700000)=<1.660000 AND
((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))/14.700000)>=0.130000

Output Values for case 21: (Symbolic,Concrete)
return value = 0, 0
ret_val[0].float_state_arr[0] = (input[0].float_state_arr[0]+0.010000), -370.990000
ret_val[0].float_state_arr[1] = input[0].float_state_arr[1], -78.000000
ret_val[0].float_state_arr[2] = (input[0].float_state_arr[2]+(((input[0].x_arr[9]+-((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))))*0.413280)*0.010000)), 34.000000
ret_val[0].float_state_arr[3] = 1.000000, 1.000000
ret_val[0].float_state_arr[4] = 0.000000, 0.000000
ret_val[0].float_state_arr[5] = 0.000000, 0.000000
ret_val[0].float_state_arr[6] = input[0].float_state_arr[6], -73.000000
ret_val[0].output_arr[0] = ((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))/14.700000), 1.564626
ret_val[0].output_arr[1] = 1.000000, 1.000000
ret_val[0].output_arr[2] = 14.700000, 14.700000

to explore negation deepest unexplored condition of predicate,
Path Predicate Prefix to solve :
afc.c: -140 input[0].x_arr[10]>-1.000000
afc.c: +142 ((unsigned char)input[0].float_state_arr[3])<>0
afc.c: -146 (input[0].float_state_arr[0]+0.010000)<10.000000
afc.c: -148 ((unsigned char)input[0].float_state_arr[5])=0
afc.c: -151 ((unsigned char)input[0].float_state_arr[4])=0
afc.c: -158 input[0].x_arr[8]<70.000000
afc.c: +160 1<>0
afc.c: -162 0=0
afc.c: -182 1<>0
afc.c: -191 1=0
Path Prefix to cover :
afc.c
-140 +142 -146 -148 -151 -158 +160 -162 -182 -191
trivially infeasible

to explore negation deepest unexplored condition of predicate,
Path Predicate Prefix to solve :
afc.c: -140 input[0].x_arr[10]>-1.000000
afc.c: +142 ((unsigned char)input[0].float_state_arr[3])<>0
afc.c: -146 (input[0].float_state_arr[0]+0.010000)<10.000000
afc.c: -148 ((unsigned char)input[0].float_state_arr[5])=0
afc.c: -151 ((unsigned char)input[0].float_state_arr[4])=0
afc.c: -158 input[0].x_arr[8]<70.000000
afc.c: +160 1<>0
afc.c: -162 0=0
afc.c: +182 1=0
Path Prefix to cover :
afc.c
-140 +142 -146 -148 -151 -158 +160 -162 +182
trivially infeasible

to explore negation deepest unexplored condition of predicate,
Path Predicate Prefix to solve :
afc.c: -140 input[0].x_arr[10]>-1.000000
afc.c: +142 ((unsigned char)input[0].float_state_arr[3])<>0
afc.c: -146 (input[0].float_state_arr[0]+0.010000)<10.000000
afc.c: -148 ((unsigned char)input[0].float_state_arr[5])=0
afc.c: -151 ((unsigned char)input[0].float_state_arr[4])=0
afc.c: -158 input[0].x_arr[8]<70.000000
afc.c: +160 1<>0
afc.c: +162 0<>0
Path Prefix to cover :
afc.c
-140 +142 -146 -148 -151 -158 +160 +162
trivially infeasible

to explore negation deepest unexplored condition of predicate,
Path Predicate Prefix to solve :
afc.c: -140 input[0].x_arr[10]>-1.000000
afc.c: +142 ((unsigned char)input[0].float_state_arr[3])<>0
afc.c: -146 (input[0].float_state_arr[0]+0.010000)<10.000000
afc.c: -148 ((unsigned char)input[0].float_state_arr[5])=0
afc.c: -151 ((unsigned char)input[0].float_state_arr[4])=0
afc.c: -158 input[0].x_arr[8]<70.000000
afc.c: -160 1=0
Path Prefix to cover :
afc.c
-140 +142 -146 -148 -151 -158 -160
trivially infeasible

to explore negation deepest unexplored condition of predicate,
Path Predicate Prefix to solve :
afc.c: -140 input[0].x_arr[10]>-1.000000
afc.c: +142 ((unsigned char)input[0].float_state_arr[3])<>0
afc.c: -146 (input[0].float_state_arr[0]+0.010000)<10.000000
afc.c: -148 ((unsigned char)input[0].float_state_arr[5])=0
afc.c: -151 ((unsigned char)input[0].float_state_arr[4])=0
afc.c: +158 input[0].x_arr[8]>=70.000000
Path Prefix to cover :
afc.c
-140 +142 -146 -148 -151 +158


TEST CASE 22

Dimensions:
input__controller = 1;
input__controller[0].input_arr = 1;
input__controller[0].int_state_arr = 0;
input__controller[0].float_state_arr = 7;
input__controller[0].x_arr = 13;
ret_val__controller = 1;
ret_val__controller[0].int_state_arr = 0;
ret_val__controller[0].float_state_arr = 7;
ret_val__controller[0].output_arr = 3;

Other input values:
input__controller[0].input_arr[0] = -423.000000;
input__controller[0].float_state_arr[0] = -371.000000;
input__controller[0].float_state_arr[1] = -78.000000;
input__controller[0].float_state_arr[2] = -292.000000;
input__controller[0].float_state_arr[3] = 272.000000;
input__controller[0].float_state_arr[4] = -0.800000;
input__controller[0].float_state_arr[5] = 0.400000;
input__controller[0].float_state_arr[6] = -73.000000;
input__controller[0].x_arr[0] = -493.000000;
input__controller[0].x_arr[1] = 170.000000;
input__controller[0].x_arr[2] = -8.000000;
input__controller[0].x_arr[3] = -463.000000;
input__controller[0].x_arr[4] = -387.000000;
input__controller[0].x_arr[5] = -245.000000;
input__controller[0].x_arr[6] = 150.000000;
input__controller[0].x_arr[7] = -475.000000;
input__controller[0].x_arr[8] = 936.000000;
input__controller[0].x_arr[9] = -156.000000;
input__controller[0].x_arr[10] = 417.000000;
input__controller[0].x_arr[11] = 173.000000;
input__controller[0].x_arr[12] = -343.000000;
ret_val__controller[0].float_state_arr[0] = 397.000000;
ret_val__controller[0].float_state_arr[1] = -241.000000;
ret_val__controller[0].float_state_arr[2] = -268.000000;
ret_val__controller[0].float_state_arr[3] = -365.000000;
ret_val__controller[0].float_state_arr[4] = -94.000000;
ret_val__controller[0].float_state_arr[5] = -68.000000;
ret_val__controller[0].float_state_arr[6] = -139.000000;
ret_val__controller[0].output_arr[0] = 438.000000;
ret_val__controller[0].output_arr[1] = -491.000000;
ret_val__controller[0].output_arr[2] = -16.000000;

Result:
unknown

Path Covered :
afc.c
-140 +142 -146 -148 -151 +158 +160 -162 -182 +191 +205


Path Predicate for case 22:
afc.c: -140 input[0].x_arr[10]>-1.000000
afc.c: +142 ((unsigned char)input[0].float_state_arr[3])<>0
afc.c: -146 (input[0].float_state_arr[0]+0.010000)<10.000000
afc.c: -148 ((unsigned char)input[0].float_state_arr[5])=0
afc.c: -151 ((unsigned char)input[0].float_state_arr[4])=0
afc.c: +158 input[0].x_arr[8]>=70.000000
afc.c: +160 1<>0
afc.c: -162 0=0
afc.c: -182 1<>0
afc.c: +191 1<>0
afc.c: +205 ((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))/14.700000)>1.660000

Simplified Path Predicate for case 22:
input[0].x_arr[10]>-1.000000 AND
((unsigned char)input[0].float_state_arr[3])<>0 AND
(input[0].float_state_arr[0]+0.010000)<10.000000 AND
((unsigned char)input[0].float_state_arr[5])=0 AND
((unsigned char)input[0].float_state_arr[4])=0 AND
input[0].x_arr[8]>=70.000000 AND
((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))/14.700000)>1.660000

Output Values for case 22: (Symbolic,Concrete)
return value = 0, 0
ret_val[0].float_state_arr[0] = (input[0].float_state_arr[0]+0.010000), -370.990000
ret_val[0].float_state_arr[1] = input[0].float_state_arr[1], -78.000000
ret_val[0].float_state_arr[2] = (input[0].float_state_arr[2]+(((input[0].x_arr[9]+-((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))))*0.413280)*0.010000)), -5957.592441
ret_val[0].float_state_arr[3] = 1.000000, 1.000000
ret_val[0].float_state_arr[4] = 1.000000, 1.000000
ret_val[0].float_state_arr[5] = 0.000000, 0.000000
ret_val[0].float_state_arr[6] = input[0].float_state_arr[6], -73.000000
ret_val[0].output_arr[0] = 1.660000, 1.660000
ret_val[0].output_arr[1] = 1.000000, 1.000000
ret_val[0].output_arr[2] = 14.700000, 14.700000

to explore negation deepest unexplored condition of predicate,
Path Predicate Prefix to solve :
afc.c: -140 input[0].x_arr[10]>-1.000000
afc.c: +142 ((unsigned char)input[0].float_state_arr[3])<>0
afc.c: -146 (input[0].float_state_arr[0]+0.010000)<10.000000
afc.c: -148 ((unsigned char)input[0].float_state_arr[5])=0
afc.c: -151 ((unsigned char)input[0].float_state_arr[4])=0
afc.c: +158 input[0].x_arr[8]>=70.000000
afc.c: +160 1<>0
afc.c: -162 0=0
afc.c: -182 1<>0
afc.c: +191 1<>0
afc.c: -205 ((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))/14.700000)=<1.660000
Path Prefix to cover :
afc.c
-140 +142 -146 -148 -151 +158 +160 -162 -182 +191 -205


TEST CASE 23

Dimensions:
input__controller = 1;
input__controller[0].input_arr = 1;
input__controller[0].int_state_arr = 0;
input__controller[0].float_state_arr = 7;
input__controller[0].x_arr = 13;
ret_val__controller = 1;
ret_val__controller[0].int_state_arr = 0;
ret_val__controller[0].float_state_arr = 7;
ret_val__controller[0].output_arr = 3;

Other input values:
input__controller[0].input_arr[0] = -423.000000;
input__controller[0].float_state_arr[0] = -371.000000;
input__controller[0].float_state_arr[1] = -78.000000;
input__controller[0].float_state_arr[2] = -395.000000;
input__controller[0].float_state_arr[3] = 272.000000;
input__controller[0].float_state_arr[4] = -0.800000;
input__controller[0].float_state_arr[5] = 0.400000;
input__controller[0].float_state_arr[6] = -73.000000;
input__controller[0].x_arr[0] = -493.000000;
input__controller[0].x_arr[1] = 170.000000;
input__controller[0].x_arr[2] = -8.000000;
input__controller[0].x_arr[3] = -463.000000;
input__controller[0].x_arr[4] = -387.000000;
input__controller[0].x_arr[5] = -245.000000;
input__controller[0].x_arr[6] = 150.000000;
input__controller[0].x_arr[7] = 0.000000;
input__controller[0].x_arr[8] = 936.000000;
input__controller[0].x_arr[9] = -0.366000;
input__controller[0].x_arr[10] = 417.000000;
input__controller[0].x_arr[11] = 173.000000;
input__controller[0].x_arr[12] = -343.000000;
ret_val__controller[0].float_state_arr[0] = 397.000000;
ret_val__controller[0].float_state_arr[1] = -241.000000;
ret_val__controller[0].float_state_arr[2] = -268.000000;
ret_val__controller[0].float_state_arr[3] = -365.000000;
ret_val__controller[0].float_state_arr[4] = -94.000000;
ret_val__controller[0].float_state_arr[5] = -68.000000;
ret_val__controller[0].float_state_arr[6] = -139.000000;
ret_val__controller[0].output_arr[0] = 438.000000;
ret_val__controller[0].output_arr[1] = -491.000000;
ret_val__controller[0].output_arr[2] = -16.000000;

Result:
unknown

Path Covered :
afc.c
-140 +142 -146 -148 -151 +158 +160 -162 -182 +191 -205 +207


Path Predicate for case 23:
afc.c: -140 input[0].x_arr[10]>-1.000000
afc.c: +142 ((unsigned char)input[0].float_state_arr[3])<>0
afc.c: -146 (input[0].float_state_arr[0]+0.010000)<10.000000
afc.c: -148 ((unsigned char)input[0].float_state_arr[5])=0
afc.c: -151 ((unsigned char)input[0].float_state_arr[4])=0
afc.c: +158 input[0].x_arr[8]>=70.000000
afc.c: +160 1<>0
afc.c: -162 0=0
afc.c: -182 1<>0
afc.c: +191 1<>0
afc.c: -205 ((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))/14.700000)=<1.660000
afc.c: +207 ((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))/14.700000)<0.130000

Simplified Path Predicate for case 23:
input[0].x_arr[10]>-1.000000 AND
((unsigned char)input[0].float_state_arr[3])<>0 AND
(input[0].float_state_arr[0]+0.010000)<10.000000 AND
((unsigned char)input[0].float_state_arr[5])=0 AND
((unsigned char)input[0].float_state_arr[4])=0 AND
input[0].x_arr[8]>=70.000000 AND
((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))/14.700000)=<1.660000 AND
((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))/14.700000)<0.130000

Output Values for case 23: (Symbolic,Concrete)
return value = 0, 0
ret_val[0].float_state_arr[0] = (input[0].float_state_arr[0]+0.010000), -370.990000
ret_val[0].float_state_arr[1] = input[0].float_state_arr[1], -78.000000
ret_val[0].float_state_arr[2] = (input[0].float_state_arr[2]+(((input[0].x_arr[9]+-((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))))*0.413280)*0.010000)), -395.000000
ret_val[0].float_state_arr[3] = 1.000000, 1.000000
ret_val[0].float_state_arr[4] = 1.000000, 1.000000
ret_val[0].float_state_arr[5] = 0.000000, 0.000000
ret_val[0].float_state_arr[6] = input[0].float_state_arr[6], -73.000000
ret_val[0].output_arr[0] = 0.130000, 0.130000
ret_val[0].output_arr[1] = 1.000000, 1.000000
ret_val[0].output_arr[2] = 14.700000, 14.700000

to explore negation deepest unexplored condition of predicate,
Path Predicate Prefix to solve :
afc.c: -140 input[0].x_arr[10]>-1.000000
afc.c: +142 ((unsigned char)input[0].float_state_arr[3])<>0
afc.c: -146 (input[0].float_state_arr[0]+0.010000)<10.000000
afc.c: -148 ((unsigned char)input[0].float_state_arr[5])=0
afc.c: -151 ((unsigned char)input[0].float_state_arr[4])=0
afc.c: +158 input[0].x_arr[8]>=70.000000
afc.c: +160 1<>0
afc.c: -162 0=0
afc.c: -182 1<>0
afc.c: +191 1<>0
afc.c: -205 ((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))/14.700000)=<1.660000
afc.c: -207 ((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))/14.700000)>=0.130000
Path Prefix to cover :
afc.c
-140 +142 -146 -148 -151 +158 +160 -162 -182 +191 -205 -207


TEST CASE 24

Dimensions:
input__controller = 1;
input__controller[0].input_arr = 1;
input__controller[0].int_state_arr = 0;
input__controller[0].float_state_arr = 7;
input__controller[0].x_arr = 13;
ret_val__controller = 1;
ret_val__controller[0].int_state_arr = 0;
ret_val__controller[0].float_state_arr = 7;
ret_val__controller[0].output_arr = 3;

Other input values:
input__controller[0].input_arr[0] = -423.000000;
input__controller[0].float_state_arr[0] = -371.000000;
input__controller[0].float_state_arr[1] = -78.000000;
input__controller[0].float_state_arr[2] = 176.000000;
input__controller[0].float_state_arr[3] = 272.000000;
input__controller[0].float_state_arr[4] = -0.800000;
input__controller[0].float_state_arr[5] = 0.400000;
input__controller[0].float_state_arr[6] = -73.000000;
input__controller[0].x_arr[0] = -493.000000;
input__controller[0].x_arr[1] = 170.000000;
input__controller[0].x_arr[2] = -8.000000;
input__controller[0].x_arr[3] = -463.000000;
input__controller[0].x_arr[4] = -387.000000;
input__controller[0].x_arr[5] = -245.000000;
input__controller[0].x_arr[6] = 150.000000;
input__controller[0].x_arr[7] = -0.004247;
input__controller[0].x_arr[8] = 936.000000;
input__controller[0].x_arr[9] = 4.000000;
input__controller[0].x_arr[10] = 417.000000;
input__controller[0].x_arr[11] = 173.000000;
input__controller[0].x_arr[12] = -343.000000;
ret_val__controller[0].float_state_arr[0] = 397.000000;
ret_val__controller[0].float_state_arr[1] = -241.000000;
ret_val__controller[0].float_state_arr[2] = -268.000000;
ret_val__controller[0].float_state_arr[3] = -365.000000;
ret_val__controller[0].float_state_arr[4] = -94.000000;
ret_val__controller[0].float_state_arr[5] = -68.000000;
ret_val__controller[0].float_state_arr[6] = -139.000000;
ret_val__controller[0].output_arr[0] = 438.000000;
ret_val__controller[0].output_arr[1] = -491.000000;
ret_val__controller[0].output_arr[2] = -16.000000;

Result:
unknown

Path Covered :
afc.c
-140 +142 -146 -148 -151 +158 +160 -162 -182 +191 -205 -207


Path Predicate for case 24:
afc.c: -140 input[0].x_arr[10]>-1.000000
afc.c: +142 ((unsigned char)input[0].float_state_arr[3])<>0
afc.c: -146 (input[0].float_state_arr[0]+0.010000)<10.000000
afc.c: -148 ((unsigned char)input[0].float_state_arr[5])=0
afc.c: -151 ((unsigned char)input[0].float_state_arr[4])=0
afc.c: +158 input[0].x_arr[8]>=70.000000
afc.c: +160 1<>0
afc.c: -162 0=0
afc.c: -182 1<>0
afc.c: +191 1<>0
afc.c: -205 ((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))/14.700000)=<1.660000
afc.c: -207 ((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))/14.700000)>=0.130000

Simplified Path Predicate for case 24:
input[0].x_arr[10]>-1.000000 AND
((unsigned char)input[0].float_state_arr[3])<>0 AND
(input[0].float_state_arr[0]+0.010000)<10.000000 AND
((unsigned char)input[0].float_state_arr[5])=0 AND
((unsigned char)input[0].float_state_arr[4])=0 AND
input[0].x_arr[8]>=70.000000 AND
((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))/14.700000)=<1.660000 AND
((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))/14.700000)>=0.130000

Output Values for case 24: (Symbolic,Concrete)
return value = 0, 0
ret_val[0].float_state_arr[0] = (input[0].float_state_arr[0]+0.010000), -370.990000
ret_val[0].float_state_arr[1] = input[0].float_state_arr[1], -78.000000
ret_val[0].float_state_arr[2] = (input[0].float_state_arr[2]+(((input[0].x_arr[9]+-((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))))*0.413280)*0.010000)), 176.000000
ret_val[0].float_state_arr[3] = 1.000000, 1.000000
ret_val[0].float_state_arr[4] = 1.000000, 1.000000
ret_val[0].float_state_arr[5] = 0.000000, 0.000000
ret_val[0].float_state_arr[6] = input[0].float_state_arr[6], -73.000000
ret_val[0].output_arr[0] = ((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))/14.700000), 0.272109
ret_val[0].output_arr[1] = 1.000000, 1.000000
ret_val[0].output_arr[2] = 14.700000, 14.700000

to explore negation deepest unexplored condition of predicate,
Path Predicate Prefix to solve :
afc.c: -140 input[0].x_arr[10]>-1.000000
afc.c: +142 ((unsigned char)input[0].float_state_arr[3])<>0
afc.c: -146 (input[0].float_state_arr[0]+0.010000)<10.000000
afc.c: -148 ((unsigned char)input[0].float_state_arr[5])=0
afc.c: -151 ((unsigned char)input[0].float_state_arr[4])=0
afc.c: +158 input[0].x_arr[8]>=70.000000
afc.c: +160 1<>0
afc.c: -162 0=0
afc.c: -182 1<>0
afc.c: -191 1=0
Path Prefix to cover :
afc.c
-140 +142 -146 -148 -151 +158 +160 -162 -182 -191
trivially infeasible

to explore negation deepest unexplored condition of predicate,
Path Predicate Prefix to solve :
afc.c: -140 input[0].x_arr[10]>-1.000000
afc.c: +142 ((unsigned char)input[0].float_state_arr[3])<>0
afc.c: -146 (input[0].float_state_arr[0]+0.010000)<10.000000
afc.c: -148 ((unsigned char)input[0].float_state_arr[5])=0
afc.c: -151 ((unsigned char)input[0].float_state_arr[4])=0
afc.c: +158 input[0].x_arr[8]>=70.000000
afc.c: +160 1<>0
afc.c: -162 0=0
afc.c: +182 1=0
Path Prefix to cover :
afc.c
-140 +142 -146 -148 -151 +158 +160 -162 +182
trivially infeasible

to explore negation deepest unexplored condition of predicate,
Path Predicate Prefix to solve :
afc.c: -140 input[0].x_arr[10]>-1.000000
afc.c: +142 ((unsigned char)input[0].float_state_arr[3])<>0
afc.c: -146 (input[0].float_state_arr[0]+0.010000)<10.000000
afc.c: -148 ((unsigned char)input[0].float_state_arr[5])=0
afc.c: -151 ((unsigned char)input[0].float_state_arr[4])=0
afc.c: +158 input[0].x_arr[8]>=70.000000
afc.c: +160 1<>0
afc.c: +162 0<>0
Path Prefix to cover :
afc.c
-140 +142 -146 -148 -151 +158 +160 +162
trivially infeasible

to explore negation deepest unexplored condition of predicate,
Path Predicate Prefix to solve :
afc.c: -140 input[0].x_arr[10]>-1.000000
afc.c: +142 ((unsigned char)input[0].float_state_arr[3])<>0
afc.c: -146 (input[0].float_state_arr[0]+0.010000)<10.000000
afc.c: -148 ((unsigned char)input[0].float_state_arr[5])=0
afc.c: -151 ((unsigned char)input[0].float_state_arr[4])=0
afc.c: +158 input[0].x_arr[8]>=70.000000
afc.c: -160 1=0
Path Prefix to cover :
afc.c
-140 +142 -146 -148 -151 +158 -160
trivially infeasible

to explore negation deepest unexplored condition of predicate,
Path Predicate Prefix to solve :
afc.c: -140 input[0].x_arr[10]>-1.000000
afc.c: +142 ((unsigned char)input[0].float_state_arr[3])<>0
afc.c: +146 (input[0].float_state_arr[0]+0.010000)>=10.000000
Path Prefix to cover :
afc.c
-140 +142 +146


TEST CASE 25

Dimensions:
input__controller = 1;
input__controller[0].input_arr = 1;
input__controller[0].int_state_arr = 0;
input__controller[0].float_state_arr = 7;
input__controller[0].x_arr = 13;
ret_val__controller = 1;
ret_val__controller[0].int_state_arr = 0;
ret_val__controller[0].float_state_arr = 7;
ret_val__controller[0].output_arr = 3;

Other input values:
input__controller[0].input_arr[0] = -423.000000;
input__controller[0].float_state_arr[0] = 659.990000;
input__controller[0].float_state_arr[1] = -78.000000;
input__controller[0].float_state_arr[2] = -292.000000;
input__controller[0].float_state_arr[3] = 272.000000;
input__controller[0].float_state_arr[4] = -193.000000;
input__controller[0].float_state_arr[5] = -384.000000;
input__controller[0].float_state_arr[6] = -73.000000;
input__controller[0].x_arr[0] = -493.000000;
input__controller[0].x_arr[1] = 170.000000;
input__controller[0].x_arr[2] = -8.000000;
input__controller[0].x_arr[3] = -463.000000;
input__controller[0].x_arr[4] = -387.000000;
input__controller[0].x_arr[5] = -245.000000;
input__controller[0].x_arr[6] = 150.000000;
input__controller[0].x_arr[7] = -475.000000;
input__controller[0].x_arr[8] = -478.000000;
input__controller[0].x_arr[9] = -156.000000;
input__controller[0].x_arr[10] = 417.000000;
input__controller[0].x_arr[11] = 173.000000;
input__controller[0].x_arr[12] = -343.000000;
ret_val__controller[0].float_state_arr[0] = 397.000000;
ret_val__controller[0].float_state_arr[1] = -241.000000;
ret_val__controller[0].float_state_arr[2] = -268.000000;
ret_val__controller[0].float_state_arr[3] = -365.000000;
ret_val__controller[0].float_state_arr[4] = -94.000000;
ret_val__controller[0].float_state_arr[5] = -68.000000;
ret_val__controller[0].float_state_arr[6] = -139.000000;
ret_val__controller[0].output_arr[0] = 438.000000;
ret_val__controller[0].output_arr[1] = -491.000000;
ret_val__controller[0].output_arr[2] = -16.000000;

Result:
unknown

Path Covered :
afc.c
-140 +142 +146 +151 -158 +160 +162 -162b -182 +191 +205


Path Predicate for case 25:
afc.c: -140 input[0].x_arr[10]>-1.000000
afc.c: +142 ((unsigned char)input[0].float_state_arr[3])<>0
afc.c: +146 (input[0].float_state_arr[0]+0.010000)>=10.000000
afc.c: +151 ((unsigned char)input[0].float_state_arr[4])<>0
afc.c: -158 input[0].x_arr[8]<50.000000
afc.c: +160 1<>0
afc.c: +162 1<>0
afc.c: -162b 0=0
afc.c: -182 1<>0
afc.c: +191 1<>0
afc.c: +205 ((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))/14.700000)>1.660000

Simplified Path Predicate for case 25:
input[0].x_arr[10]>-1.000000 AND
((unsigned char)input[0].float_state_arr[3])<>0 AND
(input[0].float_state_arr[0]+0.010000)>=10.000000 AND
((unsigned char)input[0].float_state_arr[4])<>0 AND
input[0].x_arr[8]<50.000000 AND
((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))/14.700000)>1.660000

Output Values for case 25: (Symbolic,Concrete)
return value = 0, 0
ret_val[0].float_state_arr[0] = (input[0].float_state_arr[0]+0.010000), 660.000000
ret_val[0].float_state_arr[1] = input[0].float_state_arr[1], -78.000000
ret_val[0].float_state_arr[2] = (input[0].float_state_arr[2]+(((input[0].x_arr[9]+-((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))))*0.413280)*0.010000)), -5957.592441
ret_val[0].float_state_arr[3] = 1.000000, 1.000000
ret_val[0].float_state_arr[4] = 0.000000, 0.000000
ret_val[0].float_state_arr[5] = 1.000000, 1.000000
ret_val[0].float_state_arr[6] = input[0].float_state_arr[6], -73.000000
ret_val[0].output_arr[0] = 1.660000, 1.660000
ret_val[0].output_arr[1] = 1.000000, 1.000000
ret_val[0].output_arr[2] = 14.700000, 14.700000

to explore negation deepest unexplored condition of predicate,
Path Predicate Prefix to solve :
afc.c: -140 input[0].x_arr[10]>-1.000000
afc.c: +142 ((unsigned char)input[0].float_state_arr[3])<>0
afc.c: +146 (input[0].float_state_arr[0]+0.010000)>=10.000000
afc.c: +151 ((unsigned char)input[0].float_state_arr[4])<>0
afc.c: -158 input[0].x_arr[8]<50.000000
afc.c: +160 1<>0
afc.c: +162 1<>0
afc.c: -162b 0=0
afc.c: -182 1<>0
afc.c: +191 1<>0
afc.c: -205 ((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))/14.700000)=<1.660000
Path Prefix to cover :
afc.c
-140 +142 +146 +151 -158 +160 +162 -162b -182 +191 -205


TEST CASE 26

Dimensions:
input__controller = 1;
input__controller[0].input_arr = 1;
input__controller[0].int_state_arr = 0;
input__controller[0].float_state_arr = 7;
input__controller[0].x_arr = 13;
ret_val__controller = 1;
ret_val__controller[0].int_state_arr = 0;
ret_val__controller[0].float_state_arr = 7;
ret_val__controller[0].output_arr = 3;

Other input values:
input__controller[0].input_arr[0] = -423.000000;
input__controller[0].float_state_arr[0] = 659.990000;
input__controller[0].float_state_arr[1] = -78.000000;
input__controller[0].float_state_arr[2] = -395.000000;
input__controller[0].float_state_arr[3] = 272.000000;
input__controller[0].float_state_arr[4] = -193.000000;
input__controller[0].float_state_arr[5] = -384.000000;
input__controller[0].float_state_arr[6] = -73.000000;
input__controller[0].x_arr[0] = -493.000000;
input__controller[0].x_arr[1] = 170.000000;
input__controller[0].x_arr[2] = -8.000000;
input__controller[0].x_arr[3] = -463.000000;
input__controller[0].x_arr[4] = -387.000000;
input__controller[0].x_arr[5] = -245.000000;
input__controller[0].x_arr[6] = 150.000000;
input__controller[0].x_arr[7] = 0.000000;
input__controller[0].x_arr[8] = -478.000000;
input__controller[0].x_arr[9] = -0.366000;
input__controller[0].x_arr[10] = 417.000000;
input__controller[0].x_arr[11] = 173.000000;
input__controller[0].x_arr[12] = -343.000000;
ret_val__controller[0].float_state_arr[0] = 397.000000;
ret_val__controller[0].float_state_arr[1] = -241.000000;
ret_val__controller[0].float_state_arr[2] = -268.000000;
ret_val__controller[0].float_state_arr[3] = -365.000000;
ret_val__controller[0].float_state_arr[4] = -94.000000;
ret_val__controller[0].float_state_arr[5] = -68.000000;
ret_val__controller[0].float_state_arr[6] = -139.000000;
ret_val__controller[0].output_arr[0] = 438.000000;
ret_val__controller[0].output_arr[1] = -491.000000;
ret_val__controller[0].output_arr[2] = -16.000000;

Result:
unknown

Path Covered :
afc.c
-140 +142 +146 +151 -158 +160 +162 -162b -182 +191 -205 +207


Path Predicate for case 26:
afc.c: -140 input[0].x_arr[10]>-1.000000
afc.c: +142 ((unsigned char)input[0].float_state_arr[3])<>0
afc.c: +146 (input[0].float_state_arr[0]+0.010000)>=10.000000
afc.c: +151 ((unsigned char)input[0].float_state_arr[4])<>0
afc.c: -158 input[0].x_arr[8]<50.000000
afc.c: +160 1<>0
afc.c: +162 1<>0
afc.c: -162b 0=0
afc.c: -182 1<>0
afc.c: +191 1<>0
afc.c: -205 ((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))/14.700000)=<1.660000
afc.c: +207 ((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))/14.700000)<0.130000

Simplified Path Predicate for case 26:
input[0].x_arr[10]>-1.000000 AND
((unsigned char)input[0].float_state_arr[3])<>0 AND
(input[0].float_state_arr[0]+0.010000)>=10.000000 AND
((unsigned char)input[0].float_state_arr[4])<>0 AND
input[0].x_arr[8]<50.000000 AND
((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))/14.700000)=<1.660000 AND
((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))/14.700000)<0.130000

Output Values for case 26: (Symbolic,Concrete)
return value = 0, 0
ret_val[0].float_state_arr[0] = (input[0].float_state_arr[0]+0.010000), 660.000000
ret_val[0].float_state_arr[1] = input[0].float_state_arr[1], -78.000000
ret_val[0].float_state_arr[2] = (input[0].float_state_arr[2]+(((input[0].x_arr[9]+-((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))))*0.413280)*0.010000)), -395.000000
ret_val[0].float_state_arr[3] = 1.000000, 1.000000
ret_val[0].float_state_arr[4] = 0.000000, 0.000000
ret_val[0].float_state_arr[5] = 1.000000, 1.000000
ret_val[0].float_state_arr[6] = input[0].float_state_arr[6], -73.000000
ret_val[0].output_arr[0] = 0.130000, 0.130000
ret_val[0].output_arr[1] = 1.000000, 1.000000
ret_val[0].output_arr[2] = 14.700000, 14.700000

to explore negation deepest unexplored condition of predicate,
Path Predicate Prefix to solve :
afc.c: -140 input[0].x_arr[10]>-1.000000
afc.c: +142 ((unsigned char)input[0].float_state_arr[3])<>0
afc.c: +146 (input[0].float_state_arr[0]+0.010000)>=10.000000
afc.c: +151 ((unsigned char)input[0].float_state_arr[4])<>0
afc.c: -158 input[0].x_arr[8]<50.000000
afc.c: +160 1<>0
afc.c: +162 1<>0
afc.c: -162b 0=0
afc.c: -182 1<>0
afc.c: +191 1<>0
afc.c: -205 ((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))/14.700000)=<1.660000
afc.c: -207 ((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))/14.700000)>=0.130000
Path Prefix to cover :
afc.c
-140 +142 +146 +151 -158 +160 +162 -162b -182 +191 -205 -207


TEST CASE 27

Dimensions:
input__controller = 1;
input__controller[0].input_arr = 1;
input__controller[0].int_state_arr = 0;
input__controller[0].float_state_arr = 7;
input__controller[0].x_arr = 13;
ret_val__controller = 1;
ret_val__controller[0].int_state_arr = 0;
ret_val__controller[0].float_state_arr = 7;
ret_val__controller[0].output_arr = 3;

Other input values:
input__controller[0].input_arr[0] = -423.000000;
input__controller[0].float_state_arr[0] = 659.990000;
input__controller[0].float_state_arr[1] = -78.000000;
input__controller[0].float_state_arr[2] = 318.000000;
input__controller[0].float_state_arr[3] = 272.000000;
input__controller[0].float_state_arr[4] = -193.000000;
input__controller[0].float_state_arr[5] = -384.000000;
input__controller[0].float_state_arr[6] = -73.000000;
input__controller[0].x_arr[0] = -493.000000;
input__controller[0].x_arr[1] = 170.000000;
input__controller[0].x_arr[2] = -8.000000;
input__controller[0].x_arr[3] = -463.000000;
input__controller[0].x_arr[4] = -387.000000;
input__controller[0].x_arr[5] = -245.000000;
input__controller[0].x_arr[6] = 150.000000;
input__controller[0].x_arr[7] = -0.000996;
input__controller[0].x_arr[8] = -478.000000;
input__controller[0].x_arr[9] = 3.000000;
input__controller[0].x_arr[10] = 417.000000;
input__controller[0].x_arr[11] = 173.000000;
input__controller[0].x_arr[12] = -343.000000;
ret_val__controller[0].float_state_arr[0] = 397.000000;
ret_val__controller[0].float_state_arr[1] = -241.000000;
ret_val__controller[0].float_state_arr[2] = -268.000000;
ret_val__controller[0].float_state_arr[3] = -365.000000;
ret_val__controller[0].float_state_arr[4] = -94.000000;
ret_val__controller[0].float_state_arr[5] = -68.000000;
ret_val__controller[0].float_state_arr[6] = -139.000000;
ret_val__controller[0].output_arr[0] = 438.000000;
ret_val__controller[0].output_arr[1] = -491.000000;
ret_val__controller[0].output_arr[2] = -16.000000;

Result:
unknown

Path Covered :
afc.c
-140 +142 +146 +151 -158 +160 +162 -162b -182 +191 -205 -207


Path Predicate for case 27:
afc.c: -140 input[0].x_arr[10]>-1.000000
afc.c: +142 ((unsigned char)input[0].float_state_arr[3])<>0
afc.c: +146 (input[0].float_state_arr[0]+0.010000)>=10.000000
afc.c: +151 ((unsigned char)input[0].float_state_arr[4])<>0
afc.c: -158 input[0].x_arr[8]<50.000000
afc.c: +160 1<>0
afc.c: +162 1<>0
afc.c: -162b 0=0
afc.c: -182 1<>0
afc.c: +191 1<>0
afc.c: -205 ((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))/14.700000)=<1.660000
afc.c: -207 ((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))/14.700000)>=0.130000

Simplified Path Predicate for case 27:
input[0].x_arr[10]>-1.000000 AND
((unsigned char)input[0].float_state_arr[3])<>0 AND
(input[0].float_state_arr[0]+0.010000)>=10.000000 AND
((unsigned char)input[0].float_state_arr[4])<>0 AND
input[0].x_arr[8]<50.000000 AND
((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))/14.700000)=<1.660000 AND
((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))/14.700000)>=0.130000

Output Values for case 27: (Symbolic,Concrete)
return value = 0, 0
ret_val[0].float_state_arr[0] = (input[0].float_state_arr[0]+0.010000), 660.000000
ret_val[0].float_state_arr[1] = input[0].float_state_arr[1], -78.000000
ret_val[0].float_state_arr[2] = (input[0].float_state_arr[2]+(((input[0].x_arr[9]+-((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))))*0.413280)*0.010000)), 318.000000
ret_val[0].float_state_arr[3] = 1.000000, 1.000000
ret_val[0].float_state_arr[4] = 0.000000, 0.000000
ret_val[0].float_state_arr[5] = 1.000000, 1.000000
ret_val[0].float_state_arr[6] = input[0].float_state_arr[6], -73.000000
ret_val[0].output_arr[0] = ((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))/14.700000), 0.204082
ret_val[0].output_arr[1] = 1.000000, 1.000000
ret_val[0].output_arr[2] = 14.700000, 14.700000

to explore negation deepest unexplored condition of predicate,
Path Predicate Prefix to solve :
afc.c: -140 input[0].x_arr[10]>-1.000000
afc.c: +142 ((unsigned char)input[0].float_state_arr[3])<>0
afc.c: +146 (input[0].float_state_arr[0]+0.010000)>=10.000000
afc.c: +151 ((unsigned char)input[0].float_state_arr[4])<>0
afc.c: -158 input[0].x_arr[8]<50.000000
afc.c: +160 1<>0
afc.c: +162 1<>0
afc.c: -162b 0=0
afc.c: -182 1<>0
afc.c: -191 1=0
Path Prefix to cover :
afc.c
-140 +142 +146 +151 -158 +160 +162 -162b -182 -191
trivially infeasible

to explore negation deepest unexplored condition of predicate,
Path Predicate Prefix to solve :
afc.c: -140 input[0].x_arr[10]>-1.000000
afc.c: +142 ((unsigned char)input[0].float_state_arr[3])<>0
afc.c: +146 (input[0].float_state_arr[0]+0.010000)>=10.000000
afc.c: +151 ((unsigned char)input[0].float_state_arr[4])<>0
afc.c: -158 input[0].x_arr[8]<50.000000
afc.c: +160 1<>0
afc.c: +162 1<>0
afc.c: -162b 0=0
afc.c: +182 1=0
Path Prefix to cover :
afc.c
-140 +142 +146 +151 -158 +160 +162 -162b +182
trivially infeasible

to explore negation deepest unexplored condition of predicate,
Path Predicate Prefix to solve :
afc.c: -140 input[0].x_arr[10]>-1.000000
afc.c: +142 ((unsigned char)input[0].float_state_arr[3])<>0
afc.c: +146 (input[0].float_state_arr[0]+0.010000)>=10.000000
afc.c: +151 ((unsigned char)input[0].float_state_arr[4])<>0
afc.c: -158 input[0].x_arr[8]<50.000000
afc.c: +160 1<>0
afc.c: +162 1<>0
afc.c: +162b 0<>0
Path Prefix to cover :
afc.c
-140 +142 +146 +151 -158 +160 +162 +162b
trivially infeasible

to explore negation deepest unexplored condition of predicate,
Path Predicate Prefix to solve :
afc.c: -140 input[0].x_arr[10]>-1.000000
afc.c: +142 ((unsigned char)input[0].float_state_arr[3])<>0
afc.c: +146 (input[0].float_state_arr[0]+0.010000)>=10.000000
afc.c: +151 ((unsigned char)input[0].float_state_arr[4])<>0
afc.c: -158 input[0].x_arr[8]<50.000000
afc.c: +160 1<>0
afc.c: -162 1=0
Path Prefix to cover :
afc.c
-140 +142 +146 +151 -158 +160 -162
trivially infeasible

to explore negation deepest unexplored condition of predicate,
Path Predicate Prefix to solve :
afc.c: -140 input[0].x_arr[10]>-1.000000
afc.c: +142 ((unsigned char)input[0].float_state_arr[3])<>0
afc.c: +146 (input[0].float_state_arr[0]+0.010000)>=10.000000
afc.c: +151 ((unsigned char)input[0].float_state_arr[4])<>0
afc.c: -158 input[0].x_arr[8]<50.000000
afc.c: -160 1=0
Path Prefix to cover :
afc.c
-140 +142 +146 +151 -158 -160
trivially infeasible

to explore negation deepest unexplored condition of predicate,
Path Predicate Prefix to solve :
afc.c: -140 input[0].x_arr[10]>-1.000000
afc.c: +142 ((unsigned char)input[0].float_state_arr[3])<>0
afc.c: +146 (input[0].float_state_arr[0]+0.010000)>=10.000000
afc.c: +151 ((unsigned char)input[0].float_state_arr[4])<>0
afc.c: +158 input[0].x_arr[8]>=50.000000
Path Prefix to cover :
afc.c
-140 +142 +146 +151 +158


TEST CASE 28

Dimensions:
input__controller = 1;
input__controller[0].input_arr = 1;
input__controller[0].int_state_arr = 0;
input__controller[0].float_state_arr = 7;
input__controller[0].x_arr = 13;
ret_val__controller = 1;
ret_val__controller[0].int_state_arr = 0;
ret_val__controller[0].float_state_arr = 7;
ret_val__controller[0].output_arr = 3;

Other input values:
input__controller[0].input_arr[0] = -423.000000;
input__controller[0].float_state_arr[0] = 659.990000;
input__controller[0].float_state_arr[1] = -78.000000;
input__controller[0].float_state_arr[2] = -292.000000;
input__controller[0].float_state_arr[3] = 272.000000;
input__controller[0].float_state_arr[4] = -193.000000;
input__controller[0].float_state_arr[5] = -384.000000;
input__controller[0].float_state_arr[6] = -73.000000;
input__controller[0].x_arr[0] = -493.000000;
input__controller[0].x_arr[1] = 170.000000;
input__controller[0].x_arr[2] = -8.000000;
input__controller[0].x_arr[3] = -463.000000;
input__controller[0].x_arr[4] = -387.000000;
input__controller[0].x_arr[5] = -245.000000;
input__controller[0].x_arr[6] = 150.000000;
input__controller[0].x_arr[7] = -475.000000;
input__controller[0].x_arr[8] = 928.000000;
input__controller[0].x_arr[9] = -156.000000;
input__controller[0].x_arr[10] = 417.000000;
input__controller[0].x_arr[11] = 173.000000;
input__controller[0].x_arr[12] = -343.000000;
ret_val__controller[0].float_state_arr[0] = 397.000000;
ret_val__controller[0].float_state_arr[1] = -241.000000;
ret_val__controller[0].float_state_arr[2] = -268.000000;
ret_val__controller[0].float_state_arr[3] = -365.000000;
ret_val__controller[0].float_state_arr[4] = -94.000000;
ret_val__controller[0].float_state_arr[5] = -68.000000;
ret_val__controller[0].float_state_arr[6] = -139.000000;
ret_val__controller[0].output_arr[0] = 438.000000;
ret_val__controller[0].output_arr[1] = -491.000000;
ret_val__controller[0].output_arr[2] = -16.000000;

Result:
unknown

Path Covered :
afc.c
-140 +142 +146 +151 +158 +160 +162 +162b -182 +191 +205


Path Predicate for case 28:
afc.c: -140 input[0].x_arr[10]>-1.000000
afc.c: +142 ((unsigned char)input[0].float_state_arr[3])<>0
afc.c: +146 (input[0].float_state_arr[0]+0.010000)>=10.000000
afc.c: +151 ((unsigned char)input[0].float_state_arr[4])<>0
afc.c: +158 input[0].x_arr[8]>=50.000000
afc.c: +160 1<>0
afc.c: +162 1<>0
afc.c: +162b 1<>0
afc.c: -182 1<>0
afc.c: +191 1<>0
afc.c: +205 ((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))/12.500000)>1.660000

Simplified Path Predicate for case 28:
input[0].x_arr[10]>-1.000000 AND
((unsigned char)input[0].float_state_arr[3])<>0 AND
(input[0].float_state_arr[0]+0.010000)>=10.000000 AND
((unsigned char)input[0].float_state_arr[4])<>0 AND
input[0].x_arr[8]>=50.000000 AND
((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))/12.500000)>1.660000

Output Values for case 28: (Symbolic,Concrete)
return value = 0, 0
ret_val[0].float_state_arr[0] = (input[0].float_state_arr[0]+0.010000), 660.000000
ret_val[0].float_state_arr[1] = input[0].float_state_arr[1], -78.000000
ret_val[0].float_state_arr[2] = (input[0].float_state_arr[2]+(((input[0].x_arr[9]+-((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))))*0.413280)*0.010000)), -5957.592441
ret_val[0].float_state_arr[3] = 1.000000, 1.000000
ret_val[0].float_state_arr[4] = 1.000000, 1.000000
ret_val[0].float_state_arr[5] = 1.000000, 1.000000
ret_val[0].float_state_arr[6] = input[0].float_state_arr[6], -73.000000
ret_val[0].output_arr[0] = 1.660000, 1.660000
ret_val[0].output_arr[1] = 1.000000, 1.000000
ret_val[0].output_arr[2] = 12.500000, 12.500000

to explore negation deepest unexplored condition of predicate,
Path Predicate Prefix to solve :
afc.c: -140 input[0].x_arr[10]>-1.000000
afc.c: +142 ((unsigned char)input[0].float_state_arr[3])<>0
afc.c: +146 (input[0].float_state_arr[0]+0.010000)>=10.000000
afc.c: +151 ((unsigned char)input[0].float_state_arr[4])<>0
afc.c: +158 input[0].x_arr[8]>=50.000000
afc.c: +160 1<>0
afc.c: +162 1<>0
afc.c: +162b 1<>0
afc.c: -182 1<>0
afc.c: +191 1<>0
afc.c: -205 ((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))/12.500000)=<1.660000
Path Prefix to cover :
afc.c
-140 +142 +146 +151 +158 +160 +162 +162b -182 +191 -205


TEST CASE 29

Dimensions:
input__controller = 1;
input__controller[0].input_arr = 1;
input__controller[0].int_state_arr = 0;
input__controller[0].float_state_arr = 7;
input__controller[0].x_arr = 13;
ret_val__controller = 1;
ret_val__controller[0].int_state_arr = 0;
ret_val__controller[0].float_state_arr = 7;
ret_val__controller[0].output_arr = 3;

Other input values:
input__controller[0].input_arr[0] = -423.000000;
input__controller[0].float_state_arr[0] = 659.990000;
input__controller[0].float_state_arr[1] = -78.000000;
input__controller[0].float_state_arr[2] = -103.000000;
input__controller[0].float_state_arr[3] = 272.000000;
input__controller[0].float_state_arr[4] = -193.000000;
input__controller[0].float_state_arr[5] = -384.000000;
input__controller[0].float_state_arr[6] = -73.000000;
input__controller[0].x_arr[0] = -493.000000;
input__controller[0].x_arr[1] = 170.000000;
input__controller[0].x_arr[2] = -8.000000;
input__controller[0].x_arr[3] = -463.000000;
input__controller[0].x_arr[4] = -387.000000;
input__controller[0].x_arr[5] = -245.000000;
input__controller[0].x_arr[6] = 150.000000;
input__controller[0].x_arr[7] = 0.000000;
input__controller[0].x_arr[8] = 928.000000;
input__controller[0].x_arr[9] = -0.366000;
input__controller[0].x_arr[10] = 417.000000;
input__controller[0].x_arr[11] = 173.000000;
input__controller[0].x_arr[12] = -343.000000;
ret_val__controller[0].float_state_arr[0] = 397.000000;
ret_val__controller[0].float_state_arr[1] = -241.000000;
ret_val__controller[0].float_state_arr[2] = -268.000000;
ret_val__controller[0].float_state_arr[3] = -365.000000;
ret_val__controller[0].float_state_arr[4] = -94.000000;
ret_val__controller[0].float_state_arr[5] = -68.000000;
ret_val__controller[0].float_state_arr[6] = -139.000000;
ret_val__controller[0].output_arr[0] = 438.000000;
ret_val__controller[0].output_arr[1] = -491.000000;
ret_val__controller[0].output_arr[2] = -16.000000;

Result:
unknown

Path Covered :
afc.c
-140 +142 +146 +151 +158 +160 +162 +162b -182 +191 -205 +207


Path Predicate for case 29:
afc.c: -140 input[0].x_arr[10]>-1.000000
afc.c: +142 ((unsigned char)input[0].float_state_arr[3])<>0
afc.c: +146 (input[0].float_state_arr[0]+0.010000)>=10.000000
afc.c: +151 ((unsigned char)input[0].float_state_arr[4])<>0
afc.c: +158 input[0].x_arr[8]>=50.000000
afc.c: +160 1<>0
afc.c: +162 1<>0
afc.c: +162b 1<>0
afc.c: -182 1<>0
afc.c: +191 1<>0
afc.c: -205 ((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))/12.500000)=<1.660000
afc.c: +207 ((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))/12.500000)<0.130000

Simplified Path Predicate for case 29:
input[0].x_arr[10]>-1.000000 AND
((unsigned char)input[0].float_state_arr[3])<>0 AND
(input[0].float_state_arr[0]+0.010000)>=10.000000 AND
((unsigned char)input[0].float_state_arr[4])<>0 AND
input[0].x_arr[8]>=50.000000 AND
((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))/12.500000)=<1.660000 AND
((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))/12.500000)<0.130000

Output Values for case 29: (Symbolic,Concrete)
return value = 0, 0
ret_val[0].float_state_arr[0] = (input[0].float_state_arr[0]+0.010000), 660.000000
ret_val[0].float_state_arr[1] = input[0].float_state_arr[1], -78.000000
ret_val[0].float_state_arr[2] = (input[0].float_state_arr[2]+(((input[0].x_arr[9]+-((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))))*0.413280)*0.010000)), -103.000000
ret_val[0].float_state_arr[3] = 1.000000, 1.000000
ret_val[0].float_state_arr[4] = 1.000000, 1.000000
ret_val[0].float_state_arr[5] = 1.000000, 1.000000
ret_val[0].float_state_arr[6] = input[0].float_state_arr[6], -73.000000
ret_val[0].output_arr[0] = 0.130000, 0.130000
ret_val[0].output_arr[1] = 1.000000, 1.000000
ret_val[0].output_arr[2] = 12.500000, 12.500000

to explore negation deepest unexplored condition of predicate,
Path Predicate Prefix to solve :
afc.c: -140 input[0].x_arr[10]>-1.000000
afc.c: +142 ((unsigned char)input[0].float_state_arr[3])<>0
afc.c: +146 (input[0].float_state_arr[0]+0.010000)>=10.000000
afc.c: +151 ((unsigned char)input[0].float_state_arr[4])<>0
afc.c: +158 input[0].x_arr[8]>=50.000000
afc.c: +160 1<>0
afc.c: +162 1<>0
afc.c: +162b 1<>0
afc.c: -182 1<>0
afc.c: +191 1<>0
afc.c: -205 ((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))/12.500000)=<1.660000
afc.c: -207 ((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))/12.500000)>=0.130000
Path Prefix to cover :
afc.c
-140 +142 +146 +151 +158 +160 +162 +162b -182 +191 -205 -207


TEST CASE 30

Dimensions:
input__controller = 1;
input__controller[0].input_arr = 1;
input__controller[0].int_state_arr = 0;
input__controller[0].float_state_arr = 7;
input__controller[0].x_arr = 13;
ret_val__controller = 1;
ret_val__controller[0].int_state_arr = 0;
ret_val__controller[0].float_state_arr = 7;
ret_val__controller[0].output_arr = 3;

Other input values:
input__controller[0].input_arr[0] = -423.000000;
input__controller[0].float_state_arr[0] = 659.990000;
input__controller[0].float_state_arr[1] = -78.000000;
input__controller[0].float_state_arr[2] = -283.000000;
input__controller[0].float_state_arr[3] = 272.000000;
input__controller[0].float_state_arr[4] = -193.000000;
input__controller[0].float_state_arr[5] = -384.000000;
input__controller[0].float_state_arr[6] = -73.000000;
input__controller[0].x_arr[0] = -493.000000;
input__controller[0].x_arr[1] = 170.000000;
input__controller[0].x_arr[2] = -8.000000;
input__controller[0].x_arr[3] = -463.000000;
input__controller[0].x_arr[4] = -387.000000;
input__controller[0].x_arr[5] = -245.000000;
input__controller[0].x_arr[6] = 150.000000;
input__controller[0].x_arr[7] = -96268.898765;
input__controller[0].x_arr[8] = 928.000000;
input__controller[0].x_arr[9] = 3.000000;
input__controller[0].x_arr[10] = 417.000000;
input__controller[0].x_arr[11] = 173.000000;
input__controller[0].x_arr[12] = -343.000000;
ret_val__controller[0].float_state_arr[0] = 397.000000;
ret_val__controller[0].float_state_arr[1] = -241.000000;
ret_val__controller[0].float_state_arr[2] = -268.000000;
ret_val__controller[0].float_state_arr[3] = -365.000000;
ret_val__controller[0].float_state_arr[4] = -94.000000;
ret_val__controller[0].float_state_arr[5] = -68.000000;
ret_val__controller[0].float_state_arr[6] = -139.000000;
ret_val__controller[0].output_arr[0] = 438.000000;
ret_val__controller[0].output_arr[1] = -491.000000;
ret_val__controller[0].output_arr[2] = -16.000000;

Result:
unknown

Path Covered :
afc.c
-140 +142 +146 +151 +158 +160 +162 +162b -182 +191 -205 -207


Path Predicate for case 30:
afc.c: -140 input[0].x_arr[10]>-1.000000
afc.c: +142 ((unsigned char)input[0].float_state_arr[3])<>0
afc.c: +146 (input[0].float_state_arr[0]+0.010000)>=10.000000
afc.c: +151 ((unsigned char)input[0].float_state_arr[4])<>0
afc.c: +158 input[0].x_arr[8]>=50.000000
afc.c: +160 1<>0
afc.c: +162 1<>0
afc.c: +162b 1<>0
afc.c: -182 1<>0
afc.c: +191 1<>0
afc.c: -205 ((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))/12.500000)=<1.660000
afc.c: -207 ((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))/12.500000)>=0.130000

Simplified Path Predicate for case 30:
input[0].x_arr[10]>-1.000000 AND
((unsigned char)input[0].float_state_arr[3])<>0 AND
(input[0].float_state_arr[0]+0.010000)>=10.000000 AND
((unsigned char)input[0].float_state_arr[4])<>0 AND
input[0].x_arr[8]>=50.000000 AND
((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))/12.500000)=<1.660000 AND
((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))/12.500000)>=0.130000

Output Values for case 30: (Symbolic,Concrete)
return value = 0, 0
ret_val[0].float_state_arr[0] = (input[0].float_state_arr[0]+0.010000), 660.000000
ret_val[0].float_state_arr[1] = input[0].float_state_arr[1], -78.000000
ret_val[0].float_state_arr[2] = (input[0].float_state_arr[2]+(((input[0].x_arr[9]+-((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))))*0.413280)*0.010000)), -283.000000
ret_val[0].float_state_arr[3] = 1.000000, 1.000000
ret_val[0].float_state_arr[4] = 1.000000, 1.000000
ret_val[0].float_state_arr[5] = 1.000000, 1.000000
ret_val[0].float_state_arr[6] = input[0].float_state_arr[6], -73.000000
ret_val[0].output_arr[0] = ((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))/12.500000), 0.240000
ret_val[0].output_arr[1] = 1.000000, 1.000000
ret_val[0].output_arr[2] = 12.500000, 12.500000

to explore negation deepest unexplored condition of predicate,
Path Predicate Prefix to solve :
afc.c: -140 input[0].x_arr[10]>-1.000000
afc.c: +142 ((unsigned char)input[0].float_state_arr[3])<>0
afc.c: +146 (input[0].float_state_arr[0]+0.010000)>=10.000000
afc.c: +151 ((unsigned char)input[0].float_state_arr[4])<>0
afc.c: +158 input[0].x_arr[8]>=50.000000
afc.c: +160 1<>0
afc.c: +162 1<>0
afc.c: +162b 1<>0
afc.c: -182 1<>0
afc.c: -191 1=0
Path Prefix to cover :
afc.c
-140 +142 +146 +151 +158 +160 +162 +162b -182 -191
trivially infeasible

to explore negation deepest unexplored condition of predicate,
Path Predicate Prefix to solve :
afc.c: -140 input[0].x_arr[10]>-1.000000
afc.c: +142 ((unsigned char)input[0].float_state_arr[3])<>0
afc.c: +146 (input[0].float_state_arr[0]+0.010000)>=10.000000
afc.c: +151 ((unsigned char)input[0].float_state_arr[4])<>0
afc.c: +158 input[0].x_arr[8]>=50.000000
afc.c: +160 1<>0
afc.c: +162 1<>0
afc.c: +162b 1<>0
afc.c: +182 1=0
Path Prefix to cover :
afc.c
-140 +142 +146 +151 +158 +160 +162 +162b +182
trivially infeasible

to explore negation deepest unexplored condition of predicate,
Path Predicate Prefix to solve :
afc.c: -140 input[0].x_arr[10]>-1.000000
afc.c: +142 ((unsigned char)input[0].float_state_arr[3])<>0
afc.c: +146 (input[0].float_state_arr[0]+0.010000)>=10.000000
afc.c: +151 ((unsigned char)input[0].float_state_arr[4])<>0
afc.c: +158 input[0].x_arr[8]>=50.000000
afc.c: +160 1<>0
afc.c: +162 1<>0
afc.c: -162b 1=0
Path Prefix to cover :
afc.c
-140 +142 +146 +151 +158 +160 +162 -162b
trivially infeasible

to explore negation deepest unexplored condition of predicate,
Path Predicate Prefix to solve :
afc.c: -140 input[0].x_arr[10]>-1.000000
afc.c: +142 ((unsigned char)input[0].float_state_arr[3])<>0
afc.c: +146 (input[0].float_state_arr[0]+0.010000)>=10.000000
afc.c: +151 ((unsigned char)input[0].float_state_arr[4])<>0
afc.c: +158 input[0].x_arr[8]>=50.000000
afc.c: +160 1<>0
afc.c: -162 1=0
Path Prefix to cover :
afc.c
-140 +142 +146 +151 +158 +160 -162
trivially infeasible

to explore negation deepest unexplored condition of predicate,
Path Predicate Prefix to solve :
afc.c: -140 input[0].x_arr[10]>-1.000000
afc.c: +142 ((unsigned char)input[0].float_state_arr[3])<>0
afc.c: +146 (input[0].float_state_arr[0]+0.010000)>=10.000000
afc.c: +151 ((unsigned char)input[0].float_state_arr[4])<>0
afc.c: +158 input[0].x_arr[8]>=50.000000
afc.c: -160 1=0
Path Prefix to cover :
afc.c
-140 +142 +146 +151 +158 -160
trivially infeasible

to explore negation deepest unexplored condition of predicate,
Path Predicate Prefix to solve :
afc.c: -140 input[0].x_arr[10]>-1.000000
afc.c: +142 ((unsigned char)input[0].float_state_arr[3])<>0
afc.c: +146 (input[0].float_state_arr[0]+0.010000)>=10.000000
afc.c: -151 ((unsigned char)input[0].float_state_arr[4])=0
Path Prefix to cover :
afc.c
-140 +142 +146 -151


TEST CASE 31

Dimensions:
input__controller = 1;
input__controller[0].input_arr = 1;
input__controller[0].int_state_arr = 0;
input__controller[0].float_state_arr = 7;
input__controller[0].x_arr = 13;
ret_val__controller = 1;
ret_val__controller[0].int_state_arr = 0;
ret_val__controller[0].float_state_arr = 7;
ret_val__controller[0].output_arr = 3;

Other input values:
input__controller[0].input_arr[0] = -423.000000;
input__controller[0].float_state_arr[0] = 659.990000;
input__controller[0].float_state_arr[1] = -78.000000;
input__controller[0].float_state_arr[2] = -292.000000;
input__controller[0].float_state_arr[3] = 272.000000;
input__controller[0].float_state_arr[4] = -0.600000;
input__controller[0].float_state_arr[5] = -384.000000;
input__controller[0].float_state_arr[6] = -73.000000;
input__controller[0].x_arr[0] = -493.000000;
input__controller[0].x_arr[1] = 170.000000;
input__controller[0].x_arr[2] = -8.000000;
input__controller[0].x_arr[3] = -463.000000;
input__controller[0].x_arr[4] = -387.000000;
input__controller[0].x_arr[5] = -245.000000;
input__controller[0].x_arr[6] = 150.000000;
input__controller[0].x_arr[7] = -475.000000;
input__controller[0].x_arr[8] = -478.000000;
input__controller[0].x_arr[9] = -156.000000;
input__controller[0].x_arr[10] = 417.000000;
input__controller[0].x_arr[11] = 173.000000;
input__controller[0].x_arr[12] = -343.000000;
ret_val__controller[0].float_state_arr[0] = 397.000000;
ret_val__controller[0].float_state_arr[1] = -241.000000;
ret_val__controller[0].float_state_arr[2] = -268.000000;
ret_val__controller[0].float_state_arr[3] = -365.000000;
ret_val__controller[0].float_state_arr[4] = -94.000000;
ret_val__controller[0].float_state_arr[5] = -68.000000;
ret_val__controller[0].float_state_arr[6] = -139.000000;
ret_val__controller[0].output_arr[0] = 438.000000;
ret_val__controller[0].output_arr[1] = -491.000000;
ret_val__controller[0].output_arr[2] = -16.000000;

Result:
unknown

Path Covered :
afc.c
-140 +142 +146 -151 -158 +160 +162 -162b -182 +191 +205


Path Predicate for case 31:
afc.c: -140 input[0].x_arr[10]>-1.000000
afc.c: +142 ((unsigned char)input[0].float_state_arr[3])<>0
afc.c: +146 (input[0].float_state_arr[0]+0.010000)>=10.000000
afc.c: -151 ((unsigned char)input[0].float_state_arr[4])=0
afc.c: -158 input[0].x_arr[8]<70.000000
afc.c: +160 1<>0
afc.c: +162 1<>0
afc.c: -162b 0=0
afc.c: -182 1<>0
afc.c: +191 1<>0
afc.c: +205 ((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))/14.700000)>1.660000

Simplified Path Predicate for case 31:
input[0].x_arr[10]>-1.000000 AND
((unsigned char)input[0].float_state_arr[3])<>0 AND
(input[0].float_state_arr[0]+0.010000)>=10.000000 AND
((unsigned char)input[0].float_state_arr[4])=0 AND
input[0].x_arr[8]<70.000000 AND
((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))/14.700000)>1.660000

Output Values for case 31: (Symbolic,Concrete)
return value = 0, 0
ret_val[0].float_state_arr[0] = (input[0].float_state_arr[0]+0.010000), 660.000000
ret_val[0].float_state_arr[1] = input[0].float_state_arr[1], -78.000000
ret_val[0].float_state_arr[2] = (input[0].float_state_arr[2]+(((input[0].x_arr[9]+-((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))))*0.413280)*0.010000)), -5957.592441
ret_val[0].float_state_arr[3] = 1.000000, 1.000000
ret_val[0].float_state_arr[4] = 0.000000, 0.000000
ret_val[0].float_state_arr[5] = 1.000000, 1.000000
ret_val[0].float_state_arr[6] = input[0].float_state_arr[6], -73.000000
ret_val[0].output_arr[0] = 1.660000, 1.660000
ret_val[0].output_arr[1] = 1.000000, 1.000000
ret_val[0].output_arr[2] = 14.700000, 14.700000

to explore negation deepest unexplored condition of predicate,
Path Predicate Prefix to solve :
afc.c: -140 input[0].x_arr[10]>-1.000000
afc.c: +142 ((unsigned char)input[0].float_state_arr[3])<>0
afc.c: +146 (input[0].float_state_arr[0]+0.010000)>=10.000000
afc.c: -151 ((unsigned char)input[0].float_state_arr[4])=0
afc.c: -158 input[0].x_arr[8]<70.000000
afc.c: +160 1<>0
afc.c: +162 1<>0
afc.c: -162b 0=0
afc.c: -182 1<>0
afc.c: +191 1<>0
afc.c: -205 ((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))/14.700000)=<1.660000
Path Prefix to cover :
afc.c
-140 +142 +146 -151 -158 +160 +162 -162b -182 +191 -205


TEST CASE 32

Dimensions:
input__controller = 1;
input__controller[0].input_arr = 1;
input__controller[0].int_state_arr = 0;
input__controller[0].float_state_arr = 7;
input__controller[0].x_arr = 13;
ret_val__controller = 1;
ret_val__controller[0].int_state_arr = 0;
ret_val__controller[0].float_state_arr = 7;
ret_val__controller[0].output_arr = 3;

Other input values:
input__controller[0].input_arr[0] = -423.000000;
input__controller[0].float_state_arr[0] = 659.990000;
input__controller[0].float_state_arr[1] = -78.000000;
input__controller[0].float_state_arr[2] = -461.000000;
input__controller[0].float_state_arr[3] = 272.000000;
input__controller[0].float_state_arr[4] = -0.600000;
input__controller[0].float_state_arr[5] = -384.000000;
input__controller[0].float_state_arr[6] = -73.000000;
input__controller[0].x_arr[0] = -493.000000;
input__controller[0].x_arr[1] = 170.000000;
input__controller[0].x_arr[2] = -8.000000;
input__controller[0].x_arr[3] = -463.000000;
input__controller[0].x_arr[4] = -387.000000;
input__controller[0].x_arr[5] = -245.000000;
input__controller[0].x_arr[6] = 150.000000;
input__controller[0].x_arr[7] = -0.000000;
input__controller[0].x_arr[8] = -478.000000;
input__controller[0].x_arr[9] = -0.366000;
input__controller[0].x_arr[10] = 417.000000;
input__controller[0].x_arr[11] = 173.000000;
input__controller[0].x_arr[12] = -343.000000;
ret_val__controller[0].float_state_arr[0] = 397.000000;
ret_val__controller[0].float_state_arr[1] = -241.000000;
ret_val__controller[0].float_state_arr[2] = -268.000000;
ret_val__controller[0].float_state_arr[3] = -365.000000;
ret_val__controller[0].float_state_arr[4] = -94.000000;
ret_val__controller[0].float_state_arr[5] = -68.000000;
ret_val__controller[0].float_state_arr[6] = -139.000000;
ret_val__controller[0].output_arr[0] = 438.000000;
ret_val__controller[0].output_arr[1] = -491.000000;
ret_val__controller[0].output_arr[2] = -16.000000;

Result:
unknown

Path Covered :
afc.c
-140 +142 +146 -151 -158 +160 +162 -162b -182 +191 -205 +207


Path Predicate for case 32:
afc.c: -140 input[0].x_arr[10]>-1.000000
afc.c: +142 ((unsigned char)input[0].float_state_arr[3])<>0
afc.c: +146 (input[0].float_state_arr[0]+0.010000)>=10.000000
afc.c: -151 ((unsigned char)input[0].float_state_arr[4])=0
afc.c: -158 input[0].x_arr[8]<70.000000
afc.c: +160 1<>0
afc.c: +162 1<>0
afc.c: -162b 0=0
afc.c: -182 1<>0
afc.c: +191 1<>0
afc.c: -205 ((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))/14.700000)=<1.660000
afc.c: +207 ((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))/14.700000)<0.130000

Simplified Path Predicate for case 32:
input[0].x_arr[10]>-1.000000 AND
((unsigned char)input[0].float_state_arr[3])<>0 AND
(input[0].float_state_arr[0]+0.010000)>=10.000000 AND
((unsigned char)input[0].float_state_arr[4])=0 AND
input[0].x_arr[8]<70.000000 AND
((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))/14.700000)=<1.660000 AND
((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))/14.700000)<0.130000

Output Values for case 32: (Symbolic,Concrete)
return value = 0, 0
ret_val[0].float_state_arr[0] = (input[0].float_state_arr[0]+0.010000), 660.000000
ret_val[0].float_state_arr[1] = input[0].float_state_arr[1], -78.000000
ret_val[0].float_state_arr[2] = (input[0].float_state_arr[2]+(((input[0].x_arr[9]+-((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))))*0.413280)*0.010000)), -461.000000
ret_val[0].float_state_arr[3] = 1.000000, 1.000000
ret_val[0].float_state_arr[4] = 0.000000, 0.000000
ret_val[0].float_state_arr[5] = 1.000000, 1.000000
ret_val[0].float_state_arr[6] = input[0].float_state_arr[6], -73.000000
ret_val[0].output_arr[0] = 0.130000, 0.130000
ret_val[0].output_arr[1] = 1.000000, 1.000000
ret_val[0].output_arr[2] = 14.700000, 14.700000

to explore negation deepest unexplored condition of predicate,
Path Predicate Prefix to solve :
afc.c: -140 input[0].x_arr[10]>-1.000000
afc.c: +142 ((unsigned char)input[0].float_state_arr[3])<>0
afc.c: +146 (input[0].float_state_arr[0]+0.010000)>=10.000000
afc.c: -151 ((unsigned char)input[0].float_state_arr[4])=0
afc.c: -158 input[0].x_arr[8]<70.000000
afc.c: +160 1<>0
afc.c: +162 1<>0
afc.c: -162b 0=0
afc.c: -182 1<>0
afc.c: +191 1<>0
afc.c: -205 ((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))/14.700000)=<1.660000
afc.c: -207 ((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))/14.700000)>=0.130000
Path Prefix to cover :
afc.c
-140 +142 +146 -151 -158 +160 +162 -162b -182 +191 -205 -207


TEST CASE 33

Dimensions:
input__controller = 1;
input__controller[0].input_arr = 1;
input__controller[0].int_state_arr = 0;
input__controller[0].float_state_arr = 7;
input__controller[0].x_arr = 13;
ret_val__controller = 1;
ret_val__controller[0].int_state_arr = 0;
ret_val__controller[0].float_state_arr = 7;
ret_val__controller[0].output_arr = 3;

Other input values:
input__controller[0].input_arr[0] = -423.000000;
input__controller[0].float_state_arr[0] = 659.990000;
input__controller[0].float_state_arr[1] = -78.000000;
input__controller[0].float_state_arr[2] = 296.000000;
input__controller[0].float_state_arr[3] = 272.000000;
input__controller[0].float_state_arr[4] = -0.600000;
input__controller[0].float_state_arr[5] = -384.000000;
input__controller[0].float_state_arr[6] = -73.000000;
input__controller[0].x_arr[0] = -493.000000;
input__controller[0].x_arr[1] = 170.000000;
input__controller[0].x_arr[2] = -8.000000;
input__controller[0].x_arr[3] = -463.000000;
input__controller[0].x_arr[4] = -387.000000;
input__controller[0].x_arr[5] = -245.000000;
input__controller[0].x_arr[6] = 150.000000;
input__controller[0].x_arr[7] = 98854.102176;
input__controller[0].x_arr[8] = -478.000000;
input__controller[0].x_arr[9] = 6.000000;
input__controller[0].x_arr[10] = 417.000000;
input__controller[0].x_arr[11] = 173.000000;
input__controller[0].x_arr[12] = -343.000000;
ret_val__controller[0].float_state_arr[0] = 397.000000;
ret_val__controller[0].float_state_arr[1] = -241.000000;
ret_val__controller[0].float_state_arr[2] = -268.000000;
ret_val__controller[0].float_state_arr[3] = -365.000000;
ret_val__controller[0].float_state_arr[4] = -94.000000;
ret_val__controller[0].float_state_arr[5] = -68.000000;
ret_val__controller[0].float_state_arr[6] = -139.000000;
ret_val__controller[0].output_arr[0] = 438.000000;
ret_val__controller[0].output_arr[1] = -491.000000;
ret_val__controller[0].output_arr[2] = -16.000000;

Result:
unknown

Path Covered :
afc.c
-140 +142 +146 -151 -158 +160 +162 -162b -182 +191 -205 -207


Path Predicate for case 33:
afc.c: -140 input[0].x_arr[10]>-1.000000
afc.c: +142 ((unsigned char)input[0].float_state_arr[3])<>0
afc.c: +146 (input[0].float_state_arr[0]+0.010000)>=10.000000
afc.c: -151 ((unsigned char)input[0].float_state_arr[4])=0
afc.c: -158 input[0].x_arr[8]<70.000000
afc.c: +160 1<>0
afc.c: +162 1<>0
afc.c: -162b 0=0
afc.c: -182 1<>0
afc.c: +191 1<>0
afc.c: -205 ((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))/14.700000)=<1.660000
afc.c: -207 ((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))/14.700000)>=0.130000

Simplified Path Predicate for case 33:
input[0].x_arr[10]>-1.000000 AND
((unsigned char)input[0].float_state_arr[3])<>0 AND
(input[0].float_state_arr[0]+0.010000)>=10.000000 AND
((unsigned char)input[0].float_state_arr[4])=0 AND
input[0].x_arr[8]<70.000000 AND
((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))/14.700000)=<1.660000 AND
((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))/14.700000)>=0.130000

Output Values for case 33: (Symbolic,Concrete)
return value = 0, 0
ret_val[0].float_state_arr[0] = (input[0].float_state_arr[0]+0.010000), 660.000000
ret_val[0].float_state_arr[1] = input[0].float_state_arr[1], -78.000000
ret_val[0].float_state_arr[2] = (input[0].float_state_arr[2]+(((input[0].x_arr[9]+-((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))))*0.413280)*0.010000)), 296.000000
ret_val[0].float_state_arr[3] = 1.000000, 1.000000
ret_val[0].float_state_arr[4] = 0.000000, 0.000000
ret_val[0].float_state_arr[5] = 1.000000, 1.000000
ret_val[0].float_state_arr[6] = input[0].float_state_arr[6], -73.000000
ret_val[0].output_arr[0] = ((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))/14.700000), 0.408163
ret_val[0].output_arr[1] = 1.000000, 1.000000
ret_val[0].output_arr[2] = 14.700000, 14.700000

to explore negation deepest unexplored condition of predicate,
Path Predicate Prefix to solve :
afc.c: -140 input[0].x_arr[10]>-1.000000
afc.c: +142 ((unsigned char)input[0].float_state_arr[3])<>0
afc.c: +146 (input[0].float_state_arr[0]+0.010000)>=10.000000
afc.c: -151 ((unsigned char)input[0].float_state_arr[4])=0
afc.c: -158 input[0].x_arr[8]<70.000000
afc.c: +160 1<>0
afc.c: +162 1<>0
afc.c: -162b 0=0
afc.c: -182 1<>0
afc.c: -191 1=0
Path Prefix to cover :
afc.c
-140 +142 +146 -151 -158 +160 +162 -162b -182 -191
trivially infeasible

to explore negation deepest unexplored condition of predicate,
Path Predicate Prefix to solve :
afc.c: -140 input[0].x_arr[10]>-1.000000
afc.c: +142 ((unsigned char)input[0].float_state_arr[3])<>0
afc.c: +146 (input[0].float_state_arr[0]+0.010000)>=10.000000
afc.c: -151 ((unsigned char)input[0].float_state_arr[4])=0
afc.c: -158 input[0].x_arr[8]<70.000000
afc.c: +160 1<>0
afc.c: +162 1<>0
afc.c: -162b 0=0
afc.c: +182 1=0
Path Prefix to cover :
afc.c
-140 +142 +146 -151 -158 +160 +162 -162b +182
trivially infeasible

to explore negation deepest unexplored condition of predicate,
Path Predicate Prefix to solve :
afc.c: -140 input[0].x_arr[10]>-1.000000
afc.c: +142 ((unsigned char)input[0].float_state_arr[3])<>0
afc.c: +146 (input[0].float_state_arr[0]+0.010000)>=10.000000
afc.c: -151 ((unsigned char)input[0].float_state_arr[4])=0
afc.c: -158 input[0].x_arr[8]<70.000000
afc.c: +160 1<>0
afc.c: +162 1<>0
afc.c: +162b 0<>0
Path Prefix to cover :
afc.c
-140 +142 +146 -151 -158 +160 +162 +162b
trivially infeasible

to explore negation deepest unexplored condition of predicate,
Path Predicate Prefix to solve :
afc.c: -140 input[0].x_arr[10]>-1.000000
afc.c: +142 ((unsigned char)input[0].float_state_arr[3])<>0
afc.c: +146 (input[0].float_state_arr[0]+0.010000)>=10.000000
afc.c: -151 ((unsigned char)input[0].float_state_arr[4])=0
afc.c: -158 input[0].x_arr[8]<70.000000
afc.c: +160 1<>0
afc.c: -162 1=0
Path Prefix to cover :
afc.c
-140 +142 +146 -151 -158 +160 -162
trivially infeasible

to explore negation deepest unexplored condition of predicate,
Path Predicate Prefix to solve :
afc.c: -140 input[0].x_arr[10]>-1.000000
afc.c: +142 ((unsigned char)input[0].float_state_arr[3])<>0
afc.c: +146 (input[0].float_state_arr[0]+0.010000)>=10.000000
afc.c: -151 ((unsigned char)input[0].float_state_arr[4])=0
afc.c: -158 input[0].x_arr[8]<70.000000
afc.c: -160 1=0
Path Prefix to cover :
afc.c
-140 +142 +146 -151 -158 -160
trivially infeasible

to explore negation deepest unexplored condition of predicate,
Path Predicate Prefix to solve :
afc.c: -140 input[0].x_arr[10]>-1.000000
afc.c: +142 ((unsigned char)input[0].float_state_arr[3])<>0
afc.c: +146 (input[0].float_state_arr[0]+0.010000)>=10.000000
afc.c: -151 ((unsigned char)input[0].float_state_arr[4])=0
afc.c: +158 input[0].x_arr[8]>=70.000000
Path Prefix to cover :
afc.c
-140 +142 +146 -151 +158


TEST CASE 34

Dimensions:
input__controller = 1;
input__controller[0].input_arr = 1;
input__controller[0].int_state_arr = 0;
input__controller[0].float_state_arr = 7;
input__controller[0].x_arr = 13;
ret_val__controller = 1;
ret_val__controller[0].int_state_arr = 0;
ret_val__controller[0].float_state_arr = 7;
ret_val__controller[0].output_arr = 3;

Other input values:
input__controller[0].input_arr[0] = -423.000000;
input__controller[0].float_state_arr[0] = 659.990000;
input__controller[0].float_state_arr[1] = -78.000000;
input__controller[0].float_state_arr[2] = -292.000000;
input__controller[0].float_state_arr[3] = 272.000000;
input__controller[0].float_state_arr[4] = -0.600000;
input__controller[0].float_state_arr[5] = -384.000000;
input__controller[0].float_state_arr[6] = -73.000000;
input__controller[0].x_arr[0] = -493.000000;
input__controller[0].x_arr[1] = 170.000000;
input__controller[0].x_arr[2] = -8.000000;
input__controller[0].x_arr[3] = -463.000000;
input__controller[0].x_arr[4] = -387.000000;
input__controller[0].x_arr[5] = -245.000000;
input__controller[0].x_arr[6] = 150.000000;
input__controller[0].x_arr[7] = -475.000000;
input__controller[0].x_arr[8] = 383.000000;
input__controller[0].x_arr[9] = -156.000000;
input__controller[0].x_arr[10] = 417.000000;
input__controller[0].x_arr[11] = 173.000000;
input__controller[0].x_arr[12] = -343.000000;
ret_val__controller[0].float_state_arr[0] = 397.000000;
ret_val__controller[0].float_state_arr[1] = -241.000000;
ret_val__controller[0].float_state_arr[2] = -268.000000;
ret_val__controller[0].float_state_arr[3] = -365.000000;
ret_val__controller[0].float_state_arr[4] = -94.000000;
ret_val__controller[0].float_state_arr[5] = -68.000000;
ret_val__controller[0].float_state_arr[6] = -139.000000;
ret_val__controller[0].output_arr[0] = 438.000000;
ret_val__controller[0].output_arr[1] = -491.000000;
ret_val__controller[0].output_arr[2] = -16.000000;

Result:
unknown

Path Covered :
afc.c
-140 +142 +146 -151 +158 +160 +162 +162b -182 +191 +205


Path Predicate for case 34:
afc.c: -140 input[0].x_arr[10]>-1.000000
afc.c: +142 ((unsigned char)input[0].float_state_arr[3])<>0
afc.c: +146 (input[0].float_state_arr[0]+0.010000)>=10.000000
afc.c: -151 ((unsigned char)input[0].float_state_arr[4])=0
afc.c: +158 input[0].x_arr[8]>=70.000000
afc.c: +160 1<>0
afc.c: +162 1<>0
afc.c: +162b 1<>0
afc.c: -182 1<>0
afc.c: +191 1<>0
afc.c: +205 ((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))/12.500000)>1.660000

Simplified Path Predicate for case 34:
input[0].x_arr[10]>-1.000000 AND
((unsigned char)input[0].float_state_arr[3])<>0 AND
(input[0].float_state_arr[0]+0.010000)>=10.000000 AND
((unsigned char)input[0].float_state_arr[4])=0 AND
input[0].x_arr[8]>=70.000000 AND
((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))/12.500000)>1.660000

Output Values for case 34: (Symbolic,Concrete)
return value = 0, 0
ret_val[0].float_state_arr[0] = (input[0].float_state_arr[0]+0.010000), 660.000000
ret_val[0].float_state_arr[1] = input[0].float_state_arr[1], -78.000000
ret_val[0].float_state_arr[2] = (input[0].float_state_arr[2]+(((input[0].x_arr[9]+-((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))))*0.413280)*0.010000)), -5957.592441
ret_val[0].float_state_arr[3] = 1.000000, 1.000000
ret_val[0].float_state_arr[4] = 1.000000, 1.000000
ret_val[0].float_state_arr[5] = 1.000000, 1.000000
ret_val[0].float_state_arr[6] = input[0].float_state_arr[6], -73.000000
ret_val[0].output_arr[0] = 1.660000, 1.660000
ret_val[0].output_arr[1] = 1.000000, 1.000000
ret_val[0].output_arr[2] = 12.500000, 12.500000

to explore negation deepest unexplored condition of predicate,
Path Predicate Prefix to solve :
afc.c: -140 input[0].x_arr[10]>-1.000000
afc.c: +142 ((unsigned char)input[0].float_state_arr[3])<>0
afc.c: +146 (input[0].float_state_arr[0]+0.010000)>=10.000000
afc.c: -151 ((unsigned char)input[0].float_state_arr[4])=0
afc.c: +158 input[0].x_arr[8]>=70.000000
afc.c: +160 1<>0
afc.c: +162 1<>0
afc.c: +162b 1<>0
afc.c: -182 1<>0
afc.c: +191 1<>0
afc.c: -205 ((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))/12.500000)=<1.660000
Path Prefix to cover :
afc.c
-140 +142 +146 -151 +158 +160 +162 +162b -182 +191 -205


TEST CASE 35

Dimensions:
input__controller = 1;
input__controller[0].input_arr = 1;
input__controller[0].int_state_arr = 0;
input__controller[0].float_state_arr = 7;
input__controller[0].x_arr = 13;
ret_val__controller = 1;
ret_val__controller[0].int_state_arr = 0;
ret_val__controller[0].float_state_arr = 7;
ret_val__controller[0].output_arr = 3;

Other input values:
input__controller[0].input_arr[0] = -423.000000;
input__controller[0].float_state_arr[0] = 659.990000;
input__controller[0].float_state_arr[1] = -78.000000;
input__controller[0].float_state_arr[2] = 373.000000;
input__controller[0].float_state_arr[3] = 272.000000;
input__controller[0].float_state_arr[4] = -0.600000;
input__controller[0].float_state_arr[5] = -384.000000;
input__controller[0].float_state_arr[6] = -73.000000;
input__controller[0].x_arr[0] = -493.000000;
input__controller[0].x_arr[1] = 170.000000;
input__controller[0].x_arr[2] = -8.000000;
input__controller[0].x_arr[3] = -463.000000;
input__controller[0].x_arr[4] = -387.000000;
input__controller[0].x_arr[5] = -245.000000;
input__controller[0].x_arr[6] = 150.000000;
input__controller[0].x_arr[7] = 0.000000;
input__controller[0].x_arr[8] = 383.000000;
input__controller[0].x_arr[9] = -0.366000;
input__controller[0].x_arr[10] = 417.000000;
input__controller[0].x_arr[11] = 173.000000;
input__controller[0].x_arr[12] = -343.000000;
ret_val__controller[0].float_state_arr[0] = 397.000000;
ret_val__controller[0].float_state_arr[1] = -241.000000;
ret_val__controller[0].float_state_arr[2] = -268.000000;
ret_val__controller[0].float_state_arr[3] = -365.000000;
ret_val__controller[0].float_state_arr[4] = -94.000000;
ret_val__controller[0].float_state_arr[5] = -68.000000;
ret_val__controller[0].float_state_arr[6] = -139.000000;
ret_val__controller[0].output_arr[0] = 438.000000;
ret_val__controller[0].output_arr[1] = -491.000000;
ret_val__controller[0].output_arr[2] = -16.000000;

Result:
unknown

Path Covered :
afc.c
-140 +142 +146 -151 +158 +160 +162 +162b -182 +191 -205 +207


Path Predicate for case 35:
afc.c: -140 input[0].x_arr[10]>-1.000000
afc.c: +142 ((unsigned char)input[0].float_state_arr[3])<>0
afc.c: +146 (input[0].float_state_arr[0]+0.010000)>=10.000000
afc.c: -151 ((unsigned char)input[0].float_state_arr[4])=0
afc.c: +158 input[0].x_arr[8]>=70.000000
afc.c: +160 1<>0
afc.c: +162 1<>0
afc.c: +162b 1<>0
afc.c: -182 1<>0
afc.c: +191 1<>0
afc.c: -205 ((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))/12.500000)=<1.660000
afc.c: +207 ((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))/12.500000)<0.130000

Simplified Path Predicate for case 35:
input[0].x_arr[10]>-1.000000 AND
((unsigned char)input[0].float_state_arr[3])<>0 AND
(input[0].float_state_arr[0]+0.010000)>=10.000000 AND
((unsigned char)input[0].float_state_arr[4])=0 AND
input[0].x_arr[8]>=70.000000 AND
((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))/12.500000)=<1.660000 AND
((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))/12.500000)<0.130000

Output Values for case 35: (Symbolic,Concrete)
return value = 0, 0
ret_val[0].float_state_arr[0] = (input[0].float_state_arr[0]+0.010000), 660.000000
ret_val[0].float_state_arr[1] = input[0].float_state_arr[1], -78.000000
ret_val[0].float_state_arr[2] = (input[0].float_state_arr[2]+(((input[0].x_arr[9]+-((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))))*0.413280)*0.010000)), 373.000000
ret_val[0].float_state_arr[3] = 1.000000, 1.000000
ret_val[0].float_state_arr[4] = 1.000000, 1.000000
ret_val[0].float_state_arr[5] = 1.000000, 1.000000
ret_val[0].float_state_arr[6] = input[0].float_state_arr[6], -73.000000
ret_val[0].output_arr[0] = 0.130000, 0.130000
ret_val[0].output_arr[1] = 1.000000, 1.000000
ret_val[0].output_arr[2] = 12.500000, 12.500000

to explore negation deepest unexplored condition of predicate,
Path Predicate Prefix to solve :
afc.c: -140 input[0].x_arr[10]>-1.000000
afc.c: +142 ((unsigned char)input[0].float_state_arr[3])<>0
afc.c: +146 (input[0].float_state_arr[0]+0.010000)>=10.000000
afc.c: -151 ((unsigned char)input[0].float_state_arr[4])=0
afc.c: +158 input[0].x_arr[8]>=70.000000
afc.c: +160 1<>0
afc.c: +162 1<>0
afc.c: +162b 1<>0
afc.c: -182 1<>0
afc.c: +191 1<>0
afc.c: -205 ((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))/12.500000)=<1.660000
afc.c: -207 ((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))/12.500000)>=0.130000
Path Prefix to cover :
afc.c
-140 +142 +146 -151 +158 +160 +162 +162b -182 +191 -205 -207


TEST CASE 36

Dimensions:
input__controller = 1;
input__controller[0].input_arr = 1;
input__controller[0].int_state_arr = 0;
input__controller[0].float_state_arr = 7;
input__controller[0].x_arr = 13;
ret_val__controller = 1;
ret_val__controller[0].int_state_arr = 0;
ret_val__controller[0].float_state_arr = 7;
ret_val__controller[0].output_arr = 3;

Other input values:
input__controller[0].input_arr[0] = -423.000000;
input__controller[0].float_state_arr[0] = 659.990000;
input__controller[0].float_state_arr[1] = -78.000000;
input__controller[0].float_state_arr[2] = -403.000000;
input__controller[0].float_state_arr[3] = 272.000000;
input__controller[0].float_state_arr[4] = -0.600000;
input__controller[0].float_state_arr[5] = -384.000000;
input__controller[0].float_state_arr[6] = -73.000000;
input__controller[0].x_arr[0] = -493.000000;
input__controller[0].x_arr[1] = 170.000000;
input__controller[0].x_arr[2] = -8.000000;
input__controller[0].x_arr[3] = -463.000000;
input__controller[0].x_arr[4] = -387.000000;
input__controller[0].x_arr[5] = -245.000000;
input__controller[0].x_arr[6] = 150.000000;
input__controller[0].x_arr[7] = -0.001700;
input__controller[0].x_arr[8] = 383.000000;
input__controller[0].x_arr[9] = 9.000000;
input__controller[0].x_arr[10] = 417.000000;
input__controller[0].x_arr[11] = 173.000000;
input__controller[0].x_arr[12] = -343.000000;
ret_val__controller[0].float_state_arr[0] = 397.000000;
ret_val__controller[0].float_state_arr[1] = -241.000000;
ret_val__controller[0].float_state_arr[2] = -268.000000;
ret_val__controller[0].float_state_arr[3] = -365.000000;
ret_val__controller[0].float_state_arr[4] = -94.000000;
ret_val__controller[0].float_state_arr[5] = -68.000000;
ret_val__controller[0].float_state_arr[6] = -139.000000;
ret_val__controller[0].output_arr[0] = 438.000000;
ret_val__controller[0].output_arr[1] = -491.000000;
ret_val__controller[0].output_arr[2] = -16.000000;

Result:
unknown

Path Covered :
afc.c
-140 +142 +146 -151 +158 +160 +162 +162b -182 +191 -205 -207


Path Predicate for case 36:
afc.c: -140 input[0].x_arr[10]>-1.000000
afc.c: +142 ((unsigned char)input[0].float_state_arr[3])<>0
afc.c: +146 (input[0].float_state_arr[0]+0.010000)>=10.000000
afc.c: -151 ((unsigned char)input[0].float_state_arr[4])=0
afc.c: +158 input[0].x_arr[8]>=70.000000
afc.c: +160 1<>0
afc.c: +162 1<>0
afc.c: +162b 1<>0
afc.c: -182 1<>0
afc.c: +191 1<>0
afc.c: -205 ((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))/12.500000)=<1.660000
afc.c: -207 ((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))/12.500000)>=0.130000

Simplified Path Predicate for case 36:
input[0].x_arr[10]>-1.000000 AND
((unsigned char)input[0].float_state_arr[3])<>0 AND
(input[0].float_state_arr[0]+0.010000)>=10.000000 AND
((unsigned char)input[0].float_state_arr[4])=0 AND
input[0].x_arr[8]>=70.000000 AND
((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))/12.500000)=<1.660000 AND
((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))/12.500000)>=0.130000

Output Values for case 36: (Symbolic,Concrete)
return value = 0, 0
ret_val[0].float_state_arr[0] = (input[0].float_state_arr[0]+0.010000), 660.000000
ret_val[0].float_state_arr[1] = input[0].float_state_arr[1], -78.000000
ret_val[0].float_state_arr[2] = (input[0].float_state_arr[2]+(((input[0].x_arr[9]+-((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))))*0.413280)*0.010000)), -403.000000
ret_val[0].float_state_arr[3] = 1.000000, 1.000000
ret_val[0].float_state_arr[4] = 1.000000, 1.000000
ret_val[0].float_state_arr[5] = 1.000000, 1.000000
ret_val[0].float_state_arr[6] = input[0].float_state_arr[6], -73.000000
ret_val[0].output_arr[0] = ((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))/12.500000), 0.720000
ret_val[0].output_arr[1] = 1.000000, 1.000000
ret_val[0].output_arr[2] = 12.500000, 12.500000

to explore negation deepest unexplored condition of predicate,
Path Predicate Prefix to solve :
afc.c: -140 input[0].x_arr[10]>-1.000000
afc.c: +142 ((unsigned char)input[0].float_state_arr[3])<>0
afc.c: +146 (input[0].float_state_arr[0]+0.010000)>=10.000000
afc.c: -151 ((unsigned char)input[0].float_state_arr[4])=0
afc.c: +158 input[0].x_arr[8]>=70.000000
afc.c: +160 1<>0
afc.c: +162 1<>0
afc.c: +162b 1<>0
afc.c: -182 1<>0
afc.c: -191 1=0
Path Prefix to cover :
afc.c
-140 +142 +146 -151 +158 +160 +162 +162b -182 -191
trivially infeasible

to explore negation deepest unexplored condition of predicate,
Path Predicate Prefix to solve :
afc.c: -140 input[0].x_arr[10]>-1.000000
afc.c: +142 ((unsigned char)input[0].float_state_arr[3])<>0
afc.c: +146 (input[0].float_state_arr[0]+0.010000)>=10.000000
afc.c: -151 ((unsigned char)input[0].float_state_arr[4])=0
afc.c: +158 input[0].x_arr[8]>=70.000000
afc.c: +160 1<>0
afc.c: +162 1<>0
afc.c: +162b 1<>0
afc.c: +182 1=0
Path Prefix to cover :
afc.c
-140 +142 +146 -151 +158 +160 +162 +162b +182
trivially infeasible

to explore negation deepest unexplored condition of predicate,
Path Predicate Prefix to solve :
afc.c: -140 input[0].x_arr[10]>-1.000000
afc.c: +142 ((unsigned char)input[0].float_state_arr[3])<>0
afc.c: +146 (input[0].float_state_arr[0]+0.010000)>=10.000000
afc.c: -151 ((unsigned char)input[0].float_state_arr[4])=0
afc.c: +158 input[0].x_arr[8]>=70.000000
afc.c: +160 1<>0
afc.c: +162 1<>0
afc.c: -162b 1=0
Path Prefix to cover :
afc.c
-140 +142 +146 -151 +158 +160 +162 -162b
trivially infeasible

to explore negation deepest unexplored condition of predicate,
Path Predicate Prefix to solve :
afc.c: -140 input[0].x_arr[10]>-1.000000
afc.c: +142 ((unsigned char)input[0].float_state_arr[3])<>0
afc.c: +146 (input[0].float_state_arr[0]+0.010000)>=10.000000
afc.c: -151 ((unsigned char)input[0].float_state_arr[4])=0
afc.c: +158 input[0].x_arr[8]>=70.000000
afc.c: +160 1<>0
afc.c: -162 1=0
Path Prefix to cover :
afc.c
-140 +142 +146 -151 +158 +160 -162
trivially infeasible

to explore negation deepest unexplored condition of predicate,
Path Predicate Prefix to solve :
afc.c: -140 input[0].x_arr[10]>-1.000000
afc.c: +142 ((unsigned char)input[0].float_state_arr[3])<>0
afc.c: +146 (input[0].float_state_arr[0]+0.010000)>=10.000000
afc.c: -151 ((unsigned char)input[0].float_state_arr[4])=0
afc.c: +158 input[0].x_arr[8]>=70.000000
afc.c: -160 1=0
Path Prefix to cover :
afc.c
-140 +142 +146 -151 +158 -160
trivially infeasible

to explore negation deepest unexplored condition of predicate,
Path Predicate Prefix to solve :
afc.c: -140 input[0].x_arr[10]>-1.000000
afc.c: -142 ((unsigned char)input[0].float_state_arr[3])=0
Path Prefix to cover :
afc.c
-140 -142


TEST CASE 37

Dimensions:
input__controller = 1;
input__controller[0].input_arr = 1;
input__controller[0].int_state_arr = 0;
input__controller[0].float_state_arr = 7;
input__controller[0].x_arr = 13;
ret_val__controller = 1;
ret_val__controller[0].int_state_arr = 0;
ret_val__controller[0].float_state_arr = 7;
ret_val__controller[0].output_arr = 3;

Other input values:
input__controller[0].input_arr[0] = -423.000000;
input__controller[0].float_state_arr[0] = -371.000000;
input__controller[0].float_state_arr[1] = -78.000000;
input__controller[0].float_state_arr[2] = -292.000000;
input__controller[0].float_state_arr[3] = -0.400000;
input__controller[0].float_state_arr[4] = -193.000000;
input__controller[0].float_state_arr[5] = -384.000000;
input__controller[0].float_state_arr[6] = -73.000000;
input__controller[0].x_arr[0] = -493.000000;
input__controller[0].x_arr[1] = 170.000000;
input__controller[0].x_arr[2] = -8.000000;
input__controller[0].x_arr[3] = -463.000000;
input__controller[0].x_arr[4] = -387.000000;
input__controller[0].x_arr[5] = -245.000000;
input__controller[0].x_arr[6] = 150.000000;
input__controller[0].x_arr[7] = -475.000000;
input__controller[0].x_arr[8] = -478.000000;
input__controller[0].x_arr[9] = -156.000000;
input__controller[0].x_arr[10] = 417.000000;
input__controller[0].x_arr[11] = 173.000000;
input__controller[0].x_arr[12] = -343.000000;
ret_val__controller[0].float_state_arr[0] = 397.000000;
ret_val__controller[0].float_state_arr[1] = -241.000000;
ret_val__controller[0].float_state_arr[2] = -268.000000;
ret_val__controller[0].float_state_arr[3] = -365.000000;
ret_val__controller[0].float_state_arr[4] = -94.000000;
ret_val__controller[0].float_state_arr[5] = -68.000000;
ret_val__controller[0].float_state_arr[6] = -139.000000;
ret_val__controller[0].output_arr[0] = 438.000000;
ret_val__controller[0].output_arr[1] = -491.000000;
ret_val__controller[0].output_arr[2] = -16.000000;

Result:
unknown

Path Covered :
afc.c
-140 -142 -146 +148 +151 -158 -160 -160b -161 +162 -162b +182 -191 -195 +197 -205 +207


Path Predicate for case 37:
afc.c: -140 input[0].x_arr[10]>-1.000000
afc.c: -142 ((unsigned char)input[0].float_state_arr[3])=0
afc.c: -146 (input[0].float_state_arr[0]+0.010000)<10.000000
afc.c: +148 ((unsigned char)input[0].float_state_arr[5])<>0
afc.c: +151 ((unsigned char)input[0].float_state_arr[4])<>0
afc.c: -158 input[0].x_arr[8]<50.000000
afc.c: -160 0=0
afc.c: -160b 1<>0
afc.c: -161 0=0
afc.c: +162 1<>0
afc.c: -162b 0=0
afc.c: +182 0=0
afc.c: -191 0=0
afc.c: -195 (1.000000+((0.040000*(input[0].x_arr[10]+-14.700000))+(((0.140000*(input[0].x_arr[10]+-14.700000))*0.010000)+input[0].float_state_arr[1])))=<100.000000
afc.c: +197 (1.000000+((0.040000*(input[0].x_arr[10]+-14.700000))+(((0.140000*(input[0].x_arr[10]+-14.700000))*0.010000)+input[0].float_state_arr[1])))<0.000000
afc.c: -205 0.000000=<1.660000
afc.c: +207 0.000000<0.130000

Simplified Path Predicate for case 37:
input[0].x_arr[10]>-1.000000 AND
((unsigned char)input[0].float_state_arr[3])=0 AND
(input[0].float_state_arr[0]+0.010000)<10.000000 AND
((unsigned char)input[0].float_state_arr[5])<>0 AND
((unsigned char)input[0].float_state_arr[4])<>0 AND
input[0].x_arr[8]<50.000000 AND
(1.000000+((0.040000*(input[0].x_arr[10]+-14.700000))+(((0.140000*(input[0].x_arr[10]+-14.700000))*0.010000)+input[0].float_state_arr[1])))=<100.000000 AND
(1.000000+((0.040000*(input[0].x_arr[10]+-14.700000))+(((0.140000*(input[0].x_arr[10]+-14.700000))*0.010000)+input[0].float_state_arr[1])))<0.000000

Output Values for case 37: (Symbolic,Concrete)
return value = 0, 0
ret_val[0].float_state_arr[0] = (input[0].float_state_arr[0]+0.010000), -370.990000
ret_val[0].float_state_arr[1] = (((0.140000*(input[0].x_arr[10]+-14.700000))*0.010000)+input[0].float_state_arr[1]), -77.436780
ret_val[0].float_state_arr[2] = (input[0].float_state_arr[2]+(((input[0].x_arr[9]+-((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))))*0.413280)*0.010000)), -5957.592441
ret_val[0].float_state_arr[3] = 0.000000, 0.000000
ret_val[0].float_state_arr[4] = 0.000000, 0.000000
ret_val[0].float_state_arr[5] = 1.000000, 1.000000
ret_val[0].float_state_arr[6] = ((0.040000*(input[0].x_arr[10]+-14.700000))+(((0.140000*(input[0].x_arr[10]+-14.700000))*0.010000)+input[0].float_state_arr[1])), -61.344780
ret_val[0].output_arr[0] = 0.130000, 0.130000
ret_val[0].output_arr[1] = 0.000000, 0.000000
ret_val[0].output_arr[2] = 14.700000, 14.700000

to explore negation deepest unexplored condition of predicate,
Path Predicate Prefix to solve :
afc.c: -140 input[0].x_arr[10]>-1.000000
afc.c: -142 ((unsigned char)input[0].float_state_arr[3])=0
afc.c: -146 (input[0].float_state_arr[0]+0.010000)<10.000000
afc.c: +148 ((unsigned char)input[0].float_state_arr[5])<>0
afc.c: +151 ((unsigned char)input[0].float_state_arr[4])<>0
afc.c: -158 input[0].x_arr[8]<50.000000
afc.c: -160 0=0
afc.c: -160b 1<>0
afc.c: -161 0=0
afc.c: +162 1<>0
afc.c: -162b 0=0
afc.c: +182 0=0
afc.c: -191 0=0
afc.c: -195 (1.000000+((0.040000*(input[0].x_arr[10]+-14.700000))+(((0.140000*(input[0].x_arr[10]+-14.700000))*0.010000)+input[0].float_state_arr[1])))=<100.000000
afc.c: +197 (1.000000+((0.040000*(input[0].x_arr[10]+-14.700000))+(((0.140000*(input[0].x_arr[10]+-14.700000))*0.010000)+input[0].float_state_arr[1])))<0.000000
afc.c: -205 0.000000=<1.660000
afc.c: -207 0.000000>=0.130000
Path Prefix to cover :
afc.c
-140 -142 -146 +148 +151 -158 -160 -160b -161 +162 -162b +182 -191 -195 +197 -205 -207
trivially infeasible

to explore negation deepest unexplored condition of predicate,
Path Predicate Prefix to solve :
afc.c: -140 input[0].x_arr[10]>-1.000000
afc.c: -142 ((unsigned char)input[0].float_state_arr[3])=0
afc.c: -146 (input[0].float_state_arr[0]+0.010000)<10.000000
afc.c: +148 ((unsigned char)input[0].float_state_arr[5])<>0
afc.c: +151 ((unsigned char)input[0].float_state_arr[4])<>0
afc.c: -158 input[0].x_arr[8]<50.000000
afc.c: -160 0=0
afc.c: -160b 1<>0
afc.c: -161 0=0
afc.c: +162 1<>0
afc.c: -162b 0=0
afc.c: +182 0=0
afc.c: -191 0=0
afc.c: -195 (1.000000+((0.040000*(input[0].x_arr[10]+-14.700000))+(((0.140000*(input[0].x_arr[10]+-14.700000))*0.010000)+input[0].float_state_arr[1])))=<100.000000
afc.c: +197 (1.000000+((0.040000*(input[0].x_arr[10]+-14.700000))+(((0.140000*(input[0].x_arr[10]+-14.700000))*0.010000)+input[0].float_state_arr[1])))<0.000000
afc.c: +205 0.000000>1.660000
Path Prefix to cover :
afc.c
-140 -142 -146 +148 +151 -158 -160 -160b -161 +162 -162b +182 -191 -195 +197 +205
trivially infeasible

to explore negation deepest unexplored condition of predicate,
Path Predicate Prefix to solve :
afc.c: -140 input[0].x_arr[10]>-1.000000
afc.c: -142 ((unsigned char)input[0].float_state_arr[3])=0
afc.c: -146 (input[0].float_state_arr[0]+0.010000)<10.000000
afc.c: +148 ((unsigned char)input[0].float_state_arr[5])<>0
afc.c: +151 ((unsigned char)input[0].float_state_arr[4])<>0
afc.c: -158 input[0].x_arr[8]<50.000000
afc.c: -160 0=0
afc.c: -160b 1<>0
afc.c: -161 0=0
afc.c: +162 1<>0
afc.c: -162b 0=0
afc.c: +182 0=0
afc.c: -191 0=0
afc.c: -195 (1.000000+((0.040000*(input[0].x_arr[10]+-14.700000))+(((0.140000*(input[0].x_arr[10]+-14.700000))*0.010000)+input[0].float_state_arr[1])))=<100.000000
afc.c: -197 (1.000000+((0.040000*(input[0].x_arr[10]+-14.700000))+(((0.140000*(input[0].x_arr[10]+-14.700000))*0.010000)+input[0].float_state_arr[1])))>=0.000000
Path Prefix to cover :
afc.c
-140 -142 -146 +148 +151 -158 -160 -160b -161 +162 -162b +182 -191 -195 -197


TEST CASE 38

Dimensions:
input__controller = 1;
input__controller[0].input_arr = 1;
input__controller[0].int_state_arr = 0;
input__controller[0].float_state_arr = 7;
input__controller[0].x_arr = 13;
ret_val__controller = 1;
ret_val__controller[0].int_state_arr = 0;
ret_val__controller[0].float_state_arr = 7;
ret_val__controller[0].output_arr = 3;

Other input values:
input__controller[0].input_arr[0] = -423.000000;
input__controller[0].float_state_arr[0] = -371.000000;
input__controller[0].float_state_arr[1] = 36.000000;
input__controller[0].float_state_arr[2] = -292.000000;
input__controller[0].float_state_arr[3] = -0.400000;
input__controller[0].float_state_arr[4] = -193.000000;
input__controller[0].float_state_arr[5] = -384.000000;
input__controller[0].float_state_arr[6] = -73.000000;
input__controller[0].x_arr[0] = -493.000000;
input__controller[0].x_arr[1] = 170.000000;
input__controller[0].x_arr[2] = -8.000000;
input__controller[0].x_arr[3] = -463.000000;
input__controller[0].x_arr[4] = -387.000000;
input__controller[0].x_arr[5] = -245.000000;
input__controller[0].x_arr[6] = 150.000000;
input__controller[0].x_arr[7] = -475.000000;
input__controller[0].x_arr[8] = -478.000000;
input__controller[0].x_arr[9] = -156.000000;
input__controller[0].x_arr[10] = 14.700000;
input__controller[0].x_arr[11] = 173.000000;
input__controller[0].x_arr[12] = -343.000000;
ret_val__controller[0].float_state_arr[0] = 397.000000;
ret_val__controller[0].float_state_arr[1] = -241.000000;
ret_val__controller[0].float_state_arr[2] = -268.000000;
ret_val__controller[0].float_state_arr[3] = -365.000000;
ret_val__controller[0].float_state_arr[4] = -94.000000;
ret_val__controller[0].float_state_arr[5] = -68.000000;
ret_val__controller[0].float_state_arr[6] = -139.000000;
ret_val__controller[0].output_arr[0] = 438.000000;
ret_val__controller[0].output_arr[1] = -491.000000;
ret_val__controller[0].output_arr[2] = -16.000000;

Result:
unknown

Path Covered :
afc.c
-140 -142 -146 +148 +151 -158 -160 -160b -161 +162 -162b +182 -191 -195 -197 +205


Path Predicate for case 38:
afc.c: -140 input[0].x_arr[10]>-1.000000
afc.c: -142 ((unsigned char)input[0].float_state_arr[3])=0
afc.c: -146 (input[0].float_state_arr[0]+0.010000)<10.000000
afc.c: +148 ((unsigned char)input[0].float_state_arr[5])<>0
afc.c: +151 ((unsigned char)input[0].float_state_arr[4])<>0
afc.c: -158 input[0].x_arr[8]<50.000000
afc.c: -160 0=0
afc.c: -160b 1<>0
afc.c: -161 0=0
afc.c: +162 1<>0
afc.c: -162b 0=0
afc.c: +182 0=0
afc.c: -191 0=0
afc.c: -195 (1.000000+((0.040000*(input[0].x_arr[10]+-14.700000))+(((0.140000*(input[0].x_arr[10]+-14.700000))*0.010000)+input[0].float_state_arr[1])))=<100.000000
afc.c: -197 (1.000000+((0.040000*(input[0].x_arr[10]+-14.700000))+(((0.140000*(input[0].x_arr[10]+-14.700000))*0.010000)+input[0].float_state_arr[1])))>=0.000000
afc.c: +205 (((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))/14.700000)*(1.000000+((0.040000*(input[0].x_arr[10]+-14.700000))+(((0.140000*(input[0].x_arr[10]+-14.700000))*0.010000)+input[0].float_state_arr[1]))))>1.660000

Simplified Path Predicate for case 38:
input[0].x_arr[10]>-1.000000 AND
((unsigned char)input[0].float_state_arr[3])=0 AND
(input[0].float_state_arr[0]+0.010000)<10.000000 AND
((unsigned char)input[0].float_state_arr[5])<>0 AND
((unsigned char)input[0].float_state_arr[4])<>0 AND
input[0].x_arr[8]<50.000000 AND
(1.000000+((0.040000*(input[0].x_arr[10]+-14.700000))+(((0.140000*(input[0].x_arr[10]+-14.700000))*0.010000)+input[0].float_state_arr[1])))=<100.000000 AND
(1.000000+((0.040000*(input[0].x_arr[10]+-14.700000))+(((0.140000*(input[0].x_arr[10]+-14.700000))*0.010000)+input[0].float_state_arr[1])))>=0.000000 AND
(((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))/14.700000)*(1.000000+((0.040000*(input[0].x_arr[10]+-14.700000))+(((0.140000*(input[0].x_arr[10]+-14.700000))*0.010000)+input[0].float_state_arr[1]))))>1.660000

Output Values for case 38: (Symbolic,Concrete)
return value = 0, 0
ret_val[0].float_state_arr[0] = (input[0].float_state_arr[0]+0.010000), -370.990000
ret_val[0].float_state_arr[1] = (((0.140000*(input[0].x_arr[10]+-14.700000))*0.010000)+input[0].float_state_arr[1]), 36.000000
ret_val[0].float_state_arr[2] = (input[0].float_state_arr[2]+(((input[0].x_arr[9]+-((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))))*0.413280)*0.010000)), -5957.592441
ret_val[0].float_state_arr[3] = 0.000000, 0.000000
ret_val[0].float_state_arr[4] = 0.000000, 0.000000
ret_val[0].float_state_arr[5] = 1.000000, 1.000000
ret_val[0].float_state_arr[6] = ((0.040000*(input[0].x_arr[10]+-14.700000))+(((0.140000*(input[0].x_arr[10]+-14.700000))*0.010000)+input[0].float_state_arr[1])), 36.000000
ret_val[0].output_arr[0] = 1.660000, 1.660000
ret_val[0].output_arr[1] = 0.000000, 0.000000
ret_val[0].output_arr[2] = 14.700000, 14.700000

to explore negation deepest unexplored condition of predicate,
Path Predicate Prefix to solve :
afc.c: -140 input[0].x_arr[10]>-1.000000
afc.c: -142 ((unsigned char)input[0].float_state_arr[3])=0
afc.c: -146 (input[0].float_state_arr[0]+0.010000)<10.000000
afc.c: +148 ((unsigned char)input[0].float_state_arr[5])<>0
afc.c: +151 ((unsigned char)input[0].float_state_arr[4])<>0
afc.c: -158 input[0].x_arr[8]<50.000000
afc.c: -160 0=0
afc.c: -160b 1<>0
afc.c: -161 0=0
afc.c: +162 1<>0
afc.c: -162b 0=0
afc.c: +182 0=0
afc.c: -191 0=0
afc.c: -195 (1.000000+((0.040000*(input[0].x_arr[10]+-14.700000))+(((0.140000*(input[0].x_arr[10]+-14.700000))*0.010000)+input[0].float_state_arr[1])))=<100.000000
afc.c: -197 (1.000000+((0.040000*(input[0].x_arr[10]+-14.700000))+(((0.140000*(input[0].x_arr[10]+-14.700000))*0.010000)+input[0].float_state_arr[1])))>=0.000000
afc.c: -205 (((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))/14.700000)*(1.000000+((0.040000*(input[0].x_arr[10]+-14.700000))+(((0.140000*(input[0].x_arr[10]+-14.700000))*0.010000)+input[0].float_state_arr[1]))))=<1.660000
Path Prefix to cover :
afc.c
-140 -142 -146 +148 +151 -158 -160 -160b -161 +162 -162b +182 -191 -195 -197 -205


TEST CASE 39

Dimensions:
input__controller = 1;
input__controller[0].input_arr = 1;
input__controller[0].int_state_arr = 0;
input__controller[0].float_state_arr = 7;
input__controller[0].x_arr = 13;
ret_val__controller = 1;
ret_val__controller[0].int_state_arr = 0;
ret_val__controller[0].float_state_arr = 7;
ret_val__controller[0].output_arr = 3;

Other input values:
input__controller[0].input_arr[0] = -423.000000;
input__controller[0].float_state_arr[0] = -371.000000;
input__controller[0].float_state_arr[1] = -1.000000;
input__controller[0].float_state_arr[2] = 122.000000;
input__controller[0].float_state_arr[3] = -0.400000;
input__controller[0].float_state_arr[4] = -193.000000;
input__controller[0].float_state_arr[5] = -384.000000;
input__controller[0].float_state_arr[6] = -73.000000;
input__controller[0].x_arr[0] = -493.000000;
input__controller[0].x_arr[1] = 170.000000;
input__controller[0].x_arr[2] = -8.000000;
input__controller[0].x_arr[3] = -463.000000;
input__controller[0].x_arr[4] = -387.000000;
input__controller[0].x_arr[5] = -245.000000;
input__controller[0].x_arr[6] = 150.000000;
input__controller[0].x_arr[7] = -0.000000;
input__controller[0].x_arr[8] = -478.000000;
input__controller[0].x_arr[9] = -0.366000;
input__controller[0].x_arr[10] = 14.700000;
input__controller[0].x_arr[11] = 173.000000;
input__controller[0].x_arr[12] = -343.000000;
ret_val__controller[0].float_state_arr[0] = 397.000000;
ret_val__controller[0].float_state_arr[1] = -241.000000;
ret_val__controller[0].float_state_arr[2] = -268.000000;
ret_val__controller[0].float_state_arr[3] = -365.000000;
ret_val__controller[0].float_state_arr[4] = -94.000000;
ret_val__controller[0].float_state_arr[5] = -68.000000;
ret_val__controller[0].float_state_arr[6] = -139.000000;
ret_val__controller[0].output_arr[0] = 438.000000;
ret_val__controller[0].output_arr[1] = -491.000000;
ret_val__controller[0].output_arr[2] = -16.000000;

Result:
unknown

Path Covered :
afc.c
-140 -142 -146 +148 +151 -158 -160 -160b -161 +162 -162b +182 -191 -195 -197 -205 +207


Path Predicate for case 39:
afc.c: -140 input[0].x_arr[10]>-1.000000
afc.c: -142 ((unsigned char)input[0].float_state_arr[3])=0
afc.c: -146 (input[0].float_state_arr[0]+0.010000)<10.000000
afc.c: +148 ((unsigned char)input[0].float_state_arr[5])<>0
afc.c: +151 ((unsigned char)input[0].float_state_arr[4])<>0
afc.c: -158 input[0].x_arr[8]<50.000000
afc.c: -160 0=0
afc.c: -160b 1<>0
afc.c: -161 0=0
afc.c: +162 1<>0
afc.c: -162b 0=0
afc.c: +182 0=0
afc.c: -191 0=0
afc.c: -195 (1.000000+((0.040000*(input[0].x_arr[10]+-14.700000))+(((0.140000*(input[0].x_arr[10]+-14.700000))*0.010000)+input[0].float_state_arr[1])))=<100.000000
afc.c: -197 (1.000000+((0.040000*(input[0].x_arr[10]+-14.700000))+(((0.140000*(input[0].x_arr[10]+-14.700000))*0.010000)+input[0].float_state_arr[1])))>=0.000000
afc.c: -205 (((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))/14.700000)*(1.000000+((0.040000*(input[0].x_arr[10]+-14.700000))+(((0.140000*(input[0].x_arr[10]+-14.700000))*0.010000)+input[0].float_state_arr[1]))))=<1.660000
afc.c: +207 (((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))/14.700000)*(1.000000+((0.040000*(input[0].x_arr[10]+-14.700000))+(((0.140000*(input[0].x_arr[10]+-14.700000))*0.010000)+input[0].float_state_arr[1]))))<0.130000

Simplified Path Predicate for case 39:
input[0].x_arr[10]>-1.000000 AND
((unsigned char)input[0].float_state_arr[3])=0 AND
(input[0].float_state_arr[0]+0.010000)<10.000000 AND
((unsigned char)input[0].float_state_arr[5])<>0 AND
((unsigned char)input[0].float_state_arr[4])<>0 AND
input[0].x_arr[8]<50.000000 AND
(1.000000+((0.040000*(input[0].x_arr[10]+-14.700000))+(((0.140000*(input[0].x_arr[10]+-14.700000))*0.010000)+input[0].float_state_arr[1])))=<100.000000 AND
(1.000000+((0.040000*(input[0].x_arr[10]+-14.700000))+(((0.140000*(input[0].x_arr[10]+-14.700000))*0.010000)+input[0].float_state_arr[1])))>=0.000000 AND
(((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))/14.700000)*(1.000000+((0.040000*(input[0].x_arr[10]+-14.700000))+(((0.140000*(input[0].x_arr[10]+-14.700000))*0.010000)+input[0].float_state_arr[1]))))=<1.660000 AND
(((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))/14.700000)*(1.000000+((0.040000*(input[0].x_arr[10]+-14.700000))+(((0.140000*(input[0].x_arr[10]+-14.700000))*0.010000)+input[0].float_state_arr[1]))))<0.130000

Output Values for case 39: (Symbolic,Concrete)
return value = 0, 0
ret_val[0].float_state_arr[0] = (input[0].float_state_arr[0]+0.010000), -370.990000
ret_val[0].float_state_arr[1] = (((0.140000*(input[0].x_arr[10]+-14.700000))*0.010000)+input[0].float_state_arr[1]), -1.000000
ret_val[0].float_state_arr[2] = (input[0].float_state_arr[2]+(((input[0].x_arr[9]+-((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))))*0.413280)*0.010000)), 122.000000
ret_val[0].float_state_arr[3] = 0.000000, 0.000000
ret_val[0].float_state_arr[4] = 0.000000, 0.000000
ret_val[0].float_state_arr[5] = 1.000000, 1.000000
ret_val[0].float_state_arr[6] = ((0.040000*(input[0].x_arr[10]+-14.700000))+(((0.140000*(input[0].x_arr[10]+-14.700000))*0.010000)+input[0].float_state_arr[1])), -1.000000
ret_val[0].output_arr[0] = 0.130000, 0.130000
ret_val[0].output_arr[1] = 0.000000, 0.000000
ret_val[0].output_arr[2] = 14.700000, 14.700000

to explore negation deepest unexplored condition of predicate,
Path Predicate Prefix to solve :
afc.c: -140 input[0].x_arr[10]>-1.000000
afc.c: -142 ((unsigned char)input[0].float_state_arr[3])=0
afc.c: -146 (input[0].float_state_arr[0]+0.010000)<10.000000
afc.c: +148 ((unsigned char)input[0].float_state_arr[5])<>0
afc.c: +151 ((unsigned char)input[0].float_state_arr[4])<>0
afc.c: -158 input[0].x_arr[8]<50.000000
afc.c: -160 0=0
afc.c: -160b 1<>0
afc.c: -161 0=0
afc.c: +162 1<>0
afc.c: -162b 0=0
afc.c: +182 0=0
afc.c: -191 0=0
afc.c: -195 (1.000000+((0.040000*(input[0].x_arr[10]+-14.700000))+(((0.140000*(input[0].x_arr[10]+-14.700000))*0.010000)+input[0].float_state_arr[1])))=<100.000000
afc.c: -197 (1.000000+((0.040000*(input[0].x_arr[10]+-14.700000))+(((0.140000*(input[0].x_arr[10]+-14.700000))*0.010000)+input[0].float_state_arr[1])))>=0.000000
afc.c: -205 (((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))/14.700000)*(1.000000+((0.040000*(input[0].x_arr[10]+-14.700000))+(((0.140000*(input[0].x_arr[10]+-14.700000))*0.010000)+input[0].float_state_arr[1]))))=<1.660000
afc.c: -207 (((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))/14.700000)*(1.000000+((0.040000*(input[0].x_arr[10]+-14.700000))+(((0.140000*(input[0].x_arr[10]+-14.700000))*0.010000)+input[0].float_state_arr[1]))))>=0.130000
Path Prefix to cover :
afc.c
-140 -142 -146 +148 +151 -158 -160 -160b -161 +162 -162b +182 -191 -195 -197 -205 -207


TEST CASE 40

Dimensions:
input__controller = 1;
input__controller[0].input_arr = 1;
input__controller[0].int_state_arr = 0;
input__controller[0].float_state_arr = 7;
input__controller[0].x_arr = 13;
ret_val__controller = 1;
ret_val__controller[0].int_state_arr = 0;
ret_val__controller[0].float_state_arr = 7;
ret_val__controller[0].output_arr = 3;

Other input values:
input__controller[0].input_arr[0] = -423.000000;
input__controller[0].float_state_arr[0] = -371.000000;
input__controller[0].float_state_arr[1] = -0.880000;
input__controller[0].float_state_arr[2] = -99.000000;
input__controller[0].float_state_arr[3] = -0.400000;
input__controller[0].float_state_arr[4] = -193.000000;
input__controller[0].float_state_arr[5] = -384.000000;
input__controller[0].float_state_arr[6] = -73.000000;
input__controller[0].x_arr[0] = -493.000000;
input__controller[0].x_arr[1] = 170.000000;
input__controller[0].x_arr[2] = -8.000000;
input__controller[0].x_arr[3] = -463.000000;
input__controller[0].x_arr[4] = -387.000000;
input__controller[0].x_arr[5] = -245.000000;
input__controller[0].x_arr[6] = 150.000000;
input__controller[0].x_arr[7] = -0.599587;
input__controller[0].x_arr[8] = -478.000000;
input__controller[0].x_arr[9] = 203.000000;
input__controller[0].x_arr[10] = 14.700000;
input__controller[0].x_arr[11] = 173.000000;
input__controller[0].x_arr[12] = -343.000000;
ret_val__controller[0].float_state_arr[0] = 397.000000;
ret_val__controller[0].float_state_arr[1] = -241.000000;
ret_val__controller[0].float_state_arr[2] = -268.000000;
ret_val__controller[0].float_state_arr[3] = -365.000000;
ret_val__controller[0].float_state_arr[4] = -94.000000;
ret_val__controller[0].float_state_arr[5] = -68.000000;
ret_val__controller[0].float_state_arr[6] = -139.000000;
ret_val__controller[0].output_arr[0] = 438.000000;
ret_val__controller[0].output_arr[1] = -491.000000;
ret_val__controller[0].output_arr[2] = -16.000000;

Result:
unknown

Path Covered :
afc.c
-140 -142 -146 +148 +151 -158 -160 -160b -161 +162 -162b +182 -191 -195 -197 -205 -207


Path Predicate for case 40:
afc.c: -140 input[0].x_arr[10]>-1.000000
afc.c: -142 ((unsigned char)input[0].float_state_arr[3])=0
afc.c: -146 (input[0].float_state_arr[0]+0.010000)<10.000000
afc.c: +148 ((unsigned char)input[0].float_state_arr[5])<>0
afc.c: +151 ((unsigned char)input[0].float_state_arr[4])<>0
afc.c: -158 input[0].x_arr[8]<50.000000
afc.c: -160 0=0
afc.c: -160b 1<>0
afc.c: -161 0=0
afc.c: +162 1<>0
afc.c: -162b 0=0
afc.c: +182 0=0
afc.c: -191 0=0
afc.c: -195 (1.000000+((0.040000*(input[0].x_arr[10]+-14.700000))+(((0.140000*(input[0].x_arr[10]+-14.700000))*0.010000)+input[0].float_state_arr[1])))=<100.000000
afc.c: -197 (1.000000+((0.040000*(input[0].x_arr[10]+-14.700000))+(((0.140000*(input[0].x_arr[10]+-14.700000))*0.010000)+input[0].float_state_arr[1])))>=0.000000
afc.c: -205 (((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))/14.700000)*(1.000000+((0.040000*(input[0].x_arr[10]+-14.700000))+(((0.140000*(input[0].x_arr[10]+-14.700000))*0.010000)+input[0].float_state_arr[1]))))=<1.660000
afc.c: -207 (((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))/14.700000)*(1.000000+((0.040000*(input[0].x_arr[10]+-14.700000))+(((0.140000*(input[0].x_arr[10]+-14.700000))*0.010000)+input[0].float_state_arr[1]))))>=0.130000

Simplified Path Predicate for case 40:
input[0].x_arr[10]>-1.000000 AND
((unsigned char)input[0].float_state_arr[3])=0 AND
(input[0].float_state_arr[0]+0.010000)<10.000000 AND
((unsigned char)input[0].float_state_arr[5])<>0 AND
((unsigned char)input[0].float_state_arr[4])<>0 AND
input[0].x_arr[8]<50.000000 AND
(1.000000+((0.040000*(input[0].x_arr[10]+-14.700000))+(((0.140000*(input[0].x_arr[10]+-14.700000))*0.010000)+input[0].float_state_arr[1])))=<100.000000 AND
(1.000000+((0.040000*(input[0].x_arr[10]+-14.700000))+(((0.140000*(input[0].x_arr[10]+-14.700000))*0.010000)+input[0].float_state_arr[1])))>=0.000000 AND
(((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))/14.700000)*(1.000000+((0.040000*(input[0].x_arr[10]+-14.700000))+(((0.140000*(input[0].x_arr[10]+-14.700000))*0.010000)+input[0].float_state_arr[1]))))=<1.660000 AND
(((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))/14.700000)*(1.000000+((0.040000*(input[0].x_arr[10]+-14.700000))+(((0.140000*(input[0].x_arr[10]+-14.700000))*0.010000)+input[0].float_state_arr[1]))))>=0.130000

Output Values for case 40: (Symbolic,Concrete)
return value = 0, 0
ret_val[0].float_state_arr[0] = (input[0].float_state_arr[0]+0.010000), -370.990000
ret_val[0].float_state_arr[1] = (((0.140000*(input[0].x_arr[10]+-14.700000))*0.010000)+input[0].float_state_arr[1]), -0.880000
ret_val[0].float_state_arr[2] = (input[0].float_state_arr[2]+(((input[0].x_arr[9]+-((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))))*0.413280)*0.010000)), -99.000000
ret_val[0].float_state_arr[3] = 0.000000, 0.000000
ret_val[0].float_state_arr[4] = 0.000000, 0.000000
ret_val[0].float_state_arr[5] = 1.000000, 1.000000
ret_val[0].float_state_arr[6] = ((0.040000*(input[0].x_arr[10]+-14.700000))+(((0.140000*(input[0].x_arr[10]+-14.700000))*0.010000)+input[0].float_state_arr[1])), -0.880000
ret_val[0].output_arr[0] = (((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))/14.700000)*(1.000000+((0.040000*(input[0].x_arr[10]+-14.700000))+(((0.140000*(input[0].x_arr[10]+-14.700000))*0.010000)+input[0].float_state_arr[1])))), 1.657143
ret_val[0].output_arr[1] = 0.000000, 0.000000
ret_val[0].output_arr[2] = 14.700000, 14.700000

to explore negation deepest unexplored condition of predicate,
Path Predicate Prefix to solve :
afc.c: -140 input[0].x_arr[10]>-1.000000
afc.c: -142 ((unsigned char)input[0].float_state_arr[3])=0
afc.c: -146 (input[0].float_state_arr[0]+0.010000)<10.000000
afc.c: +148 ((unsigned char)input[0].float_state_arr[5])<>0
afc.c: +151 ((unsigned char)input[0].float_state_arr[4])<>0
afc.c: -158 input[0].x_arr[8]<50.000000
afc.c: -160 0=0
afc.c: -160b 1<>0
afc.c: -161 0=0
afc.c: +162 1<>0
afc.c: -162b 0=0
afc.c: +182 0=0
afc.c: -191 0=0
afc.c: +195 (1.000000+((0.040000*(input[0].x_arr[10]+-14.700000))+(((0.140000*(input[0].x_arr[10]+-14.700000))*0.010000)+input[0].float_state_arr[1])))>100.000000
Path Prefix to cover :
afc.c
-140 -142 -146 +148 +151 -158 -160 -160b -161 +162 -162b +182 -191 +195


TEST CASE 41

Dimensions:
input__controller = 1;
input__controller[0].input_arr = 1;
input__controller[0].int_state_arr = 0;
input__controller[0].float_state_arr = 7;
input__controller[0].x_arr = 13;
ret_val__controller = 1;
ret_val__controller[0].int_state_arr = 0;
ret_val__controller[0].float_state_arr = 7;
ret_val__controller[0].output_arr = 3;

Other input values:
input__controller[0].input_arr[0] = -423.000000;
input__controller[0].float_state_arr[0] = -371.000000;
input__controller[0].float_state_arr[1] = 942.000000;
input__controller[0].float_state_arr[2] = -292.000000;
input__controller[0].float_state_arr[3] = -0.400000;
input__controller[0].float_state_arr[4] = -193.000000;
input__controller[0].float_state_arr[5] = -384.000000;
input__controller[0].float_state_arr[6] = -73.000000;
input__controller[0].x_arr[0] = -493.000000;
input__controller[0].x_arr[1] = 170.000000;
input__controller[0].x_arr[2] = -8.000000;
input__controller[0].x_arr[3] = -463.000000;
input__controller[0].x_arr[4] = -387.000000;
input__controller[0].x_arr[5] = -245.000000;
input__controller[0].x_arr[6] = 150.000000;
input__controller[0].x_arr[7] = -475.000000;
input__controller[0].x_arr[8] = -478.000000;
input__controller[0].x_arr[9] = -156.000000;
input__controller[0].x_arr[10] = 14.700000;
input__controller[0].x_arr[11] = 173.000000;
input__controller[0].x_arr[12] = -343.000000;
ret_val__controller[0].float_state_arr[0] = 397.000000;
ret_val__controller[0].float_state_arr[1] = -241.000000;
ret_val__controller[0].float_state_arr[2] = -268.000000;
ret_val__controller[0].float_state_arr[3] = -365.000000;
ret_val__controller[0].float_state_arr[4] = -94.000000;
ret_val__controller[0].float_state_arr[5] = -68.000000;
ret_val__controller[0].float_state_arr[6] = -139.000000;
ret_val__controller[0].output_arr[0] = 438.000000;
ret_val__controller[0].output_arr[1] = -491.000000;
ret_val__controller[0].output_arr[2] = -16.000000;

Result:
unknown

Path Covered :
afc.c
-140 -142 -146 +148 +151 -158 -160 -160b -161 +162 -162b +182 -191 +195 +205


Path Predicate for case 41:
afc.c: -140 input[0].x_arr[10]>-1.000000
afc.c: -142 ((unsigned char)input[0].float_state_arr[3])=0
afc.c: -146 (input[0].float_state_arr[0]+0.010000)<10.000000
afc.c: +148 ((unsigned char)input[0].float_state_arr[5])<>0
afc.c: +151 ((unsigned char)input[0].float_state_arr[4])<>0
afc.c: -158 input[0].x_arr[8]<50.000000
afc.c: -160 0=0
afc.c: -160b 1<>0
afc.c: -161 0=0
afc.c: +162 1<>0
afc.c: -162b 0=0
afc.c: +182 0=0
afc.c: -191 0=0
afc.c: +195 (1.000000+((0.040000*(input[0].x_arr[10]+-14.700000))+(((0.140000*(input[0].x_arr[10]+-14.700000))*0.010000)+input[0].float_state_arr[1])))>100.000000
afc.c: +205 (((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))/14.700000)*100.000000)>1.660000

Simplified Path Predicate for case 41:
input[0].x_arr[10]>-1.000000 AND
((unsigned char)input[0].float_state_arr[3])=0 AND
(input[0].float_state_arr[0]+0.010000)<10.000000 AND
((unsigned char)input[0].float_state_arr[5])<>0 AND
((unsigned char)input[0].float_state_arr[4])<>0 AND
input[0].x_arr[8]<50.000000 AND
(1.000000+((0.040000*(input[0].x_arr[10]+-14.700000))+(((0.140000*(input[0].x_arr[10]+-14.700000))*0.010000)+input[0].float_state_arr[1])))>100.000000 AND
(((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))/14.700000)*100.000000)>1.660000

Output Values for case 41: (Symbolic,Concrete)
return value = 0, 0
ret_val[0].float_state_arr[0] = (input[0].float_state_arr[0]+0.010000), -370.990000
ret_val[0].float_state_arr[1] = (((0.140000*(input[0].x_arr[10]+-14.700000))*0.010000)+input[0].float_state_arr[1]), 942.000000
ret_val[0].float_state_arr[2] = (input[0].float_state_arr[2]+(((input[0].x_arr[9]+-((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))))*0.413280)*0.010000)), -5957.592441
ret_val[0].float_state_arr[3] = 0.000000, 0.000000
ret_val[0].float_state_arr[4] = 0.000000, 0.000000
ret_val[0].float_state_arr[5] = 1.000000, 1.000000
ret_val[0].float_state_arr[6] = ((0.040000*(input[0].x_arr[10]+-14.700000))+(((0.140000*(input[0].x_arr[10]+-14.700000))*0.010000)+input[0].float_state_arr[1])), 942.000000
ret_val[0].output_arr[0] = 1.660000, 1.660000
ret_val[0].output_arr[1] = 0.000000, 0.000000
ret_val[0].output_arr[2] = 14.700000, 14.700000

to explore negation deepest unexplored condition of predicate,
Path Predicate Prefix to solve :
afc.c: -140 input[0].x_arr[10]>-1.000000
afc.c: -142 ((unsigned char)input[0].float_state_arr[3])=0
afc.c: -146 (input[0].float_state_arr[0]+0.010000)<10.000000
afc.c: +148 ((unsigned char)input[0].float_state_arr[5])<>0
afc.c: +151 ((unsigned char)input[0].float_state_arr[4])<>0
afc.c: -158 input[0].x_arr[8]<50.000000
afc.c: -160 0=0
afc.c: -160b 1<>0
afc.c: -161 0=0
afc.c: +162 1<>0
afc.c: -162b 0=0
afc.c: +182 0=0
afc.c: -191 0=0
afc.c: +195 (1.000000+((0.040000*(input[0].x_arr[10]+-14.700000))+(((0.140000*(input[0].x_arr[10]+-14.700000))*0.010000)+input[0].float_state_arr[1])))>100.000000
afc.c: -205 (((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))/14.700000)*100.000000)=<1.660000
Path Prefix to cover :
afc.c
-140 -142 -146 +148 +151 -158 -160 -160b -161 +162 -162b +182 -191 +195 -205


TEST CASE 42

Dimensions:
input__controller = 1;
input__controller[0].input_arr = 1;
input__controller[0].int_state_arr = 0;
input__controller[0].float_state_arr = 7;
input__controller[0].x_arr = 13;
ret_val__controller = 1;
ret_val__controller[0].int_state_arr = 0;
ret_val__controller[0].float_state_arr = 7;
ret_val__controller[0].output_arr = 3;

Other input values:
input__controller[0].input_arr[0] = -423.000000;
input__controller[0].float_state_arr[0] = -371.000000;
input__controller[0].float_state_arr[1] = 942.000000;
input__controller[0].float_state_arr[2] = 116.000000;
input__controller[0].float_state_arr[3] = -0.400000;
input__controller[0].float_state_arr[4] = -193.000000;
input__controller[0].float_state_arr[5] = -384.000000;
input__controller[0].float_state_arr[6] = -73.000000;
input__controller[0].x_arr[0] = -493.000000;
input__controller[0].x_arr[1] = 170.000000;
input__controller[0].x_arr[2] = -8.000000;
input__controller[0].x_arr[3] = -463.000000;
input__controller[0].x_arr[4] = -387.000000;
input__controller[0].x_arr[5] = -245.000000;
input__controller[0].x_arr[6] = 150.000000;
input__controller[0].x_arr[7] = 0.000000;
input__controller[0].x_arr[8] = -478.000000;
input__controller[0].x_arr[9] = -0.366000;
input__controller[0].x_arr[10] = 14.700000;
input__controller[0].x_arr[11] = 173.000000;
input__controller[0].x_arr[12] = -343.000000;
ret_val__controller[0].float_state_arr[0] = 397.000000;
ret_val__controller[0].float_state_arr[1] = -241.000000;
ret_val__controller[0].float_state_arr[2] = -268.000000;
ret_val__controller[0].float_state_arr[3] = -365.000000;
ret_val__controller[0].float_state_arr[4] = -94.000000;
ret_val__controller[0].float_state_arr[5] = -68.000000;
ret_val__controller[0].float_state_arr[6] = -139.000000;
ret_val__controller[0].output_arr[0] = 438.000000;
ret_val__controller[0].output_arr[1] = -491.000000;
ret_val__controller[0].output_arr[2] = -16.000000;

Result:
unknown

Path Covered :
afc.c
-140 -142 -146 +148 +151 -158 -160 -160b -161 +162 -162b +182 -191 +195 -205 +207


Path Predicate for case 42:
afc.c: -140 input[0].x_arr[10]>-1.000000
afc.c: -142 ((unsigned char)input[0].float_state_arr[3])=0
afc.c: -146 (input[0].float_state_arr[0]+0.010000)<10.000000
afc.c: +148 ((unsigned char)input[0].float_state_arr[5])<>0
afc.c: +151 ((unsigned char)input[0].float_state_arr[4])<>0
afc.c: -158 input[0].x_arr[8]<50.000000
afc.c: -160 0=0
afc.c: -160b 1<>0
afc.c: -161 0=0
afc.c: +162 1<>0
afc.c: -162b 0=0
afc.c: +182 0=0
afc.c: -191 0=0
afc.c: +195 (1.000000+((0.040000*(input[0].x_arr[10]+-14.700000))+(((0.140000*(input[0].x_arr[10]+-14.700000))*0.010000)+input[0].float_state_arr[1])))>100.000000
afc.c: -205 (((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))/14.700000)*100.000000)=<1.660000
afc.c: +207 (((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))/14.700000)*100.000000)<0.130000

Simplified Path Predicate for case 42:
input[0].x_arr[10]>-1.000000 AND
((unsigned char)input[0].float_state_arr[3])=0 AND
(input[0].float_state_arr[0]+0.010000)<10.000000 AND
((unsigned char)input[0].float_state_arr[5])<>0 AND
((unsigned char)input[0].float_state_arr[4])<>0 AND
input[0].x_arr[8]<50.000000 AND
(1.000000+((0.040000*(input[0].x_arr[10]+-14.700000))+(((0.140000*(input[0].x_arr[10]+-14.700000))*0.010000)+input[0].float_state_arr[1])))>100.000000 AND
(((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))/14.700000)*100.000000)=<1.660000 AND
(((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))/14.700000)*100.000000)<0.130000

Output Values for case 42: (Symbolic,Concrete)
return value = 0, 0
ret_val[0].float_state_arr[0] = (input[0].float_state_arr[0]+0.010000), -370.990000
ret_val[0].float_state_arr[1] = (((0.140000*(input[0].x_arr[10]+-14.700000))*0.010000)+input[0].float_state_arr[1]), 942.000000
ret_val[0].float_state_arr[2] = (input[0].float_state_arr[2]+(((input[0].x_arr[9]+-((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))))*0.413280)*0.010000)), 116.000000
ret_val[0].float_state_arr[3] = 0.000000, 0.000000
ret_val[0].float_state_arr[4] = 0.000000, 0.000000
ret_val[0].float_state_arr[5] = 1.000000, 1.000000
ret_val[0].float_state_arr[6] = ((0.040000*(input[0].x_arr[10]+-14.700000))+(((0.140000*(input[0].x_arr[10]+-14.700000))*0.010000)+input[0].float_state_arr[1])), 942.000000
ret_val[0].output_arr[0] = 0.130000, 0.130000
ret_val[0].output_arr[1] = 0.000000, 0.000000
ret_val[0].output_arr[2] = 14.700000, 14.700000

to explore negation deepest unexplored condition of predicate,
Path Predicate Prefix to solve :
afc.c: -140 input[0].x_arr[10]>-1.000000
afc.c: -142 ((unsigned char)input[0].float_state_arr[3])=0
afc.c: -146 (input[0].float_state_arr[0]+0.010000)<10.000000
afc.c: +148 ((unsigned char)input[0].float_state_arr[5])<>0
afc.c: +151 ((unsigned char)input[0].float_state_arr[4])<>0
afc.c: -158 input[0].x_arr[8]<50.000000
afc.c: -160 0=0
afc.c: -160b 1<>0
afc.c: -161 0=0
afc.c: +162 1<>0
afc.c: -162b 0=0
afc.c: +182 0=0
afc.c: -191 0=0
afc.c: +195 (1.000000+((0.040000*(input[0].x_arr[10]+-14.700000))+(((0.140000*(input[0].x_arr[10]+-14.700000))*0.010000)+input[0].float_state_arr[1])))>100.000000
afc.c: -205 (((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))/14.700000)*100.000000)=<1.660000
afc.c: -207 (((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))/14.700000)*100.000000)>=0.130000
Path Prefix to cover :
afc.c
-140 -142 -146 +148 +151 -158 -160 -160b -161 +162 -162b +182 -191 +195 -205 -207
Supposed infeasible (with the given preconditions) (constraint resolution timeout - all_vars_negated_ctr)

to explore negation deepest unexplored condition of predicate,
Path Predicate Prefix to solve :
afc.c: -140 input[0].x_arr[10]>-1.000000
afc.c: -142 ((unsigned char)input[0].float_state_arr[3])=0
afc.c: -146 (input[0].float_state_arr[0]+0.010000)<10.000000
afc.c: +148 ((unsigned char)input[0].float_state_arr[5])<>0
afc.c: +151 ((unsigned char)input[0].float_state_arr[4])<>0
afc.c: -158 input[0].x_arr[8]<50.000000
afc.c: -160 0=0
afc.c: -160b 1<>0
afc.c: -161 0=0
afc.c: +162 1<>0
afc.c: -162b 0=0
afc.c: +182 0=0
afc.c: +191 0<>0
Path Prefix to cover :
afc.c
-140 -142 -146 +148 +151 -158 -160 -160b -161 +162 -162b +182 +191
trivially infeasible

to explore negation deepest unexplored condition of predicate,
Path Predicate Prefix to solve :
afc.c: -140 input[0].x_arr[10]>-1.000000
afc.c: -142 ((unsigned char)input[0].float_state_arr[3])=0
afc.c: -146 (input[0].float_state_arr[0]+0.010000)<10.000000
afc.c: +148 ((unsigned char)input[0].float_state_arr[5])<>0
afc.c: +151 ((unsigned char)input[0].float_state_arr[4])<>0
afc.c: -158 input[0].x_arr[8]<50.000000
afc.c: -160 0=0
afc.c: -160b 1<>0
afc.c: -161 0=0
afc.c: +162 1<>0
afc.c: -162b 0=0
afc.c: -182 0<>0
Path Prefix to cover :
afc.c
-140 -142 -146 +148 +151 -158 -160 -160b -161 +162 -162b -182
trivially infeasible

to explore negation deepest unexplored condition of predicate,
Path Predicate Prefix to solve :
afc.c: -140 input[0].x_arr[10]>-1.000000
afc.c: -142 ((unsigned char)input[0].float_state_arr[3])=0
afc.c: -146 (input[0].float_state_arr[0]+0.010000)<10.000000
afc.c: +148 ((unsigned char)input[0].float_state_arr[5])<>0
afc.c: +151 ((unsigned char)input[0].float_state_arr[4])<>0
afc.c: -158 input[0].x_arr[8]<50.000000
afc.c: -160 0=0
afc.c: -160b 1<>0
afc.c: -161 0=0
afc.c: +162 1<>0
afc.c: +162b 0<>0
Path Prefix to cover :
afc.c
-140 -142 -146 +148 +151 -158 -160 -160b -161 +162 +162b
trivially infeasible

to explore negation deepest unexplored condition of predicate,
Path Predicate Prefix to solve :
afc.c: -140 input[0].x_arr[10]>-1.000000
afc.c: -142 ((unsigned char)input[0].float_state_arr[3])=0
afc.c: -146 (input[0].float_state_arr[0]+0.010000)<10.000000
afc.c: +148 ((unsigned char)input[0].float_state_arr[5])<>0
afc.c: +151 ((unsigned char)input[0].float_state_arr[4])<>0
afc.c: -158 input[0].x_arr[8]<50.000000
afc.c: -160 0=0
afc.c: -160b 1<>0
afc.c: -161 0=0
afc.c: -162 1=0
Path Prefix to cover :
afc.c
-140 -142 -146 +148 +151 -158 -160 -160b -161 -162
trivially infeasible

to explore negation deepest unexplored condition of predicate,
Path Predicate Prefix to solve :
afc.c: -140 input[0].x_arr[10]>-1.000000
afc.c: -142 ((unsigned char)input[0].float_state_arr[3])=0
afc.c: -146 (input[0].float_state_arr[0]+0.010000)<10.000000
afc.c: +148 ((unsigned char)input[0].float_state_arr[5])<>0
afc.c: +151 ((unsigned char)input[0].float_state_arr[4])<>0
afc.c: -158 input[0].x_arr[8]<50.000000
afc.c: -160 0=0
afc.c: -160b 1<>0
afc.c: +161 0<>0
Path Prefix to cover :
afc.c
-140 -142 -146 +148 +151 -158 -160 -160b +161
trivially infeasible

to explore negation deepest unexplored condition of predicate,
Path Predicate Prefix to solve :
afc.c: -140 input[0].x_arr[10]>-1.000000
afc.c: -142 ((unsigned char)input[0].float_state_arr[3])=0
afc.c: -146 (input[0].float_state_arr[0]+0.010000)<10.000000
afc.c: +148 ((unsigned char)input[0].float_state_arr[5])<>0
afc.c: +151 ((unsigned char)input[0].float_state_arr[4])<>0
afc.c: -158 input[0].x_arr[8]<50.000000
afc.c: -160 0=0
afc.c: +160b 1=0
Path Prefix to cover :
afc.c
-140 -142 -146 +148 +151 -158 -160 +160b
trivially infeasible

to explore negation deepest unexplored condition of predicate,
Path Predicate Prefix to solve :
afc.c: -140 input[0].x_arr[10]>-1.000000
afc.c: -142 ((unsigned char)input[0].float_state_arr[3])=0
afc.c: -146 (input[0].float_state_arr[0]+0.010000)<10.000000
afc.c: +148 ((unsigned char)input[0].float_state_arr[5])<>0
afc.c: +151 ((unsigned char)input[0].float_state_arr[4])<>0
afc.c: -158 input[0].x_arr[8]<50.000000
afc.c: +160 0<>0
Path Prefix to cover :
afc.c
-140 -142 -146 +148 +151 -158 +160
trivially infeasible

to explore negation deepest unexplored condition of predicate,
Path Predicate Prefix to solve :
afc.c: -140 input[0].x_arr[10]>-1.000000
afc.c: -142 ((unsigned char)input[0].float_state_arr[3])=0
afc.c: -146 (input[0].float_state_arr[0]+0.010000)<10.000000
afc.c: +148 ((unsigned char)input[0].float_state_arr[5])<>0
afc.c: +151 ((unsigned char)input[0].float_state_arr[4])<>0
afc.c: +158 input[0].x_arr[8]>=50.000000
Path Prefix to cover :
afc.c
-140 -142 -146 +148 +151 +158


TEST CASE 44

Dimensions:
input__controller = 1;
input__controller[0].input_arr = 1;
input__controller[0].int_state_arr = 0;
input__controller[0].float_state_arr = 7;
input__controller[0].x_arr = 13;
ret_val__controller = 1;
ret_val__controller[0].int_state_arr = 0;
ret_val__controller[0].float_state_arr = 7;
ret_val__controller[0].output_arr = 3;

Other input values:
input__controller[0].input_arr[0] = -423.000000;
input__controller[0].float_state_arr[0] = -371.000000;
input__controller[0].float_state_arr[1] = -78.000000;
input__controller[0].float_state_arr[2] = -292.000000;
input__controller[0].float_state_arr[3] = -0.400000;
input__controller[0].float_state_arr[4] = -193.000000;
input__controller[0].float_state_arr[5] = -384.000000;
input__controller[0].float_state_arr[6] = -73.000000;
input__controller[0].x_arr[0] = -493.000000;
input__controller[0].x_arr[1] = 170.000000;
input__controller[0].x_arr[2] = -8.000000;
input__controller[0].x_arr[3] = -463.000000;
input__controller[0].x_arr[4] = -387.000000;
input__controller[0].x_arr[5] = -245.000000;
input__controller[0].x_arr[6] = 150.000000;
input__controller[0].x_arr[7] = -475.000000;
input__controller[0].x_arr[8] = 648.000000;
input__controller[0].x_arr[9] = -156.000000;
input__controller[0].x_arr[10] = 417.000000;
input__controller[0].x_arr[11] = 173.000000;
input__controller[0].x_arr[12] = -343.000000;
ret_val__controller[0].float_state_arr[0] = 397.000000;
ret_val__controller[0].float_state_arr[1] = -241.000000;
ret_val__controller[0].float_state_arr[2] = -268.000000;
ret_val__controller[0].float_state_arr[3] = -365.000000;
ret_val__controller[0].float_state_arr[4] = -94.000000;
ret_val__controller[0].float_state_arr[5] = -68.000000;
ret_val__controller[0].float_state_arr[6] = -139.000000;
ret_val__controller[0].output_arr[0] = 438.000000;
ret_val__controller[0].output_arr[1] = -491.000000;
ret_val__controller[0].output_arr[2] = -16.000000;

Result:
unknown

Path Covered :
afc.c
-140 -142 -146 +148 +151 +158 -160 -160b +161 +162 +162b -182 +191 +205


Path Predicate for case 44:
afc.c: -140 input[0].x_arr[10]>-1.000000
afc.c: -142 ((unsigned char)input[0].float_state_arr[3])=0
afc.c: -146 (input[0].float_state_arr[0]+0.010000)<10.000000
afc.c: +148 ((unsigned char)input[0].float_state_arr[5])<>0
afc.c: +151 ((unsigned char)input[0].float_state_arr[4])<>0
afc.c: +158 input[0].x_arr[8]>=50.000000
afc.c: -160 0=0
afc.c: -160b 1<>0
afc.c: +161 1<>0
afc.c: +162 1<>0
afc.c: +162b 1<>0
afc.c: -182 1<>0
afc.c: +191 1<>0
afc.c: +205 ((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))/12.500000)>1.660000

Simplified Path Predicate for case 44:
input[0].x_arr[10]>-1.000000 AND
((unsigned char)input[0].float_state_arr[3])=0 AND
(input[0].float_state_arr[0]+0.010000)<10.000000 AND
((unsigned char)input[0].float_state_arr[5])<>0 AND
((unsigned char)input[0].float_state_arr[4])<>0 AND
input[0].x_arr[8]>=50.000000 AND
((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))/12.500000)>1.660000

Output Values for case 44: (Symbolic,Concrete)
return value = 0, 0
ret_val[0].float_state_arr[0] = (input[0].float_state_arr[0]+0.010000), -370.990000
ret_val[0].float_state_arr[1] = input[0].float_state_arr[1], -78.000000
ret_val[0].float_state_arr[2] = (input[0].float_state_arr[2]+(((input[0].x_arr[9]+-((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))))*0.413280)*0.010000)), -5957.592441
ret_val[0].float_state_arr[3] = 0.000000, 0.000000
ret_val[0].float_state_arr[4] = 1.000000, 1.000000
ret_val[0].float_state_arr[5] = 1.000000, 1.000000
ret_val[0].float_state_arr[6] = input[0].float_state_arr[6], -73.000000
ret_val[0].output_arr[0] = 1.660000, 1.660000
ret_val[0].output_arr[1] = 1.000000, 1.000000
ret_val[0].output_arr[2] = 12.500000, 12.500000

to explore negation deepest unexplored condition of predicate,
Path Predicate Prefix to solve :
afc.c: -140 input[0].x_arr[10]>-1.000000
afc.c: -142 ((unsigned char)input[0].float_state_arr[3])=0
afc.c: -146 (input[0].float_state_arr[0]+0.010000)<10.000000
afc.c: +148 ((unsigned char)input[0].float_state_arr[5])<>0
afc.c: +151 ((unsigned char)input[0].float_state_arr[4])<>0
afc.c: +158 input[0].x_arr[8]>=50.000000
afc.c: -160 0=0
afc.c: -160b 1<>0
afc.c: +161 1<>0
afc.c: +162 1<>0
afc.c: +162b 1<>0
afc.c: -182 1<>0
afc.c: +191 1<>0
afc.c: -205 ((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))/12.500000)=<1.660000
Path Prefix to cover :
afc.c
-140 -142 -146 +148 +151 +158 -160 -160b +161 +162 +162b -182 +191 -205


TEST CASE 45

Dimensions:
input__controller = 1;
input__controller[0].input_arr = 1;
input__controller[0].int_state_arr = 0;
input__controller[0].float_state_arr = 7;
input__controller[0].x_arr = 13;
ret_val__controller = 1;
ret_val__controller[0].int_state_arr = 0;
ret_val__controller[0].float_state_arr = 7;
ret_val__controller[0].output_arr = 3;

Other input values:
input__controller[0].input_arr[0] = -423.000000;
input__controller[0].float_state_arr[0] = -371.000000;
input__controller[0].float_state_arr[1] = -78.000000;
input__controller[0].float_state_arr[2] = -427.000000;
input__controller[0].float_state_arr[3] = -0.400000;
input__controller[0].float_state_arr[4] = -193.000000;
input__controller[0].float_state_arr[5] = -384.000000;
input__controller[0].float_state_arr[6] = -73.000000;
input__controller[0].x_arr[0] = -493.000000;
input__controller[0].x_arr[1] = 170.000000;
input__controller[0].x_arr[2] = -8.000000;
input__controller[0].x_arr[3] = -463.000000;
input__controller[0].x_arr[4] = -387.000000;
input__controller[0].x_arr[5] = -245.000000;
input__controller[0].x_arr[6] = 150.000000;
input__controller[0].x_arr[7] = 0.000000;
input__controller[0].x_arr[8] = 648.000000;
input__controller[0].x_arr[9] = -0.366000;
input__controller[0].x_arr[10] = 417.000000;
input__controller[0].x_arr[11] = 173.000000;
input__controller[0].x_arr[12] = -343.000000;
ret_val__controller[0].float_state_arr[0] = 397.000000;
ret_val__controller[0].float_state_arr[1] = -241.000000;
ret_val__controller[0].float_state_arr[2] = -268.000000;
ret_val__controller[0].float_state_arr[3] = -365.000000;
ret_val__controller[0].float_state_arr[4] = -94.000000;
ret_val__controller[0].float_state_arr[5] = -68.000000;
ret_val__controller[0].float_state_arr[6] = -139.000000;
ret_val__controller[0].output_arr[0] = 438.000000;
ret_val__controller[0].output_arr[1] = -491.000000;
ret_val__controller[0].output_arr[2] = -16.000000;

Result:
unknown

Path Covered :
afc.c
-140 -142 -146 +148 +151 +158 -160 -160b +161 +162 +162b -182 +191 -205 +207


Path Predicate for case 45:
afc.c: -140 input[0].x_arr[10]>-1.000000
afc.c: -142 ((unsigned char)input[0].float_state_arr[3])=0
afc.c: -146 (input[0].float_state_arr[0]+0.010000)<10.000000
afc.c: +148 ((unsigned char)input[0].float_state_arr[5])<>0
afc.c: +151 ((unsigned char)input[0].float_state_arr[4])<>0
afc.c: +158 input[0].x_arr[8]>=50.000000
afc.c: -160 0=0
afc.c: -160b 1<>0
afc.c: +161 1<>0
afc.c: +162 1<>0
afc.c: +162b 1<>0
afc.c: -182 1<>0
afc.c: +191 1<>0
afc.c: -205 ((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))/12.500000)=<1.660000
afc.c: +207 ((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))/12.500000)<0.130000

Simplified Path Predicate for case 45:
input[0].x_arr[10]>-1.000000 AND
((unsigned char)input[0].float_state_arr[3])=0 AND
(input[0].float_state_arr[0]+0.010000)<10.000000 AND
((unsigned char)input[0].float_state_arr[5])<>0 AND
((unsigned char)input[0].float_state_arr[4])<>0 AND
input[0].x_arr[8]>=50.000000 AND
((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))/12.500000)=<1.660000 AND
((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))/12.500000)<0.130000

Output Values for case 45: (Symbolic,Concrete)
return value = 0, 0
ret_val[0].float_state_arr[0] = (input[0].float_state_arr[0]+0.010000), -370.990000
ret_val[0].float_state_arr[1] = input[0].float_state_arr[1], -78.000000
ret_val[0].float_state_arr[2] = (input[0].float_state_arr[2]+(((input[0].x_arr[9]+-((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))))*0.413280)*0.010000)), -427.000000
ret_val[0].float_state_arr[3] = 0.000000, 0.000000
ret_val[0].float_state_arr[4] = 1.000000, 1.000000
ret_val[0].float_state_arr[5] = 1.000000, 1.000000
ret_val[0].float_state_arr[6] = input[0].float_state_arr[6], -73.000000
ret_val[0].output_arr[0] = 0.130000, 0.130000
ret_val[0].output_arr[1] = 1.000000, 1.000000
ret_val[0].output_arr[2] = 12.500000, 12.500000

to explore negation deepest unexplored condition of predicate,
Path Predicate Prefix to solve :
afc.c: -140 input[0].x_arr[10]>-1.000000
afc.c: -142 ((unsigned char)input[0].float_state_arr[3])=0
afc.c: -146 (input[0].float_state_arr[0]+0.010000)<10.000000
afc.c: +148 ((unsigned char)input[0].float_state_arr[5])<>0
afc.c: +151 ((unsigned char)input[0].float_state_arr[4])<>0
afc.c: +158 input[0].x_arr[8]>=50.000000
afc.c: -160 0=0
afc.c: -160b 1<>0
afc.c: +161 1<>0
afc.c: +162 1<>0
afc.c: +162b 1<>0
afc.c: -182 1<>0
afc.c: +191 1<>0
afc.c: -205 ((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))/12.500000)=<1.660000
afc.c: -207 ((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))/12.500000)>=0.130000
Path Prefix to cover :
afc.c
-140 -142 -146 +148 +151 +158 -160 -160b +161 +162 +162b -182 +191 -205 -207


TEST CASE 46

Dimensions:
input__controller = 1;
input__controller[0].input_arr = 1;
input__controller[0].int_state_arr = 0;
input__controller[0].float_state_arr = 7;
input__controller[0].x_arr = 13;
ret_val__controller = 1;
ret_val__controller[0].int_state_arr = 0;
ret_val__controller[0].float_state_arr = 7;
ret_val__controller[0].output_arr = 3;

Other input values:
input__controller[0].input_arr[0] = -423.000000;
input__controller[0].float_state_arr[0] = -371.000000;
input__controller[0].float_state_arr[1] = -78.000000;
input__controller[0].float_state_arr[2] = 136.000000;
input__controller[0].float_state_arr[3] = -0.400000;
input__controller[0].float_state_arr[4] = -193.000000;
input__controller[0].float_state_arr[5] = -384.000000;
input__controller[0].float_state_arr[6] = -73.000000;
input__controller[0].x_arr[0] = -493.000000;
input__controller[0].x_arr[1] = 170.000000;
input__controller[0].x_arr[2] = -8.000000;
input__controller[0].x_arr[3] = -463.000000;
input__controller[0].x_arr[4] = -387.000000;
input__controller[0].x_arr[5] = -245.000000;
input__controller[0].x_arr[6] = 150.000000;
input__controller[0].x_arr[7] = 44934.112054;
input__controller[0].x_arr[8] = 648.000000;
input__controller[0].x_arr[9] = 7.000000;
input__controller[0].x_arr[10] = 417.000000;
input__controller[0].x_arr[11] = 173.000000;
input__controller[0].x_arr[12] = -343.000000;
ret_val__controller[0].float_state_arr[0] = 397.000000;
ret_val__controller[0].float_state_arr[1] = -241.000000;
ret_val__controller[0].float_state_arr[2] = -268.000000;
ret_val__controller[0].float_state_arr[3] = -365.000000;
ret_val__controller[0].float_state_arr[4] = -94.000000;
ret_val__controller[0].float_state_arr[5] = -68.000000;
ret_val__controller[0].float_state_arr[6] = -139.000000;
ret_val__controller[0].output_arr[0] = 438.000000;
ret_val__controller[0].output_arr[1] = -491.000000;
ret_val__controller[0].output_arr[2] = -16.000000;

Result:
unknown

Path Covered :
afc.c
-140 -142 -146 +148 +151 +158 -160 -160b +161 +162 +162b -182 +191 -205 -207


Path Predicate for case 46:
afc.c: -140 input[0].x_arr[10]>-1.000000
afc.c: -142 ((unsigned char)input[0].float_state_arr[3])=0
afc.c: -146 (input[0].float_state_arr[0]+0.010000)<10.000000
afc.c: +148 ((unsigned char)input[0].float_state_arr[5])<>0
afc.c: +151 ((unsigned char)input[0].float_state_arr[4])<>0
afc.c: +158 input[0].x_arr[8]>=50.000000
afc.c: -160 0=0
afc.c: -160b 1<>0
afc.c: +161 1<>0
afc.c: +162 1<>0
afc.c: +162b 1<>0
afc.c: -182 1<>0
afc.c: +191 1<>0
afc.c: -205 ((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))/12.500000)=<1.660000
afc.c: -207 ((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))/12.500000)>=0.130000

Simplified Path Predicate for case 46:
input[0].x_arr[10]>-1.000000 AND
((unsigned char)input[0].float_state_arr[3])=0 AND
(input[0].float_state_arr[0]+0.010000)<10.000000 AND
((unsigned char)input[0].float_state_arr[5])<>0 AND
((unsigned char)input[0].float_state_arr[4])<>0 AND
input[0].x_arr[8]>=50.000000 AND
((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))/12.500000)=<1.660000 AND
((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))/12.500000)>=0.130000

Output Values for case 46: (Symbolic,Concrete)
return value = 0, 0
ret_val[0].float_state_arr[0] = (input[0].float_state_arr[0]+0.010000), -370.990000
ret_val[0].float_state_arr[1] = input[0].float_state_arr[1], -78.000000
ret_val[0].float_state_arr[2] = (input[0].float_state_arr[2]+(((input[0].x_arr[9]+-((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))))*0.413280)*0.010000)), 136.000000
ret_val[0].float_state_arr[3] = 0.000000, 0.000000
ret_val[0].float_state_arr[4] = 1.000000, 1.000000
ret_val[0].float_state_arr[5] = 1.000000, 1.000000
ret_val[0].float_state_arr[6] = input[0].float_state_arr[6], -73.000000
ret_val[0].output_arr[0] = ((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))/12.500000), 0.560000
ret_val[0].output_arr[1] = 1.000000, 1.000000
ret_val[0].output_arr[2] = 12.500000, 12.500000

to explore negation deepest unexplored condition of predicate,
Path Predicate Prefix to solve :
afc.c: -140 input[0].x_arr[10]>-1.000000
afc.c: -142 ((unsigned char)input[0].float_state_arr[3])=0
afc.c: -146 (input[0].float_state_arr[0]+0.010000)<10.000000
afc.c: +148 ((unsigned char)input[0].float_state_arr[5])<>0
afc.c: +151 ((unsigned char)input[0].float_state_arr[4])<>0
afc.c: +158 input[0].x_arr[8]>=50.000000
afc.c: -160 0=0
afc.c: -160b 1<>0
afc.c: +161 1<>0
afc.c: +162 1<>0
afc.c: +162b 1<>0
afc.c: -182 1<>0
afc.c: -191 1=0
Path Prefix to cover :
afc.c
-140 -142 -146 +148 +151 +158 -160 -160b +161 +162 +162b -182 -191
trivially infeasible

to explore negation deepest unexplored condition of predicate,
Path Predicate Prefix to solve :
afc.c: -140 input[0].x_arr[10]>-1.000000
afc.c: -142 ((unsigned char)input[0].float_state_arr[3])=0
afc.c: -146 (input[0].float_state_arr[0]+0.010000)<10.000000
afc.c: +148 ((unsigned char)input[0].float_state_arr[5])<>0
afc.c: +151 ((unsigned char)input[0].float_state_arr[4])<>0
afc.c: +158 input[0].x_arr[8]>=50.000000
afc.c: -160 0=0
afc.c: -160b 1<>0
afc.c: +161 1<>0
afc.c: +162 1<>0
afc.c: +162b 1<>0
afc.c: +182 1=0
Path Prefix to cover :
afc.c
-140 -142 -146 +148 +151 +158 -160 -160b +161 +162 +162b +182
trivially infeasible

to explore negation deepest unexplored condition of predicate,
Path Predicate Prefix to solve :
afc.c: -140 input[0].x_arr[10]>-1.000000
afc.c: -142 ((unsigned char)input[0].float_state_arr[3])=0
afc.c: -146 (input[0].float_state_arr[0]+0.010000)<10.000000
afc.c: +148 ((unsigned char)input[0].float_state_arr[5])<>0
afc.c: +151 ((unsigned char)input[0].float_state_arr[4])<>0
afc.c: +158 input[0].x_arr[8]>=50.000000
afc.c: -160 0=0
afc.c: -160b 1<>0
afc.c: +161 1<>0
afc.c: +162 1<>0
afc.c: -162b 1=0
Path Prefix to cover :
afc.c
-140 -142 -146 +148 +151 +158 -160 -160b +161 +162 -162b
trivially infeasible

to explore negation deepest unexplored condition of predicate,
Path Predicate Prefix to solve :
afc.c: -140 input[0].x_arr[10]>-1.000000
afc.c: -142 ((unsigned char)input[0].float_state_arr[3])=0
afc.c: -146 (input[0].float_state_arr[0]+0.010000)<10.000000
afc.c: +148 ((unsigned char)input[0].float_state_arr[5])<>0
afc.c: +151 ((unsigned char)input[0].float_state_arr[4])<>0
afc.c: +158 input[0].x_arr[8]>=50.000000
afc.c: -160 0=0
afc.c: -160b 1<>0
afc.c: +161 1<>0
afc.c: -162 1=0
Path Prefix to cover :
afc.c
-140 -142 -146 +148 +151 +158 -160 -160b +161 -162
trivially infeasible

to explore negation deepest unexplored condition of predicate,
Path Predicate Prefix to solve :
afc.c: -140 input[0].x_arr[10]>-1.000000
afc.c: -142 ((unsigned char)input[0].float_state_arr[3])=0
afc.c: -146 (input[0].float_state_arr[0]+0.010000)<10.000000
afc.c: +148 ((unsigned char)input[0].float_state_arr[5])<>0
afc.c: +151 ((unsigned char)input[0].float_state_arr[4])<>0
afc.c: +158 input[0].x_arr[8]>=50.000000
afc.c: -160 0=0
afc.c: -160b 1<>0
afc.c: -161 1=0
Path Prefix to cover :
afc.c
-140 -142 -146 +148 +151 +158 -160 -160b -161
trivially infeasible

to explore negation deepest unexplored condition of predicate,
Path Predicate Prefix to solve :
afc.c: -140 input[0].x_arr[10]>-1.000000
afc.c: -142 ((unsigned char)input[0].float_state_arr[3])=0
afc.c: -146 (input[0].float_state_arr[0]+0.010000)<10.000000
afc.c: +148 ((unsigned char)input[0].float_state_arr[5])<>0
afc.c: +151 ((unsigned char)input[0].float_state_arr[4])<>0
afc.c: +158 input[0].x_arr[8]>=50.000000
afc.c: -160 0=0
afc.c: +160b 1=0
Path Prefix to cover :
afc.c
-140 -142 -146 +148 +151 +158 -160 +160b
trivially infeasible

to explore negation deepest unexplored condition of predicate,
Path Predicate Prefix to solve :
afc.c: -140 input[0].x_arr[10]>-1.000000
afc.c: -142 ((unsigned char)input[0].float_state_arr[3])=0
afc.c: -146 (input[0].float_state_arr[0]+0.010000)<10.000000
afc.c: +148 ((unsigned char)input[0].float_state_arr[5])<>0
afc.c: +151 ((unsigned char)input[0].float_state_arr[4])<>0
afc.c: +158 input[0].x_arr[8]>=50.000000
afc.c: +160 0<>0
Path Prefix to cover :
afc.c
-140 -142 -146 +148 +151 +158 +160
trivially infeasible

to explore negation deepest unexplored condition of predicate,
Path Predicate Prefix to solve :
afc.c: -140 input[0].x_arr[10]>-1.000000
afc.c: -142 ((unsigned char)input[0].float_state_arr[3])=0
afc.c: -146 (input[0].float_state_arr[0]+0.010000)<10.000000
afc.c: +148 ((unsigned char)input[0].float_state_arr[5])<>0
afc.c: -151 ((unsigned char)input[0].float_state_arr[4])=0
Path Prefix to cover :
afc.c
-140 -142 -146 +148 -151


TEST CASE 47

Dimensions:
input__controller = 1;
input__controller[0].input_arr = 1;
input__controller[0].int_state_arr = 0;
input__controller[0].float_state_arr = 7;
input__controller[0].x_arr = 13;
ret_val__controller = 1;
ret_val__controller[0].int_state_arr = 0;
ret_val__controller[0].float_state_arr = 7;
ret_val__controller[0].output_arr = 3;

Other input values:
input__controller[0].input_arr[0] = -423.000000;
input__controller[0].float_state_arr[0] = -371.000000;
input__controller[0].float_state_arr[1] = -78.000000;
input__controller[0].float_state_arr[2] = -292.000000;
input__controller[0].float_state_arr[3] = -0.400000;
input__controller[0].float_state_arr[4] = -0.200000;
input__controller[0].float_state_arr[5] = -384.000000;
input__controller[0].float_state_arr[6] = -73.000000;
input__controller[0].x_arr[0] = -493.000000;
input__controller[0].x_arr[1] = 170.000000;
input__controller[0].x_arr[2] = -8.000000;
input__controller[0].x_arr[3] = -463.000000;
input__controller[0].x_arr[4] = -387.000000;
input__controller[0].x_arr[5] = -245.000000;
input__controller[0].x_arr[6] = 150.000000;
input__controller[0].x_arr[7] = -475.000000;
input__controller[0].x_arr[8] = -478.000000;
input__controller[0].x_arr[9] = -156.000000;
input__controller[0].x_arr[10] = 417.000000;
input__controller[0].x_arr[11] = 173.000000;
input__controller[0].x_arr[12] = -343.000000;
ret_val__controller[0].float_state_arr[0] = 397.000000;
ret_val__controller[0].float_state_arr[1] = -241.000000;
ret_val__controller[0].float_state_arr[2] = -268.000000;
ret_val__controller[0].float_state_arr[3] = -365.000000;
ret_val__controller[0].float_state_arr[4] = -94.000000;
ret_val__controller[0].float_state_arr[5] = -68.000000;
ret_val__controller[0].float_state_arr[6] = -139.000000;
ret_val__controller[0].output_arr[0] = 438.000000;
ret_val__controller[0].output_arr[1] = -491.000000;
ret_val__controller[0].output_arr[2] = -16.000000;

Result:
unknown

Path Covered :
afc.c
-140 -142 -146 +148 -151 -158 -160 -160b -161 +162 -162b +182 -191 -195 +197 -205 +207


Path Predicate for case 47:
afc.c: -140 input[0].x_arr[10]>-1.000000
afc.c: -142 ((unsigned char)input[0].float_state_arr[3])=0
afc.c: -146 (input[0].float_state_arr[0]+0.010000)<10.000000
afc.c: +148 ((unsigned char)input[0].float_state_arr[5])<>0
afc.c: -151 ((unsigned char)input[0].float_state_arr[4])=0
afc.c: -158 input[0].x_arr[8]<70.000000
afc.c: -160 0=0
afc.c: -160b 1<>0
afc.c: -161 0=0
afc.c: +162 1<>0
afc.c: -162b 0=0
afc.c: +182 0=0
afc.c: -191 0=0
afc.c: -195 (1.000000+((0.040000*(input[0].x_arr[10]+-14.700000))+(((0.140000*(input[0].x_arr[10]+-14.700000))*0.010000)+input[0].float_state_arr[1])))=<100.000000
afc.c: +197 (1.000000+((0.040000*(input[0].x_arr[10]+-14.700000))+(((0.140000*(input[0].x_arr[10]+-14.700000))*0.010000)+input[0].float_state_arr[1])))<0.000000
afc.c: -205 0.000000=<1.660000
afc.c: +207 0.000000<0.130000

Simplified Path Predicate for case 47:
input[0].x_arr[10]>-1.000000 AND
((unsigned char)input[0].float_state_arr[3])=0 AND
(input[0].float_state_arr[0]+0.010000)<10.000000 AND
((unsigned char)input[0].float_state_arr[5])<>0 AND
((unsigned char)input[0].float_state_arr[4])=0 AND
input[0].x_arr[8]<70.000000 AND
(1.000000+((0.040000*(input[0].x_arr[10]+-14.700000))+(((0.140000*(input[0].x_arr[10]+-14.700000))*0.010000)+input[0].float_state_arr[1])))=<100.000000 AND
(1.000000+((0.040000*(input[0].x_arr[10]+-14.700000))+(((0.140000*(input[0].x_arr[10]+-14.700000))*0.010000)+input[0].float_state_arr[1])))<0.000000

Output Values for case 47: (Symbolic,Concrete)
return value = 0, 0
ret_val[0].float_state_arr[0] = (input[0].float_state_arr[0]+0.010000), -370.990000
ret_val[0].float_state_arr[1] = (((0.140000*(input[0].x_arr[10]+-14.700000))*0.010000)+input[0].float_state_arr[1]), -77.436780
ret_val[0].float_state_arr[2] = (input[0].float_state_arr[2]+(((input[0].x_arr[9]+-((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))))*0.413280)*0.010000)), -5957.592441
ret_val[0].float_state_arr[3] = 0.000000, 0.000000
ret_val[0].float_state_arr[4] = 0.000000, 0.000000
ret_val[0].float_state_arr[5] = 1.000000, 1.000000
ret_val[0].float_state_arr[6] = ((0.040000*(input[0].x_arr[10]+-14.700000))+(((0.140000*(input[0].x_arr[10]+-14.700000))*0.010000)+input[0].float_state_arr[1])), -61.344780
ret_val[0].output_arr[0] = 0.130000, 0.130000
ret_val[0].output_arr[1] = 0.000000, 0.000000
ret_val[0].output_arr[2] = 14.700000, 14.700000

to explore negation deepest unexplored condition of predicate,
Path Predicate Prefix to solve :
afc.c: -140 input[0].x_arr[10]>-1.000000
afc.c: -142 ((unsigned char)input[0].float_state_arr[3])=0
afc.c: -146 (input[0].float_state_arr[0]+0.010000)<10.000000
afc.c: +148 ((unsigned char)input[0].float_state_arr[5])<>0
afc.c: -151 ((unsigned char)input[0].float_state_arr[4])=0
afc.c: -158 input[0].x_arr[8]<70.000000
afc.c: -160 0=0
afc.c: -160b 1<>0
afc.c: -161 0=0
afc.c: +162 1<>0
afc.c: -162b 0=0
afc.c: +182 0=0
afc.c: -191 0=0
afc.c: -195 (1.000000+((0.040000*(input[0].x_arr[10]+-14.700000))+(((0.140000*(input[0].x_arr[10]+-14.700000))*0.010000)+input[0].float_state_arr[1])))=<100.000000
afc.c: +197 (1.000000+((0.040000*(input[0].x_arr[10]+-14.700000))+(((0.140000*(input[0].x_arr[10]+-14.700000))*0.010000)+input[0].float_state_arr[1])))<0.000000
afc.c: -205 0.000000=<1.660000
afc.c: -207 0.000000>=0.130000
Path Prefix to cover :
afc.c
-140 -142 -146 +148 -151 -158 -160 -160b -161 +162 -162b +182 -191 -195 +197 -205 -207
trivially infeasible

to explore negation deepest unexplored condition of predicate,
Path Predicate Prefix to solve :
afc.c: -140 input[0].x_arr[10]>-1.000000
afc.c: -142 ((unsigned char)input[0].float_state_arr[3])=0
afc.c: -146 (input[0].float_state_arr[0]+0.010000)<10.000000
afc.c: +148 ((unsigned char)input[0].float_state_arr[5])<>0
afc.c: -151 ((unsigned char)input[0].float_state_arr[4])=0
afc.c: -158 input[0].x_arr[8]<70.000000
afc.c: -160 0=0
afc.c: -160b 1<>0
afc.c: -161 0=0
afc.c: +162 1<>0
afc.c: -162b 0=0
afc.c: +182 0=0
afc.c: -191 0=0
afc.c: -195 (1.000000+((0.040000*(input[0].x_arr[10]+-14.700000))+(((0.140000*(input[0].x_arr[10]+-14.700000))*0.010000)+input[0].float_state_arr[1])))=<100.000000
afc.c: +197 (1.000000+((0.040000*(input[0].x_arr[10]+-14.700000))+(((0.140000*(input[0].x_arr[10]+-14.700000))*0.010000)+input[0].float_state_arr[1])))<0.000000
afc.c: +205 0.000000>1.660000
Path Prefix to cover :
afc.c
-140 -142 -146 +148 -151 -158 -160 -160b -161 +162 -162b +182 -191 -195 +197 +205
trivially infeasible

to explore negation deepest unexplored condition of predicate,
Path Predicate Prefix to solve :
afc.c: -140 input[0].x_arr[10]>-1.000000
afc.c: -142 ((unsigned char)input[0].float_state_arr[3])=0
afc.c: -146 (input[0].float_state_arr[0]+0.010000)<10.000000
afc.c: +148 ((unsigned char)input[0].float_state_arr[5])<>0
afc.c: -151 ((unsigned char)input[0].float_state_arr[4])=0
afc.c: -158 input[0].x_arr[8]<70.000000
afc.c: -160 0=0
afc.c: -160b 1<>0
afc.c: -161 0=0
afc.c: +162 1<>0
afc.c: -162b 0=0
afc.c: +182 0=0
afc.c: -191 0=0
afc.c: -195 (1.000000+((0.040000*(input[0].x_arr[10]+-14.700000))+(((0.140000*(input[0].x_arr[10]+-14.700000))*0.010000)+input[0].float_state_arr[1])))=<100.000000
afc.c: -197 (1.000000+((0.040000*(input[0].x_arr[10]+-14.700000))+(((0.140000*(input[0].x_arr[10]+-14.700000))*0.010000)+input[0].float_state_arr[1])))>=0.000000
Path Prefix to cover :
afc.c
-140 -142 -146 +148 -151 -158 -160 -160b -161 +162 -162b +182 -191 -195 -197


TEST CASE 48

Dimensions:
input__controller = 1;
input__controller[0].input_arr = 1;
input__controller[0].int_state_arr = 0;
input__controller[0].float_state_arr = 7;
input__controller[0].x_arr = 13;
ret_val__controller = 1;
ret_val__controller[0].int_state_arr = 0;
ret_val__controller[0].float_state_arr = 7;
ret_val__controller[0].output_arr = 3;

Other input values:
input__controller[0].input_arr[0] = -423.000000;
input__controller[0].float_state_arr[0] = -371.000000;
input__controller[0].float_state_arr[1] = 17.000000;
input__controller[0].float_state_arr[2] = -292.000000;
input__controller[0].float_state_arr[3] = -0.400000;
input__controller[0].float_state_arr[4] = -0.200000;
input__controller[0].float_state_arr[5] = -384.000000;
input__controller[0].float_state_arr[6] = -73.000000;
input__controller[0].x_arr[0] = -493.000000;
input__controller[0].x_arr[1] = 170.000000;
input__controller[0].x_arr[2] = -8.000000;
input__controller[0].x_arr[3] = -463.000000;
input__controller[0].x_arr[4] = -387.000000;
input__controller[0].x_arr[5] = -245.000000;
input__controller[0].x_arr[6] = 150.000000;
input__controller[0].x_arr[7] = -475.000000;
input__controller[0].x_arr[8] = -478.000000;
input__controller[0].x_arr[9] = -156.000000;
input__controller[0].x_arr[10] = 14.700000;
input__controller[0].x_arr[11] = 173.000000;
input__controller[0].x_arr[12] = -343.000000;
ret_val__controller[0].float_state_arr[0] = 397.000000;
ret_val__controller[0].float_state_arr[1] = -241.000000;
ret_val__controller[0].float_state_arr[2] = -268.000000;
ret_val__controller[0].float_state_arr[3] = -365.000000;
ret_val__controller[0].float_state_arr[4] = -94.000000;
ret_val__controller[0].float_state_arr[5] = -68.000000;
ret_val__controller[0].float_state_arr[6] = -139.000000;
ret_val__controller[0].output_arr[0] = 438.000000;
ret_val__controller[0].output_arr[1] = -491.000000;
ret_val__controller[0].output_arr[2] = -16.000000;

Result:
unknown

Path Covered :
afc.c
-140 -142 -146 +148 -151 -158 -160 -160b -161 +162 -162b +182 -191 -195 -197 +205


Path Predicate for case 48:
afc.c: -140 input[0].x_arr[10]>-1.000000
afc.c: -142 ((unsigned char)input[0].float_state_arr[3])=0
afc.c: -146 (input[0].float_state_arr[0]+0.010000)<10.000000
afc.c: +148 ((unsigned char)input[0].float_state_arr[5])<>0
afc.c: -151 ((unsigned char)input[0].float_state_arr[4])=0
afc.c: -158 input[0].x_arr[8]<70.000000
afc.c: -160 0=0
afc.c: -160b 1<>0
afc.c: -161 0=0
afc.c: +162 1<>0
afc.c: -162b 0=0
afc.c: +182 0=0
afc.c: -191 0=0
afc.c: -195 (1.000000+((0.040000*(input[0].x_arr[10]+-14.700000))+(((0.140000*(input[0].x_arr[10]+-14.700000))*0.010000)+input[0].float_state_arr[1])))=<100.000000
afc.c: -197 (1.000000+((0.040000*(input[0].x_arr[10]+-14.700000))+(((0.140000*(input[0].x_arr[10]+-14.700000))*0.010000)+input[0].float_state_arr[1])))>=0.000000
afc.c: +205 (((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))/14.700000)*(1.000000+((0.040000*(input[0].x_arr[10]+-14.700000))+(((0.140000*(input[0].x_arr[10]+-14.700000))*0.010000)+input[0].float_state_arr[1]))))>1.660000

Simplified Path Predicate for case 48:
input[0].x_arr[10]>-1.000000 AND
((unsigned char)input[0].float_state_arr[3])=0 AND
(input[0].float_state_arr[0]+0.010000)<10.000000 AND
((unsigned char)input[0].float_state_arr[5])<>0 AND
((unsigned char)input[0].float_state_arr[4])=0 AND
input[0].x_arr[8]<70.000000 AND
(1.000000+((0.040000*(input[0].x_arr[10]+-14.700000))+(((0.140000*(input[0].x_arr[10]+-14.700000))*0.010000)+input[0].float_state_arr[1])))=<100.000000 AND
(1.000000+((0.040000*(input[0].x_arr[10]+-14.700000))+(((0.140000*(input[0].x_arr[10]+-14.700000))*0.010000)+input[0].float_state_arr[1])))>=0.000000 AND
(((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))/14.700000)*(1.000000+((0.040000*(input[0].x_arr[10]+-14.700000))+(((0.140000*(input[0].x_arr[10]+-14.700000))*0.010000)+input[0].float_state_arr[1]))))>1.660000

Output Values for case 48: (Symbolic,Concrete)
return value = 0, 0
ret_val[0].float_state_arr[0] = (input[0].float_state_arr[0]+0.010000), -370.990000
ret_val[0].float_state_arr[1] = (((0.140000*(input[0].x_arr[10]+-14.700000))*0.010000)+input[0].float_state_arr[1]), 17.000000
ret_val[0].float_state_arr[2] = (input[0].float_state_arr[2]+(((input[0].x_arr[9]+-((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))))*0.413280)*0.010000)), -5957.592441
ret_val[0].float_state_arr[3] = 0.000000, 0.000000
ret_val[0].float_state_arr[4] = 0.000000, 0.000000
ret_val[0].float_state_arr[5] = 1.000000, 1.000000
ret_val[0].float_state_arr[6] = ((0.040000*(input[0].x_arr[10]+-14.700000))+(((0.140000*(input[0].x_arr[10]+-14.700000))*0.010000)+input[0].float_state_arr[1])), 17.000000
ret_val[0].output_arr[0] = 1.660000, 1.660000
ret_val[0].output_arr[1] = 0.000000, 0.000000
ret_val[0].output_arr[2] = 14.700000, 14.700000

to explore negation deepest unexplored condition of predicate,
Path Predicate Prefix to solve :
afc.c: -140 input[0].x_arr[10]>-1.000000
afc.c: -142 ((unsigned char)input[0].float_state_arr[3])=0
afc.c: -146 (input[0].float_state_arr[0]+0.010000)<10.000000
afc.c: +148 ((unsigned char)input[0].float_state_arr[5])<>0
afc.c: -151 ((unsigned char)input[0].float_state_arr[4])=0
afc.c: -158 input[0].x_arr[8]<70.000000
afc.c: -160 0=0
afc.c: -160b 1<>0
afc.c: -161 0=0
afc.c: +162 1<>0
afc.c: -162b 0=0
afc.c: +182 0=0
afc.c: -191 0=0
afc.c: -195 (1.000000+((0.040000*(input[0].x_arr[10]+-14.700000))+(((0.140000*(input[0].x_arr[10]+-14.700000))*0.010000)+input[0].float_state_arr[1])))=<100.000000
afc.c: -197 (1.000000+((0.040000*(input[0].x_arr[10]+-14.700000))+(((0.140000*(input[0].x_arr[10]+-14.700000))*0.010000)+input[0].float_state_arr[1])))>=0.000000
afc.c: -205 (((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))/14.700000)*(1.000000+((0.040000*(input[0].x_arr[10]+-14.700000))+(((0.140000*(input[0].x_arr[10]+-14.700000))*0.010000)+input[0].float_state_arr[1]))))=<1.660000
Path Prefix to cover :
afc.c
-140 -142 -146 +148 -151 -158 -160 -160b -161 +162 -162b +182 -191 -195 -197 -205


TEST CASE 49

Dimensions:
input__controller = 1;
input__controller[0].input_arr = 1;
input__controller[0].int_state_arr = 0;
input__controller[0].float_state_arr = 7;
input__controller[0].x_arr = 13;
ret_val__controller = 1;
ret_val__controller[0].int_state_arr = 0;
ret_val__controller[0].float_state_arr = 7;
ret_val__controller[0].output_arr = 3;

Other input values:
input__controller[0].input_arr[0] = -423.000000;
input__controller[0].float_state_arr[0] = -371.000000;
input__controller[0].float_state_arr[1] = -1.000000;
input__controller[0].float_state_arr[2] = 488.000000;
input__controller[0].float_state_arr[3] = -0.400000;
input__controller[0].float_state_arr[4] = -0.200000;
input__controller[0].float_state_arr[5] = -384.000000;
input__controller[0].float_state_arr[6] = -73.000000;
input__controller[0].x_arr[0] = -493.000000;
input__controller[0].x_arr[1] = 170.000000;
input__controller[0].x_arr[2] = -8.000000;
input__controller[0].x_arr[3] = -463.000000;
input__controller[0].x_arr[4] = -387.000000;
input__controller[0].x_arr[5] = -245.000000;
input__controller[0].x_arr[6] = 150.000000;
input__controller[0].x_arr[7] = -0.000000;
input__controller[0].x_arr[8] = -478.000000;
input__controller[0].x_arr[9] = -0.366000;
input__controller[0].x_arr[10] = 14.700000;
input__controller[0].x_arr[11] = 173.000000;
input__controller[0].x_arr[12] = -343.000000;
ret_val__controller[0].float_state_arr[0] = 397.000000;
ret_val__controller[0].float_state_arr[1] = -241.000000;
ret_val__controller[0].float_state_arr[2] = -268.000000;
ret_val__controller[0].float_state_arr[3] = -365.000000;
ret_val__controller[0].float_state_arr[4] = -94.000000;
ret_val__controller[0].float_state_arr[5] = -68.000000;
ret_val__controller[0].float_state_arr[6] = -139.000000;
ret_val__controller[0].output_arr[0] = 438.000000;
ret_val__controller[0].output_arr[1] = -491.000000;
ret_val__controller[0].output_arr[2] = -16.000000;

Result:
unknown

Path Covered :
afc.c
-140 -142 -146 +148 -151 -158 -160 -160b -161 +162 -162b +182 -191 -195 -197 -205 +207


Path Predicate for case 49:
afc.c: -140 input[0].x_arr[10]>-1.000000
afc.c: -142 ((unsigned char)input[0].float_state_arr[3])=0
afc.c: -146 (input[0].float_state_arr[0]+0.010000)<10.000000
afc.c: +148 ((unsigned char)input[0].float_state_arr[5])<>0
afc.c: -151 ((unsigned char)input[0].float_state_arr[4])=0
afc.c: -158 input[0].x_arr[8]<70.000000
afc.c: -160 0=0
afc.c: -160b 1<>0
afc.c: -161 0=0
afc.c: +162 1<>0
afc.c: -162b 0=0
afc.c: +182 0=0
afc.c: -191 0=0
afc.c: -195 (1.000000+((0.040000*(input[0].x_arr[10]+-14.700000))+(((0.140000*(input[0].x_arr[10]+-14.700000))*0.010000)+input[0].float_state_arr[1])))=<100.000000
afc.c: -197 (1.000000+((0.040000*(input[0].x_arr[10]+-14.700000))+(((0.140000*(input[0].x_arr[10]+-14.700000))*0.010000)+input[0].float_state_arr[1])))>=0.000000
afc.c: -205 (((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))/14.700000)*(1.000000+((0.040000*(input[0].x_arr[10]+-14.700000))+(((0.140000*(input[0].x_arr[10]+-14.700000))*0.010000)+input[0].float_state_arr[1]))))=<1.660000
afc.c: +207 (((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))/14.700000)*(1.000000+((0.040000*(input[0].x_arr[10]+-14.700000))+(((0.140000*(input[0].x_arr[10]+-14.700000))*0.010000)+input[0].float_state_arr[1]))))<0.130000

Simplified Path Predicate for case 49:
input[0].x_arr[10]>-1.000000 AND
((unsigned char)input[0].float_state_arr[3])=0 AND
(input[0].float_state_arr[0]+0.010000)<10.000000 AND
((unsigned char)input[0].float_state_arr[5])<>0 AND
((unsigned char)input[0].float_state_arr[4])=0 AND
input[0].x_arr[8]<70.000000 AND
(1.000000+((0.040000*(input[0].x_arr[10]+-14.700000))+(((0.140000*(input[0].x_arr[10]+-14.700000))*0.010000)+input[0].float_state_arr[1])))=<100.000000 AND
(1.000000+((0.040000*(input[0].x_arr[10]+-14.700000))+(((0.140000*(input[0].x_arr[10]+-14.700000))*0.010000)+input[0].float_state_arr[1])))>=0.000000 AND
(((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))/14.700000)*(1.000000+((0.040000*(input[0].x_arr[10]+-14.700000))+(((0.140000*(input[0].x_arr[10]+-14.700000))*0.010000)+input[0].float_state_arr[1]))))=<1.660000 AND
(((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))/14.700000)*(1.000000+((0.040000*(input[0].x_arr[10]+-14.700000))+(((0.140000*(input[0].x_arr[10]+-14.700000))*0.010000)+input[0].float_state_arr[1]))))<0.130000

Output Values for case 49: (Symbolic,Concrete)
return value = 0, 0
ret_val[0].float_state_arr[0] = (input[0].float_state_arr[0]+0.010000), -370.990000
ret_val[0].float_state_arr[1] = (((0.140000*(input[0].x_arr[10]+-14.700000))*0.010000)+input[0].float_state_arr[1]), -1.000000
ret_val[0].float_state_arr[2] = (input[0].float_state_arr[2]+(((input[0].x_arr[9]+-((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))))*0.413280)*0.010000)), 488.000000
ret_val[0].float_state_arr[3] = 0.000000, 0.000000
ret_val[0].float_state_arr[4] = 0.000000, 0.000000
ret_val[0].float_state_arr[5] = 1.000000, 1.000000
ret_val[0].float_state_arr[6] = ((0.040000*(input[0].x_arr[10]+-14.700000))+(((0.140000*(input[0].x_arr[10]+-14.700000))*0.010000)+input[0].float_state_arr[1])), -1.000000
ret_val[0].output_arr[0] = 0.130000, 0.130000
ret_val[0].output_arr[1] = 0.000000, 0.000000
ret_val[0].output_arr[2] = 14.700000, 14.700000

to explore negation deepest unexplored condition of predicate,
Path Predicate Prefix to solve :
afc.c: -140 input[0].x_arr[10]>-1.000000
afc.c: -142 ((unsigned char)input[0].float_state_arr[3])=0
afc.c: -146 (input[0].float_state_arr[0]+0.010000)<10.000000
afc.c: +148 ((unsigned char)input[0].float_state_arr[5])<>0
afc.c: -151 ((unsigned char)input[0].float_state_arr[4])=0
afc.c: -158 input[0].x_arr[8]<70.000000
afc.c: -160 0=0
afc.c: -160b 1<>0
afc.c: -161 0=0
afc.c: +162 1<>0
afc.c: -162b 0=0
afc.c: +182 0=0
afc.c: -191 0=0
afc.c: -195 (1.000000+((0.040000*(input[0].x_arr[10]+-14.700000))+(((0.140000*(input[0].x_arr[10]+-14.700000))*0.010000)+input[0].float_state_arr[1])))=<100.000000
afc.c: -197 (1.000000+((0.040000*(input[0].x_arr[10]+-14.700000))+(((0.140000*(input[0].x_arr[10]+-14.700000))*0.010000)+input[0].float_state_arr[1])))>=0.000000
afc.c: -205 (((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))/14.700000)*(1.000000+((0.040000*(input[0].x_arr[10]+-14.700000))+(((0.140000*(input[0].x_arr[10]+-14.700000))*0.010000)+input[0].float_state_arr[1]))))=<1.660000
afc.c: -207 (((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))/14.700000)*(1.000000+((0.040000*(input[0].x_arr[10]+-14.700000))+(((0.140000*(input[0].x_arr[10]+-14.700000))*0.010000)+input[0].float_state_arr[1]))))>=0.130000
Path Prefix to cover :
afc.c
-140 -142 -146 +148 -151 -158 -160 -160b -161 +162 -162b +182 -191 -195 -197 -205 -207


TEST CASE 50

Dimensions:
input__controller = 1;
input__controller[0].input_arr = 1;
input__controller[0].int_state_arr = 0;
input__controller[0].float_state_arr = 7;
input__controller[0].x_arr = 13;
ret_val__controller = 1;
ret_val__controller[0].int_state_arr = 0;
ret_val__controller[0].float_state_arr = 7;
ret_val__controller[0].output_arr = 3;

Other input values:
input__controller[0].input_arr[0] = -423.000000;
input__controller[0].float_state_arr[0] = -371.000000;
input__controller[0].float_state_arr[1] = -0.986641;
input__controller[0].float_state_arr[2] = -151.000000;
input__controller[0].float_state_arr[3] = -0.400000;
input__controller[0].float_state_arr[4] = -0.200000;
input__controller[0].float_state_arr[5] = -384.000000;
input__controller[0].float_state_arr[6] = -73.000000;
input__controller[0].x_arr[0] = -493.000000;
input__controller[0].x_arr[1] = 170.000000;
input__controller[0].x_arr[2] = -8.000000;
input__controller[0].x_arr[3] = -463.000000;
input__controller[0].x_arr[4] = -387.000000;
input__controller[0].x_arr[5] = -245.000000;
input__controller[0].x_arr[6] = 150.000000;
input__controller[0].x_arr[7] = -51784.256262;
input__controller[0].x_arr[8] = -478.000000;
input__controller[0].x_arr[9] = 503.000000;
input__controller[0].x_arr[10] = 14.700000;
input__controller[0].x_arr[11] = 173.000000;
input__controller[0].x_arr[12] = -343.000000;
ret_val__controller[0].float_state_arr[0] = 397.000000;
ret_val__controller[0].float_state_arr[1] = -241.000000;
ret_val__controller[0].float_state_arr[2] = -268.000000;
ret_val__controller[0].float_state_arr[3] = -365.000000;
ret_val__controller[0].float_state_arr[4] = -94.000000;
ret_val__controller[0].float_state_arr[5] = -68.000000;
ret_val__controller[0].float_state_arr[6] = -139.000000;
ret_val__controller[0].output_arr[0] = 438.000000;
ret_val__controller[0].output_arr[1] = -491.000000;
ret_val__controller[0].output_arr[2] = -16.000000;

Result:
unknown

Path Covered :
afc.c
-140 -142 -146 +148 -151 -158 -160 -160b -161 +162 -162b +182 -191 -195 -197 -205 -207


Path Predicate for case 50:
afc.c: -140 input[0].x_arr[10]>-1.000000
afc.c: -142 ((unsigned char)input[0].float_state_arr[3])=0
afc.c: -146 (input[0].float_state_arr[0]+0.010000)<10.000000
afc.c: +148 ((unsigned char)input[0].float_state_arr[5])<>0
afc.c: -151 ((unsigned char)input[0].float_state_arr[4])=0
afc.c: -158 input[0].x_arr[8]<70.000000
afc.c: -160 0=0
afc.c: -160b 1<>0
afc.c: -161 0=0
afc.c: +162 1<>0
afc.c: -162b 0=0
afc.c: +182 0=0
afc.c: -191 0=0
afc.c: -195 (1.000000+((0.040000*(input[0].x_arr[10]+-14.700000))+(((0.140000*(input[0].x_arr[10]+-14.700000))*0.010000)+input[0].float_state_arr[1])))=<100.000000
afc.c: -197 (1.000000+((0.040000*(input[0].x_arr[10]+-14.700000))+(((0.140000*(input[0].x_arr[10]+-14.700000))*0.010000)+input[0].float_state_arr[1])))>=0.000000
afc.c: -205 (((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))/14.700000)*(1.000000+((0.040000*(input[0].x_arr[10]+-14.700000))+(((0.140000*(input[0].x_arr[10]+-14.700000))*0.010000)+input[0].float_state_arr[1]))))=<1.660000
afc.c: -207 (((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))/14.700000)*(1.000000+((0.040000*(input[0].x_arr[10]+-14.700000))+(((0.140000*(input[0].x_arr[10]+-14.700000))*0.010000)+input[0].float_state_arr[1]))))>=0.130000

Simplified Path Predicate for case 50:
input[0].x_arr[10]>-1.000000 AND
((unsigned char)input[0].float_state_arr[3])=0 AND
(input[0].float_state_arr[0]+0.010000)<10.000000 AND
((unsigned char)input[0].float_state_arr[5])<>0 AND
((unsigned char)input[0].float_state_arr[4])=0 AND
input[0].x_arr[8]<70.000000 AND
(1.000000+((0.040000*(input[0].x_arr[10]+-14.700000))+(((0.140000*(input[0].x_arr[10]+-14.700000))*0.010000)+input[0].float_state_arr[1])))=<100.000000 AND
(1.000000+((0.040000*(input[0].x_arr[10]+-14.700000))+(((0.140000*(input[0].x_arr[10]+-14.700000))*0.010000)+input[0].float_state_arr[1])))>=0.000000 AND
(((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))/14.700000)*(1.000000+((0.040000*(input[0].x_arr[10]+-14.700000))+(((0.140000*(input[0].x_arr[10]+-14.700000))*0.010000)+input[0].float_state_arr[1]))))=<1.660000 AND
(((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))/14.700000)*(1.000000+((0.040000*(input[0].x_arr[10]+-14.700000))+(((0.140000*(input[0].x_arr[10]+-14.700000))*0.010000)+input[0].float_state_arr[1]))))>=0.130000

Output Values for case 50: (Symbolic,Concrete)
return value = 0, 0
ret_val[0].float_state_arr[0] = (input[0].float_state_arr[0]+0.010000), -370.990000
ret_val[0].float_state_arr[1] = (((0.140000*(input[0].x_arr[10]+-14.700000))*0.010000)+input[0].float_state_arr[1]), -0.986641
ret_val[0].float_state_arr[2] = (input[0].float_state_arr[2]+(((input[0].x_arr[9]+-((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))))*0.413280)*0.010000)), -151.000000
ret_val[0].float_state_arr[3] = 0.000000, 0.000000
ret_val[0].float_state_arr[4] = 0.000000, 0.000000
ret_val[0].float_state_arr[5] = 1.000000, 1.000000
ret_val[0].float_state_arr[6] = ((0.040000*(input[0].x_arr[10]+-14.700000))+(((0.140000*(input[0].x_arr[10]+-14.700000))*0.010000)+input[0].float_state_arr[1])), -0.986641
ret_val[0].output_arr[0] = (((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))/14.700000)*(1.000000+((0.040000*(input[0].x_arr[10]+-14.700000))+(((0.140000*(input[0].x_arr[10]+-14.700000))*0.010000)+input[0].float_state_arr[1])))), 0.457107
ret_val[0].output_arr[1] = 0.000000, 0.000000
ret_val[0].output_arr[2] = 14.700000, 14.700000

to explore negation deepest unexplored condition of predicate,
Path Predicate Prefix to solve :
afc.c: -140 input[0].x_arr[10]>-1.000000
afc.c: -142 ((unsigned char)input[0].float_state_arr[3])=0
afc.c: -146 (input[0].float_state_arr[0]+0.010000)<10.000000
afc.c: +148 ((unsigned char)input[0].float_state_arr[5])<>0
afc.c: -151 ((unsigned char)input[0].float_state_arr[4])=0
afc.c: -158 input[0].x_arr[8]<70.000000
afc.c: -160 0=0
afc.c: -160b 1<>0
afc.c: -161 0=0
afc.c: +162 1<>0
afc.c: -162b 0=0
afc.c: +182 0=0
afc.c: -191 0=0
afc.c: +195 (1.000000+((0.040000*(input[0].x_arr[10]+-14.700000))+(((0.140000*(input[0].x_arr[10]+-14.700000))*0.010000)+input[0].float_state_arr[1])))>100.000000
Path Prefix to cover :
afc.c
-140 -142 -146 +148 -151 -158 -160 -160b -161 +162 -162b +182 -191 +195


TEST CASE 51

Dimensions:
input__controller = 1;
input__controller[0].input_arr = 1;
input__controller[0].int_state_arr = 0;
input__controller[0].float_state_arr = 7;
input__controller[0].x_arr = 13;
ret_val__controller = 1;
ret_val__controller[0].int_state_arr = 0;
ret_val__controller[0].float_state_arr = 7;
ret_val__controller[0].output_arr = 3;

Other input values:
input__controller[0].input_arr[0] = -423.000000;
input__controller[0].float_state_arr[0] = -371.000000;
input__controller[0].float_state_arr[1] = 791.000000;
input__controller[0].float_state_arr[2] = -292.000000;
input__controller[0].float_state_arr[3] = -0.400000;
input__controller[0].float_state_arr[4] = -0.200000;
input__controller[0].float_state_arr[5] = -384.000000;
input__controller[0].float_state_arr[6] = -73.000000;
input__controller[0].x_arr[0] = -493.000000;
input__controller[0].x_arr[1] = 170.000000;
input__controller[0].x_arr[2] = -8.000000;
input__controller[0].x_arr[3] = -463.000000;
input__controller[0].x_arr[4] = -387.000000;
input__controller[0].x_arr[5] = -245.000000;
input__controller[0].x_arr[6] = 150.000000;
input__controller[0].x_arr[7] = -475.000000;
input__controller[0].x_arr[8] = -478.000000;
input__controller[0].x_arr[9] = -156.000000;
input__controller[0].x_arr[10] = 14.700000;
input__controller[0].x_arr[11] = 173.000000;
input__controller[0].x_arr[12] = -343.000000;
ret_val__controller[0].float_state_arr[0] = 397.000000;
ret_val__controller[0].float_state_arr[1] = -241.000000;
ret_val__controller[0].float_state_arr[2] = -268.000000;
ret_val__controller[0].float_state_arr[3] = -365.000000;
ret_val__controller[0].float_state_arr[4] = -94.000000;
ret_val__controller[0].float_state_arr[5] = -68.000000;
ret_val__controller[0].float_state_arr[6] = -139.000000;
ret_val__controller[0].output_arr[0] = 438.000000;
ret_val__controller[0].output_arr[1] = -491.000000;
ret_val__controller[0].output_arr[2] = -16.000000;

Result:
unknown

Path Covered :
afc.c
-140 -142 -146 +148 -151 -158 -160 -160b -161 +162 -162b +182 -191 +195 +205


Path Predicate for case 51:
afc.c: -140 input[0].x_arr[10]>-1.000000
afc.c: -142 ((unsigned char)input[0].float_state_arr[3])=0
afc.c: -146 (input[0].float_state_arr[0]+0.010000)<10.000000
afc.c: +148 ((unsigned char)input[0].float_state_arr[5])<>0
afc.c: -151 ((unsigned char)input[0].float_state_arr[4])=0
afc.c: -158 input[0].x_arr[8]<70.000000
afc.c: -160 0=0
afc.c: -160b 1<>0
afc.c: -161 0=0
afc.c: +162 1<>0
afc.c: -162b 0=0
afc.c: +182 0=0
afc.c: -191 0=0
afc.c: +195 (1.000000+((0.040000*(input[0].x_arr[10]+-14.700000))+(((0.140000*(input[0].x_arr[10]+-14.700000))*0.010000)+input[0].float_state_arr[1])))>100.000000
afc.c: +205 (((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))/14.700000)*100.000000)>1.660000

Simplified Path Predicate for case 51:
input[0].x_arr[10]>-1.000000 AND
((unsigned char)input[0].float_state_arr[3])=0 AND
(input[0].float_state_arr[0]+0.010000)<10.000000 AND
((unsigned char)input[0].float_state_arr[5])<>0 AND
((unsigned char)input[0].float_state_arr[4])=0 AND
input[0].x_arr[8]<70.000000 AND
(1.000000+((0.040000*(input[0].x_arr[10]+-14.700000))+(((0.140000*(input[0].x_arr[10]+-14.700000))*0.010000)+input[0].float_state_arr[1])))>100.000000 AND
(((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))/14.700000)*100.000000)>1.660000

Output Values for case 51: (Symbolic,Concrete)
return value = 0, 0
ret_val[0].float_state_arr[0] = (input[0].float_state_arr[0]+0.010000), -370.990000
ret_val[0].float_state_arr[1] = (((0.140000*(input[0].x_arr[10]+-14.700000))*0.010000)+input[0].float_state_arr[1]), 791.000000
ret_val[0].float_state_arr[2] = (input[0].float_state_arr[2]+(((input[0].x_arr[9]+-((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))))*0.413280)*0.010000)), -5957.592441
ret_val[0].float_state_arr[3] = 0.000000, 0.000000
ret_val[0].float_state_arr[4] = 0.000000, 0.000000
ret_val[0].float_state_arr[5] = 1.000000, 1.000000
ret_val[0].float_state_arr[6] = ((0.040000*(input[0].x_arr[10]+-14.700000))+(((0.140000*(input[0].x_arr[10]+-14.700000))*0.010000)+input[0].float_state_arr[1])), 791.000000
ret_val[0].output_arr[0] = 1.660000, 1.660000
ret_val[0].output_arr[1] = 0.000000, 0.000000
ret_val[0].output_arr[2] = 14.700000, 14.700000

to explore negation deepest unexplored condition of predicate,
Path Predicate Prefix to solve :
afc.c: -140 input[0].x_arr[10]>-1.000000
afc.c: -142 ((unsigned char)input[0].float_state_arr[3])=0
afc.c: -146 (input[0].float_state_arr[0]+0.010000)<10.000000
afc.c: +148 ((unsigned char)input[0].float_state_arr[5])<>0
afc.c: -151 ((unsigned char)input[0].float_state_arr[4])=0
afc.c: -158 input[0].x_arr[8]<70.000000
afc.c: -160 0=0
afc.c: -160b 1<>0
afc.c: -161 0=0
afc.c: +162 1<>0
afc.c: -162b 0=0
afc.c: +182 0=0
afc.c: -191 0=0
afc.c: +195 (1.000000+((0.040000*(input[0].x_arr[10]+-14.700000))+(((0.140000*(input[0].x_arr[10]+-14.700000))*0.010000)+input[0].float_state_arr[1])))>100.000000
afc.c: -205 (((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))/14.700000)*100.000000)=<1.660000
Path Prefix to cover :
afc.c
-140 -142 -146 +148 -151 -158 -160 -160b -161 +162 -162b +182 -191 +195 -205


TEST CASE 52

Dimensions:
input__controller = 1;
input__controller[0].input_arr = 1;
input__controller[0].int_state_arr = 0;
input__controller[0].float_state_arr = 7;
input__controller[0].x_arr = 13;
ret_val__controller = 1;
ret_val__controller[0].int_state_arr = 0;
ret_val__controller[0].float_state_arr = 7;
ret_val__controller[0].output_arr = 3;

Other input values:
input__controller[0].input_arr[0] = -423.000000;
input__controller[0].float_state_arr[0] = -371.000000;
input__controller[0].float_state_arr[1] = 791.000000;
input__controller[0].float_state_arr[2] = 342.000000;
input__controller[0].float_state_arr[3] = -0.400000;
input__controller[0].float_state_arr[4] = -0.200000;
input__controller[0].float_state_arr[5] = -384.000000;
input__controller[0].float_state_arr[6] = -73.000000;
input__controller[0].x_arr[0] = -493.000000;
input__controller[0].x_arr[1] = 170.000000;
input__controller[0].x_arr[2] = -8.000000;
input__controller[0].x_arr[3] = -463.000000;
input__controller[0].x_arr[4] = -387.000000;
input__controller[0].x_arr[5] = -245.000000;
input__controller[0].x_arr[6] = 150.000000;
input__controller[0].x_arr[7] = -0.000000;
input__controller[0].x_arr[8] = -478.000000;
input__controller[0].x_arr[9] = -0.366000;
input__controller[0].x_arr[10] = 14.700000;
input__controller[0].x_arr[11] = 173.000000;
input__controller[0].x_arr[12] = -343.000000;
ret_val__controller[0].float_state_arr[0] = 397.000000;
ret_val__controller[0].float_state_arr[1] = -241.000000;
ret_val__controller[0].float_state_arr[2] = -268.000000;
ret_val__controller[0].float_state_arr[3] = -365.000000;
ret_val__controller[0].float_state_arr[4] = -94.000000;
ret_val__controller[0].float_state_arr[5] = -68.000000;
ret_val__controller[0].float_state_arr[6] = -139.000000;
ret_val__controller[0].output_arr[0] = 438.000000;
ret_val__controller[0].output_arr[1] = -491.000000;
ret_val__controller[0].output_arr[2] = -16.000000;

Result:
unknown

Path Covered :
afc.c
-140 -142 -146 +148 -151 -158 -160 -160b -161 +162 -162b +182 -191 +195 -205 +207


Path Predicate for case 52:
afc.c: -140 input[0].x_arr[10]>-1.000000
afc.c: -142 ((unsigned char)input[0].float_state_arr[3])=0
afc.c: -146 (input[0].float_state_arr[0]+0.010000)<10.000000
afc.c: +148 ((unsigned char)input[0].float_state_arr[5])<>0
afc.c: -151 ((unsigned char)input[0].float_state_arr[4])=0
afc.c: -158 input[0].x_arr[8]<70.000000
afc.c: -160 0=0
afc.c: -160b 1<>0
afc.c: -161 0=0
afc.c: +162 1<>0
afc.c: -162b 0=0
afc.c: +182 0=0
afc.c: -191 0=0
afc.c: +195 (1.000000+((0.040000*(input[0].x_arr[10]+-14.700000))+(((0.140000*(input[0].x_arr[10]+-14.700000))*0.010000)+input[0].float_state_arr[1])))>100.000000
afc.c: -205 (((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))/14.700000)*100.000000)=<1.660000
afc.c: +207 (((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))/14.700000)*100.000000)<0.130000

Simplified Path Predicate for case 52:
input[0].x_arr[10]>-1.000000 AND
((unsigned char)input[0].float_state_arr[3])=0 AND
(input[0].float_state_arr[0]+0.010000)<10.000000 AND
((unsigned char)input[0].float_state_arr[5])<>0 AND
((unsigned char)input[0].float_state_arr[4])=0 AND
input[0].x_arr[8]<70.000000 AND
(1.000000+((0.040000*(input[0].x_arr[10]+-14.700000))+(((0.140000*(input[0].x_arr[10]+-14.700000))*0.010000)+input[0].float_state_arr[1])))>100.000000 AND
(((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))/14.700000)*100.000000)=<1.660000 AND
(((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))/14.700000)*100.000000)<0.130000

Output Values for case 52: (Symbolic,Concrete)
return value = 0, 0
ret_val[0].float_state_arr[0] = (input[0].float_state_arr[0]+0.010000), -370.990000
ret_val[0].float_state_arr[1] = (((0.140000*(input[0].x_arr[10]+-14.700000))*0.010000)+input[0].float_state_arr[1]), 791.000000
ret_val[0].float_state_arr[2] = (input[0].float_state_arr[2]+(((input[0].x_arr[9]+-((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))))*0.413280)*0.010000)), 342.000000
ret_val[0].float_state_arr[3] = 0.000000, 0.000000
ret_val[0].float_state_arr[4] = 0.000000, 0.000000
ret_val[0].float_state_arr[5] = 1.000000, 1.000000
ret_val[0].float_state_arr[6] = ((0.040000*(input[0].x_arr[10]+-14.700000))+(((0.140000*(input[0].x_arr[10]+-14.700000))*0.010000)+input[0].float_state_arr[1])), 791.000000
ret_val[0].output_arr[0] = 0.130000, 0.130000
ret_val[0].output_arr[1] = 0.000000, 0.000000
ret_val[0].output_arr[2] = 14.700000, 14.700000

to explore negation deepest unexplored condition of predicate,
Path Predicate Prefix to solve :
afc.c: -140 input[0].x_arr[10]>-1.000000
afc.c: -142 ((unsigned char)input[0].float_state_arr[3])=0
afc.c: -146 (input[0].float_state_arr[0]+0.010000)<10.000000
afc.c: +148 ((unsigned char)input[0].float_state_arr[5])<>0
afc.c: -151 ((unsigned char)input[0].float_state_arr[4])=0
afc.c: -158 input[0].x_arr[8]<70.000000
afc.c: -160 0=0
afc.c: -160b 1<>0
afc.c: -161 0=0
afc.c: +162 1<>0
afc.c: -162b 0=0
afc.c: +182 0=0
afc.c: -191 0=0
afc.c: +195 (1.000000+((0.040000*(input[0].x_arr[10]+-14.700000))+(((0.140000*(input[0].x_arr[10]+-14.700000))*0.010000)+input[0].float_state_arr[1])))>100.000000
afc.c: -205 (((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))/14.700000)*100.000000)=<1.660000
afc.c: -207 (((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))/14.700000)*100.000000)>=0.130000
Path Prefix to cover :
afc.c
-140 -142 -146 +148 -151 -158 -160 -160b -161 +162 -162b +182 -191 +195 -205 -207
Supposed infeasible (with the given preconditions) (constraint resolution timeout - all_vars_negated_ctr)

to explore negation deepest unexplored condition of predicate,
Path Predicate Prefix to solve :
afc.c: -140 input[0].x_arr[10]>-1.000000
afc.c: -142 ((unsigned char)input[0].float_state_arr[3])=0
afc.c: -146 (input[0].float_state_arr[0]+0.010000)<10.000000
afc.c: +148 ((unsigned char)input[0].float_state_arr[5])<>0
afc.c: -151 ((unsigned char)input[0].float_state_arr[4])=0
afc.c: -158 input[0].x_arr[8]<70.000000
afc.c: -160 0=0
afc.c: -160b 1<>0
afc.c: -161 0=0
afc.c: +162 1<>0
afc.c: -162b 0=0
afc.c: +182 0=0
afc.c: +191 0<>0
Path Prefix to cover :
afc.c
-140 -142 -146 +148 -151 -158 -160 -160b -161 +162 -162b +182 +191
trivially infeasible

to explore negation deepest unexplored condition of predicate,
Path Predicate Prefix to solve :
afc.c: -140 input[0].x_arr[10]>-1.000000
afc.c: -142 ((unsigned char)input[0].float_state_arr[3])=0
afc.c: -146 (input[0].float_state_arr[0]+0.010000)<10.000000
afc.c: +148 ((unsigned char)input[0].float_state_arr[5])<>0
afc.c: -151 ((unsigned char)input[0].float_state_arr[4])=0
afc.c: -158 input[0].x_arr[8]<70.000000
afc.c: -160 0=0
afc.c: -160b 1<>0
afc.c: -161 0=0
afc.c: +162 1<>0
afc.c: -162b 0=0
afc.c: -182 0<>0
Path Prefix to cover :
afc.c
-140 -142 -146 +148 -151 -158 -160 -160b -161 +162 -162b -182
trivially infeasible

to explore negation deepest unexplored condition of predicate,
Path Predicate Prefix to solve :
afc.c: -140 input[0].x_arr[10]>-1.000000
afc.c: -142 ((unsigned char)input[0].float_state_arr[3])=0
afc.c: -146 (input[0].float_state_arr[0]+0.010000)<10.000000
afc.c: +148 ((unsigned char)input[0].float_state_arr[5])<>0
afc.c: -151 ((unsigned char)input[0].float_state_arr[4])=0
afc.c: -158 input[0].x_arr[8]<70.000000
afc.c: -160 0=0
afc.c: -160b 1<>0
afc.c: -161 0=0
afc.c: +162 1<>0
afc.c: +162b 0<>0
Path Prefix to cover :
afc.c
-140 -142 -146 +148 -151 -158 -160 -160b -161 +162 +162b
trivially infeasible

to explore negation deepest unexplored condition of predicate,
Path Predicate Prefix to solve :
afc.c: -140 input[0].x_arr[10]>-1.000000
afc.c: -142 ((unsigned char)input[0].float_state_arr[3])=0
afc.c: -146 (input[0].float_state_arr[0]+0.010000)<10.000000
afc.c: +148 ((unsigned char)input[0].float_state_arr[5])<>0
afc.c: -151 ((unsigned char)input[0].float_state_arr[4])=0
afc.c: -158 input[0].x_arr[8]<70.000000
afc.c: -160 0=0
afc.c: -160b 1<>0
afc.c: -161 0=0
afc.c: -162 1=0
Path Prefix to cover :
afc.c
-140 -142 -146 +148 -151 -158 -160 -160b -161 -162
trivially infeasible

to explore negation deepest unexplored condition of predicate,
Path Predicate Prefix to solve :
afc.c: -140 input[0].x_arr[10]>-1.000000
afc.c: -142 ((unsigned char)input[0].float_state_arr[3])=0
afc.c: -146 (input[0].float_state_arr[0]+0.010000)<10.000000
afc.c: +148 ((unsigned char)input[0].float_state_arr[5])<>0
afc.c: -151 ((unsigned char)input[0].float_state_arr[4])=0
afc.c: -158 input[0].x_arr[8]<70.000000
afc.c: -160 0=0
afc.c: -160b 1<>0
afc.c: +161 0<>0
Path Prefix to cover :
afc.c
-140 -142 -146 +148 -151 -158 -160 -160b +161
trivially infeasible

to explore negation deepest unexplored condition of predicate,
Path Predicate Prefix to solve :
afc.c: -140 input[0].x_arr[10]>-1.000000
afc.c: -142 ((unsigned char)input[0].float_state_arr[3])=0
afc.c: -146 (input[0].float_state_arr[0]+0.010000)<10.000000
afc.c: +148 ((unsigned char)input[0].float_state_arr[5])<>0
afc.c: -151 ((unsigned char)input[0].float_state_arr[4])=0
afc.c: -158 input[0].x_arr[8]<70.000000
afc.c: -160 0=0
afc.c: +160b 1=0
Path Prefix to cover :
afc.c
-140 -142 -146 +148 -151 -158 -160 +160b
trivially infeasible

to explore negation deepest unexplored condition of predicate,
Path Predicate Prefix to solve :
afc.c: -140 input[0].x_arr[10]>-1.000000
afc.c: -142 ((unsigned char)input[0].float_state_arr[3])=0
afc.c: -146 (input[0].float_state_arr[0]+0.010000)<10.000000
afc.c: +148 ((unsigned char)input[0].float_state_arr[5])<>0
afc.c: -151 ((unsigned char)input[0].float_state_arr[4])=0
afc.c: -158 input[0].x_arr[8]<70.000000
afc.c: +160 0<>0
Path Prefix to cover :
afc.c
-140 -142 -146 +148 -151 -158 +160
trivially infeasible

to explore negation deepest unexplored condition of predicate,
Path Predicate Prefix to solve :
afc.c: -140 input[0].x_arr[10]>-1.000000
afc.c: -142 ((unsigned char)input[0].float_state_arr[3])=0
afc.c: -146 (input[0].float_state_arr[0]+0.010000)<10.000000
afc.c: +148 ((unsigned char)input[0].float_state_arr[5])<>0
afc.c: -151 ((unsigned char)input[0].float_state_arr[4])=0
afc.c: +158 input[0].x_arr[8]>=70.000000
Path Prefix to cover :
afc.c
-140 -142 -146 +148 -151 +158


TEST CASE 54

Dimensions:
input__controller = 1;
input__controller[0].input_arr = 1;
input__controller[0].int_state_arr = 0;
input__controller[0].float_state_arr = 7;
input__controller[0].x_arr = 13;
ret_val__controller = 1;
ret_val__controller[0].int_state_arr = 0;
ret_val__controller[0].float_state_arr = 7;
ret_val__controller[0].output_arr = 3;

Other input values:
input__controller[0].input_arr[0] = -423.000000;
input__controller[0].float_state_arr[0] = -371.000000;
input__controller[0].float_state_arr[1] = -78.000000;
input__controller[0].float_state_arr[2] = -292.000000;
input__controller[0].float_state_arr[3] = -0.400000;
input__controller[0].float_state_arr[4] = -0.200000;
input__controller[0].float_state_arr[5] = -384.000000;
input__controller[0].float_state_arr[6] = -73.000000;
input__controller[0].x_arr[0] = -493.000000;
input__controller[0].x_arr[1] = 170.000000;
input__controller[0].x_arr[2] = -8.000000;
input__controller[0].x_arr[3] = -463.000000;
input__controller[0].x_arr[4] = -387.000000;
input__controller[0].x_arr[5] = -245.000000;
input__controller[0].x_arr[6] = 150.000000;
input__controller[0].x_arr[7] = -475.000000;
input__controller[0].x_arr[8] = 176.000000;
input__controller[0].x_arr[9] = -156.000000;
input__controller[0].x_arr[10] = 417.000000;
input__controller[0].x_arr[11] = 173.000000;
input__controller[0].x_arr[12] = -343.000000;
ret_val__controller[0].float_state_arr[0] = 397.000000;
ret_val__controller[0].float_state_arr[1] = -241.000000;
ret_val__controller[0].float_state_arr[2] = -268.000000;
ret_val__controller[0].float_state_arr[3] = -365.000000;
ret_val__controller[0].float_state_arr[4] = -94.000000;
ret_val__controller[0].float_state_arr[5] = -68.000000;
ret_val__controller[0].float_state_arr[6] = -139.000000;
ret_val__controller[0].output_arr[0] = 438.000000;
ret_val__controller[0].output_arr[1] = -491.000000;
ret_val__controller[0].output_arr[2] = -16.000000;

Result:
unknown

Path Covered :
afc.c
-140 -142 -146 +148 -151 +158 -160 -160b +161 +162 +162b -182 +191 +205


Path Predicate for case 54:
afc.c: -140 input[0].x_arr[10]>-1.000000
afc.c: -142 ((unsigned char)input[0].float_state_arr[3])=0
afc.c: -146 (input[0].float_state_arr[0]+0.010000)<10.000000
afc.c: +148 ((unsigned char)input[0].float_state_arr[5])<>0
afc.c: -151 ((unsigned char)input[0].float_state_arr[4])=0
afc.c: +158 input[0].x_arr[8]>=70.000000
afc.c: -160 0=0
afc.c: -160b 1<>0
afc.c: +161 1<>0
afc.c: +162 1<>0
afc.c: +162b 1<>0
afc.c: -182 1<>0
afc.c: +191 1<>0
afc.c: +205 ((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))/12.500000)>1.660000

Simplified Path Predicate for case 54:
input[0].x_arr[10]>-1.000000 AND
((unsigned char)input[0].float_state_arr[3])=0 AND
(input[0].float_state_arr[0]+0.010000)<10.000000 AND
((unsigned char)input[0].float_state_arr[5])<>0 AND
((unsigned char)input[0].float_state_arr[4])=0 AND
input[0].x_arr[8]>=70.000000 AND
((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))/12.500000)>1.660000

Output Values for case 54: (Symbolic,Concrete)
return value = 0, 0
ret_val[0].float_state_arr[0] = (input[0].float_state_arr[0]+0.010000), -370.990000
ret_val[0].float_state_arr[1] = input[0].float_state_arr[1], -78.000000
ret_val[0].float_state_arr[2] = (input[0].float_state_arr[2]+(((input[0].x_arr[9]+-((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))))*0.413280)*0.010000)), -5957.592441
ret_val[0].float_state_arr[3] = 0.000000, 0.000000
ret_val[0].float_state_arr[4] = 1.000000, 1.000000
ret_val[0].float_state_arr[5] = 1.000000, 1.000000
ret_val[0].float_state_arr[6] = input[0].float_state_arr[6], -73.000000
ret_val[0].output_arr[0] = 1.660000, 1.660000
ret_val[0].output_arr[1] = 1.000000, 1.000000
ret_val[0].output_arr[2] = 12.500000, 12.500000

to explore negation deepest unexplored condition of predicate,
Path Predicate Prefix to solve :
afc.c: -140 input[0].x_arr[10]>-1.000000
afc.c: -142 ((unsigned char)input[0].float_state_arr[3])=0
afc.c: -146 (input[0].float_state_arr[0]+0.010000)<10.000000
afc.c: +148 ((unsigned char)input[0].float_state_arr[5])<>0
afc.c: -151 ((unsigned char)input[0].float_state_arr[4])=0
afc.c: +158 input[0].x_arr[8]>=70.000000
afc.c: -160 0=0
afc.c: -160b 1<>0
afc.c: +161 1<>0
afc.c: +162 1<>0
afc.c: +162b 1<>0
afc.c: -182 1<>0
afc.c: +191 1<>0
afc.c: -205 ((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))/12.500000)=<1.660000
Path Prefix to cover :
afc.c
-140 -142 -146 +148 -151 +158 -160 -160b +161 +162 +162b -182 +191 -205


TEST CASE 55

Dimensions:
input__controller = 1;
input__controller[0].input_arr = 1;
input__controller[0].int_state_arr = 0;
input__controller[0].float_state_arr = 7;
input__controller[0].x_arr = 13;
ret_val__controller = 1;
ret_val__controller[0].int_state_arr = 0;
ret_val__controller[0].float_state_arr = 7;
ret_val__controller[0].output_arr = 3;

Other input values:
input__controller[0].input_arr[0] = -423.000000;
input__controller[0].float_state_arr[0] = -371.000000;
input__controller[0].float_state_arr[1] = -78.000000;
input__controller[0].float_state_arr[2] = -50.000000;
input__controller[0].float_state_arr[3] = -0.400000;
input__controller[0].float_state_arr[4] = -0.200000;
input__controller[0].float_state_arr[5] = -384.000000;
input__controller[0].float_state_arr[6] = -73.000000;
input__controller[0].x_arr[0] = -493.000000;
input__controller[0].x_arr[1] = 170.000000;
input__controller[0].x_arr[2] = -8.000000;
input__controller[0].x_arr[3] = -463.000000;
input__controller[0].x_arr[4] = -387.000000;
input__controller[0].x_arr[5] = -245.000000;
input__controller[0].x_arr[6] = 150.000000;
input__controller[0].x_arr[7] = 0.000000;
input__controller[0].x_arr[8] = 176.000000;
input__controller[0].x_arr[9] = -0.366000;
input__controller[0].x_arr[10] = 417.000000;
input__controller[0].x_arr[11] = 173.000000;
input__controller[0].x_arr[12] = -343.000000;
ret_val__controller[0].float_state_arr[0] = 397.000000;
ret_val__controller[0].float_state_arr[1] = -241.000000;
ret_val__controller[0].float_state_arr[2] = -268.000000;
ret_val__controller[0].float_state_arr[3] = -365.000000;
ret_val__controller[0].float_state_arr[4] = -94.000000;
ret_val__controller[0].float_state_arr[5] = -68.000000;
ret_val__controller[0].float_state_arr[6] = -139.000000;
ret_val__controller[0].output_arr[0] = 438.000000;
ret_val__controller[0].output_arr[1] = -491.000000;
ret_val__controller[0].output_arr[2] = -16.000000;

Result:
unknown

Path Covered :
afc.c
-140 -142 -146 +148 -151 +158 -160 -160b +161 +162 +162b -182 +191 -205 +207


Path Predicate for case 55:
afc.c: -140 input[0].x_arr[10]>-1.000000
afc.c: -142 ((unsigned char)input[0].float_state_arr[3])=0
afc.c: -146 (input[0].float_state_arr[0]+0.010000)<10.000000
afc.c: +148 ((unsigned char)input[0].float_state_arr[5])<>0
afc.c: -151 ((unsigned char)input[0].float_state_arr[4])=0
afc.c: +158 input[0].x_arr[8]>=70.000000
afc.c: -160 0=0
afc.c: -160b 1<>0
afc.c: +161 1<>0
afc.c: +162 1<>0
afc.c: +162b 1<>0
afc.c: -182 1<>0
afc.c: +191 1<>0
afc.c: -205 ((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))/12.500000)=<1.660000
afc.c: +207 ((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))/12.500000)<0.130000

Simplified Path Predicate for case 55:
input[0].x_arr[10]>-1.000000 AND
((unsigned char)input[0].float_state_arr[3])=0 AND
(input[0].float_state_arr[0]+0.010000)<10.000000 AND
((unsigned char)input[0].float_state_arr[5])<>0 AND
((unsigned char)input[0].float_state_arr[4])=0 AND
input[0].x_arr[8]>=70.000000 AND
((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))/12.500000)=<1.660000 AND
((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))/12.500000)<0.130000

Output Values for case 55: (Symbolic,Concrete)
return value = 0, 0
ret_val[0].float_state_arr[0] = (input[0].float_state_arr[0]+0.010000), -370.990000
ret_val[0].float_state_arr[1] = input[0].float_state_arr[1], -78.000000
ret_val[0].float_state_arr[2] = (input[0].float_state_arr[2]+(((input[0].x_arr[9]+-((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))))*0.413280)*0.010000)), -50.000000
ret_val[0].float_state_arr[3] = 0.000000, 0.000000
ret_val[0].float_state_arr[4] = 1.000000, 1.000000
ret_val[0].float_state_arr[5] = 1.000000, 1.000000
ret_val[0].float_state_arr[6] = input[0].float_state_arr[6], -73.000000
ret_val[0].output_arr[0] = 0.130000, 0.130000
ret_val[0].output_arr[1] = 1.000000, 1.000000
ret_val[0].output_arr[2] = 12.500000, 12.500000

to explore negation deepest unexplored condition of predicate,
Path Predicate Prefix to solve :
afc.c: -140 input[0].x_arr[10]>-1.000000
afc.c: -142 ((unsigned char)input[0].float_state_arr[3])=0
afc.c: -146 (input[0].float_state_arr[0]+0.010000)<10.000000
afc.c: +148 ((unsigned char)input[0].float_state_arr[5])<>0
afc.c: -151 ((unsigned char)input[0].float_state_arr[4])=0
afc.c: +158 input[0].x_arr[8]>=70.000000
afc.c: -160 0=0
afc.c: -160b 1<>0
afc.c: +161 1<>0
afc.c: +162 1<>0
afc.c: +162b 1<>0
afc.c: -182 1<>0
afc.c: +191 1<>0
afc.c: -205 ((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))/12.500000)=<1.660000
afc.c: -207 ((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))/12.500000)>=0.130000
Path Prefix to cover :
afc.c
-140 -142 -146 +148 -151 +158 -160 -160b +161 +162 +162b -182 +191 -205 -207


TEST CASE 56

Dimensions:
input__controller = 1;
input__controller[0].input_arr = 1;
input__controller[0].int_state_arr = 0;
input__controller[0].float_state_arr = 7;
input__controller[0].x_arr = 13;
ret_val__controller = 1;
ret_val__controller[0].int_state_arr = 0;
ret_val__controller[0].float_state_arr = 7;
ret_val__controller[0].output_arr = 3;

Other input values:
input__controller[0].input_arr[0] = -423.000000;
input__controller[0].float_state_arr[0] = -371.000000;
input__controller[0].float_state_arr[1] = -78.000000;
input__controller[0].float_state_arr[2] = 337.000000;
input__controller[0].float_state_arr[3] = -0.400000;
input__controller[0].float_state_arr[4] = -0.200000;
input__controller[0].float_state_arr[5] = -384.000000;
input__controller[0].float_state_arr[6] = -73.000000;
input__controller[0].x_arr[0] = -493.000000;
input__controller[0].x_arr[1] = 170.000000;
input__controller[0].x_arr[2] = -8.000000;
input__controller[0].x_arr[3] = -463.000000;
input__controller[0].x_arr[4] = -387.000000;
input__controller[0].x_arr[5] = -245.000000;
input__controller[0].x_arr[6] = 150.000000;
input__controller[0].x_arr[7] = -0.004837;
input__controller[0].x_arr[8] = 176.000000;
input__controller[0].x_arr[9] = 18.000000;
input__controller[0].x_arr[10] = 417.000000;
input__controller[0].x_arr[11] = 173.000000;
input__controller[0].x_arr[12] = -343.000000;
ret_val__controller[0].float_state_arr[0] = 397.000000;
ret_val__controller[0].float_state_arr[1] = -241.000000;
ret_val__controller[0].float_state_arr[2] = -268.000000;
ret_val__controller[0].float_state_arr[3] = -365.000000;
ret_val__controller[0].float_state_arr[4] = -94.000000;
ret_val__controller[0].float_state_arr[5] = -68.000000;
ret_val__controller[0].float_state_arr[6] = -139.000000;
ret_val__controller[0].output_arr[0] = 438.000000;
ret_val__controller[0].output_arr[1] = -491.000000;
ret_val__controller[0].output_arr[2] = -16.000000;

Result:
unknown

Path Covered :
afc.c
-140 -142 -146 +148 -151 +158 -160 -160b +161 +162 +162b -182 +191 -205 -207


Path Predicate for case 56:
afc.c: -140 input[0].x_arr[10]>-1.000000
afc.c: -142 ((unsigned char)input[0].float_state_arr[3])=0
afc.c: -146 (input[0].float_state_arr[0]+0.010000)<10.000000
afc.c: +148 ((unsigned char)input[0].float_state_arr[5])<>0
afc.c: -151 ((unsigned char)input[0].float_state_arr[4])=0
afc.c: +158 input[0].x_arr[8]>=70.000000
afc.c: -160 0=0
afc.c: -160b 1<>0
afc.c: +161 1<>0
afc.c: +162 1<>0
afc.c: +162b 1<>0
afc.c: -182 1<>0
afc.c: +191 1<>0
afc.c: -205 ((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))/12.500000)=<1.660000
afc.c: -207 ((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))/12.500000)>=0.130000

Simplified Path Predicate for case 56:
input[0].x_arr[10]>-1.000000 AND
((unsigned char)input[0].float_state_arr[3])=0 AND
(input[0].float_state_arr[0]+0.010000)<10.000000 AND
((unsigned char)input[0].float_state_arr[5])<>0 AND
((unsigned char)input[0].float_state_arr[4])=0 AND
input[0].x_arr[8]>=70.000000 AND
((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))/12.500000)=<1.660000 AND
((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))/12.500000)>=0.130000

Output Values for case 56: (Symbolic,Concrete)
return value = 0, 0
ret_val[0].float_state_arr[0] = (input[0].float_state_arr[0]+0.010000), -370.990000
ret_val[0].float_state_arr[1] = input[0].float_state_arr[1], -78.000000
ret_val[0].float_state_arr[2] = (input[0].float_state_arr[2]+(((input[0].x_arr[9]+-((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))))*0.413280)*0.010000)), 337.000000
ret_val[0].float_state_arr[3] = 0.000000, 0.000000
ret_val[0].float_state_arr[4] = 1.000000, 1.000000
ret_val[0].float_state_arr[5] = 1.000000, 1.000000
ret_val[0].float_state_arr[6] = input[0].float_state_arr[6], -73.000000
ret_val[0].output_arr[0] = ((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))/12.500000), 1.440000
ret_val[0].output_arr[1] = 1.000000, 1.000000
ret_val[0].output_arr[2] = 12.500000, 12.500000

to explore negation deepest unexplored condition of predicate,
Path Predicate Prefix to solve :
afc.c: -140 input[0].x_arr[10]>-1.000000
afc.c: -142 ((unsigned char)input[0].float_state_arr[3])=0
afc.c: -146 (input[0].float_state_arr[0]+0.010000)<10.000000
afc.c: +148 ((unsigned char)input[0].float_state_arr[5])<>0
afc.c: -151 ((unsigned char)input[0].float_state_arr[4])=0
afc.c: +158 input[0].x_arr[8]>=70.000000
afc.c: -160 0=0
afc.c: -160b 1<>0
afc.c: +161 1<>0
afc.c: +162 1<>0
afc.c: +162b 1<>0
afc.c: -182 1<>0
afc.c: -191 1=0
Path Prefix to cover :
afc.c
-140 -142 -146 +148 -151 +158 -160 -160b +161 +162 +162b -182 -191
trivially infeasible

to explore negation deepest unexplored condition of predicate,
Path Predicate Prefix to solve :
afc.c: -140 input[0].x_arr[10]>-1.000000
afc.c: -142 ((unsigned char)input[0].float_state_arr[3])=0
afc.c: -146 (input[0].float_state_arr[0]+0.010000)<10.000000
afc.c: +148 ((unsigned char)input[0].float_state_arr[5])<>0
afc.c: -151 ((unsigned char)input[0].float_state_arr[4])=0
afc.c: +158 input[0].x_arr[8]>=70.000000
afc.c: -160 0=0
afc.c: -160b 1<>0
afc.c: +161 1<>0
afc.c: +162 1<>0
afc.c: +162b 1<>0
afc.c: +182 1=0
Path Prefix to cover :
afc.c
-140 -142 -146 +148 -151 +158 -160 -160b +161 +162 +162b +182
trivially infeasible

to explore negation deepest unexplored condition of predicate,
Path Predicate Prefix to solve :
afc.c: -140 input[0].x_arr[10]>-1.000000
afc.c: -142 ((unsigned char)input[0].float_state_arr[3])=0
afc.c: -146 (input[0].float_state_arr[0]+0.010000)<10.000000
afc.c: +148 ((unsigned char)input[0].float_state_arr[5])<>0
afc.c: -151 ((unsigned char)input[0].float_state_arr[4])=0
afc.c: +158 input[0].x_arr[8]>=70.000000
afc.c: -160 0=0
afc.c: -160b 1<>0
afc.c: +161 1<>0
afc.c: +162 1<>0
afc.c: -162b 1=0
Path Prefix to cover :
afc.c
-140 -142 -146 +148 -151 +158 -160 -160b +161 +162 -162b
trivially infeasible

to explore negation deepest unexplored condition of predicate,
Path Predicate Prefix to solve :
afc.c: -140 input[0].x_arr[10]>-1.000000
afc.c: -142 ((unsigned char)input[0].float_state_arr[3])=0
afc.c: -146 (input[0].float_state_arr[0]+0.010000)<10.000000
afc.c: +148 ((unsigned char)input[0].float_state_arr[5])<>0
afc.c: -151 ((unsigned char)input[0].float_state_arr[4])=0
afc.c: +158 input[0].x_arr[8]>=70.000000
afc.c: -160 0=0
afc.c: -160b 1<>0
afc.c: +161 1<>0
afc.c: -162 1=0
Path Prefix to cover :
afc.c
-140 -142 -146 +148 -151 +158 -160 -160b +161 -162
trivially infeasible

to explore negation deepest unexplored condition of predicate,
Path Predicate Prefix to solve :
afc.c: -140 input[0].x_arr[10]>-1.000000
afc.c: -142 ((unsigned char)input[0].float_state_arr[3])=0
afc.c: -146 (input[0].float_state_arr[0]+0.010000)<10.000000
afc.c: +148 ((unsigned char)input[0].float_state_arr[5])<>0
afc.c: -151 ((unsigned char)input[0].float_state_arr[4])=0
afc.c: +158 input[0].x_arr[8]>=70.000000
afc.c: -160 0=0
afc.c: -160b 1<>0
afc.c: -161 1=0
Path Prefix to cover :
afc.c
-140 -142 -146 +148 -151 +158 -160 -160b -161
trivially infeasible

to explore negation deepest unexplored condition of predicate,
Path Predicate Prefix to solve :
afc.c: -140 input[0].x_arr[10]>-1.000000
afc.c: -142 ((unsigned char)input[0].float_state_arr[3])=0
afc.c: -146 (input[0].float_state_arr[0]+0.010000)<10.000000
afc.c: +148 ((unsigned char)input[0].float_state_arr[5])<>0
afc.c: -151 ((unsigned char)input[0].float_state_arr[4])=0
afc.c: +158 input[0].x_arr[8]>=70.000000
afc.c: -160 0=0
afc.c: +160b 1=0
Path Prefix to cover :
afc.c
-140 -142 -146 +148 -151 +158 -160 +160b
trivially infeasible

to explore negation deepest unexplored condition of predicate,
Path Predicate Prefix to solve :
afc.c: -140 input[0].x_arr[10]>-1.000000
afc.c: -142 ((unsigned char)input[0].float_state_arr[3])=0
afc.c: -146 (input[0].float_state_arr[0]+0.010000)<10.000000
afc.c: +148 ((unsigned char)input[0].float_state_arr[5])<>0
afc.c: -151 ((unsigned char)input[0].float_state_arr[4])=0
afc.c: +158 input[0].x_arr[8]>=70.000000
afc.c: +160 0<>0
Path Prefix to cover :
afc.c
-140 -142 -146 +148 -151 +158 +160
trivially infeasible

to explore negation deepest unexplored condition of predicate,
Path Predicate Prefix to solve :
afc.c: -140 input[0].x_arr[10]>-1.000000
afc.c: -142 ((unsigned char)input[0].float_state_arr[3])=0
afc.c: -146 (input[0].float_state_arr[0]+0.010000)<10.000000
afc.c: -148 ((unsigned char)input[0].float_state_arr[5])=0
Path Prefix to cover :
afc.c
-140 -142 -146 -148


TEST CASE 57

Dimensions:
input__controller = 1;
input__controller[0].input_arr = 1;
input__controller[0].int_state_arr = 0;
input__controller[0].float_state_arr = 7;
input__controller[0].x_arr = 13;
ret_val__controller = 1;
ret_val__controller[0].int_state_arr = 0;
ret_val__controller[0].float_state_arr = 7;
ret_val__controller[0].output_arr = 3;

Other input values:
input__controller[0].input_arr[0] = -423.000000;
input__controller[0].float_state_arr[0] = -371.000000;
input__controller[0].float_state_arr[1] = -78.000000;
input__controller[0].float_state_arr[2] = -292.000000;
input__controller[0].float_state_arr[3] = -0.400000;
input__controller[0].float_state_arr[4] = -193.000000;
input__controller[0].float_state_arr[5] = 0.400000;
input__controller[0].float_state_arr[6] = -73.000000;
input__controller[0].x_arr[0] = -493.000000;
input__controller[0].x_arr[1] = 170.000000;
input__controller[0].x_arr[2] = -8.000000;
input__controller[0].x_arr[3] = -463.000000;
input__controller[0].x_arr[4] = -387.000000;
input__controller[0].x_arr[5] = -245.000000;
input__controller[0].x_arr[6] = 150.000000;
input__controller[0].x_arr[7] = -475.000000;
input__controller[0].x_arr[8] = -478.000000;
input__controller[0].x_arr[9] = -156.000000;
input__controller[0].x_arr[10] = 417.000000;
input__controller[0].x_arr[11] = 173.000000;
input__controller[0].x_arr[12] = -343.000000;
ret_val__controller[0].float_state_arr[0] = 397.000000;
ret_val__controller[0].float_state_arr[1] = -241.000000;
ret_val__controller[0].float_state_arr[2] = -268.000000;
ret_val__controller[0].float_state_arr[3] = -365.000000;
ret_val__controller[0].float_state_arr[4] = -94.000000;
ret_val__controller[0].float_state_arr[5] = -68.000000;
ret_val__controller[0].float_state_arr[6] = -139.000000;
ret_val__controller[0].output_arr[0] = 438.000000;
ret_val__controller[0].output_arr[1] = -491.000000;
ret_val__controller[0].output_arr[2] = -16.000000;

Result:
unknown

Path Covered :
afc.c
-140 -142 -146 -148 +151 -158 -160 +160b -162 -182 +191 +205


Path Predicate for case 57:
afc.c: -140 input[0].x_arr[10]>-1.000000
afc.c: -142 ((unsigned char)input[0].float_state_arr[3])=0
afc.c: -146 (input[0].float_state_arr[0]+0.010000)<10.000000
afc.c: -148 ((unsigned char)input[0].float_state_arr[5])=0
afc.c: +151 ((unsigned char)input[0].float_state_arr[4])<>0
afc.c: -158 input[0].x_arr[8]<50.000000
afc.c: -160 0=0
afc.c: +160b 0=0
afc.c: -162 0=0
afc.c: -182 1<>0
afc.c: +191 1<>0
afc.c: +205 ((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))/14.700000)>1.660000

Simplified Path Predicate for case 57:
input[0].x_arr[10]>-1.000000 AND
((unsigned char)input[0].float_state_arr[3])=0 AND
(input[0].float_state_arr[0]+0.010000)<10.000000 AND
((unsigned char)input[0].float_state_arr[5])=0 AND
((unsigned char)input[0].float_state_arr[4])<>0 AND
input[0].x_arr[8]<50.000000 AND
((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))/14.700000)>1.660000

Output Values for case 57: (Symbolic,Concrete)
return value = 0, 0
ret_val[0].float_state_arr[0] = (input[0].float_state_arr[0]+0.010000), -370.990000
ret_val[0].float_state_arr[1] = input[0].float_state_arr[1], -78.000000
ret_val[0].float_state_arr[2] = (input[0].float_state_arr[2]+(((input[0].x_arr[9]+-((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))))*0.413280)*0.010000)), -5957.592441
ret_val[0].float_state_arr[3] = 0.000000, 0.000000
ret_val[0].float_state_arr[4] = 0.000000, 0.000000
ret_val[0].float_state_arr[5] = 0.000000, 0.000000
ret_val[0].float_state_arr[6] = input[0].float_state_arr[6], -73.000000
ret_val[0].output_arr[0] = 1.660000, 1.660000
ret_val[0].output_arr[1] = 1.000000, 1.000000
ret_val[0].output_arr[2] = 14.700000, 14.700000

to explore negation deepest unexplored condition of predicate,
Path Predicate Prefix to solve :
afc.c: -140 input[0].x_arr[10]>-1.000000
afc.c: -142 ((unsigned char)input[0].float_state_arr[3])=0
afc.c: -146 (input[0].float_state_arr[0]+0.010000)<10.000000
afc.c: -148 ((unsigned char)input[0].float_state_arr[5])=0
afc.c: +151 ((unsigned char)input[0].float_state_arr[4])<>0
afc.c: -158 input[0].x_arr[8]<50.000000
afc.c: -160 0=0
afc.c: +160b 0=0
afc.c: -162 0=0
afc.c: -182 1<>0
afc.c: +191 1<>0
afc.c: -205 ((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))/14.700000)=<1.660000
Path Prefix to cover :
afc.c
-140 -142 -146 -148 +151 -158 -160 +160b -162 -182 +191 -205


TEST CASE 58

Dimensions:
input__controller = 1;
input__controller[0].input_arr = 1;
input__controller[0].int_state_arr = 0;
input__controller[0].float_state_arr = 7;
input__controller[0].x_arr = 13;
ret_val__controller = 1;
ret_val__controller[0].int_state_arr = 0;
ret_val__controller[0].float_state_arr = 7;
ret_val__controller[0].output_arr = 3;

Other input values:
input__controller[0].input_arr[0] = -423.000000;
input__controller[0].float_state_arr[0] = -371.000000;
input__controller[0].float_state_arr[1] = -78.000000;
input__controller[0].float_state_arr[2] = -405.000000;
input__controller[0].float_state_arr[3] = -0.400000;
input__controller[0].float_state_arr[4] = -193.000000;
input__controller[0].float_state_arr[5] = 0.400000;
input__controller[0].float_state_arr[6] = -73.000000;
input__controller[0].x_arr[0] = -493.000000;
input__controller[0].x_arr[1] = 170.000000;
input__controller[0].x_arr[2] = -8.000000;
input__controller[0].x_arr[3] = -463.000000;
input__controller[0].x_arr[4] = -387.000000;
input__controller[0].x_arr[5] = -245.000000;
input__controller[0].x_arr[6] = 150.000000;
input__controller[0].x_arr[7] = 0.000000;
input__controller[0].x_arr[8] = -478.000000;
input__controller[0].x_arr[9] = -0.366000;
input__controller[0].x_arr[10] = 417.000000;
input__controller[0].x_arr[11] = 173.000000;
input__controller[0].x_arr[12] = -343.000000;
ret_val__controller[0].float_state_arr[0] = 397.000000;
ret_val__controller[0].float_state_arr[1] = -241.000000;
ret_val__controller[0].float_state_arr[2] = -268.000000;
ret_val__controller[0].float_state_arr[3] = -365.000000;
ret_val__controller[0].float_state_arr[4] = -94.000000;
ret_val__controller[0].float_state_arr[5] = -68.000000;
ret_val__controller[0].float_state_arr[6] = -139.000000;
ret_val__controller[0].output_arr[0] = 438.000000;
ret_val__controller[0].output_arr[1] = -491.000000;
ret_val__controller[0].output_arr[2] = -16.000000;

Result:
unknown

Path Covered :
afc.c
-140 -142 -146 -148 +151 -158 -160 +160b -162 -182 +191 -205 +207


Path Predicate for case 58:
afc.c: -140 input[0].x_arr[10]>-1.000000
afc.c: -142 ((unsigned char)input[0].float_state_arr[3])=0
afc.c: -146 (input[0].float_state_arr[0]+0.010000)<10.000000
afc.c: -148 ((unsigned char)input[0].float_state_arr[5])=0
afc.c: +151 ((unsigned char)input[0].float_state_arr[4])<>0
afc.c: -158 input[0].x_arr[8]<50.000000
afc.c: -160 0=0
afc.c: +160b 0=0
afc.c: -162 0=0
afc.c: -182 1<>0
afc.c: +191 1<>0
afc.c: -205 ((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))/14.700000)=<1.660000
afc.c: +207 ((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))/14.700000)<0.130000

Simplified Path Predicate for case 58:
input[0].x_arr[10]>-1.000000 AND
((unsigned char)input[0].float_state_arr[3])=0 AND
(input[0].float_state_arr[0]+0.010000)<10.000000 AND
((unsigned char)input[0].float_state_arr[5])=0 AND
((unsigned char)input[0].float_state_arr[4])<>0 AND
input[0].x_arr[8]<50.000000 AND
((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))/14.700000)=<1.660000 AND
((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))/14.700000)<0.130000

Output Values for case 58: (Symbolic,Concrete)
return value = 0, 0
ret_val[0].float_state_arr[0] = (input[0].float_state_arr[0]+0.010000), -370.990000
ret_val[0].float_state_arr[1] = input[0].float_state_arr[1], -78.000000
ret_val[0].float_state_arr[2] = (input[0].float_state_arr[2]+(((input[0].x_arr[9]+-((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))))*0.413280)*0.010000)), -405.000000
ret_val[0].float_state_arr[3] = 0.000000, 0.000000
ret_val[0].float_state_arr[4] = 0.000000, 0.000000
ret_val[0].float_state_arr[5] = 0.000000, 0.000000
ret_val[0].float_state_arr[6] = input[0].float_state_arr[6], -73.000000
ret_val[0].output_arr[0] = 0.130000, 0.130000
ret_val[0].output_arr[1] = 1.000000, 1.000000
ret_val[0].output_arr[2] = 14.700000, 14.700000

to explore negation deepest unexplored condition of predicate,
Path Predicate Prefix to solve :
afc.c: -140 input[0].x_arr[10]>-1.000000
afc.c: -142 ((unsigned char)input[0].float_state_arr[3])=0
afc.c: -146 (input[0].float_state_arr[0]+0.010000)<10.000000
afc.c: -148 ((unsigned char)input[0].float_state_arr[5])=0
afc.c: +151 ((unsigned char)input[0].float_state_arr[4])<>0
afc.c: -158 input[0].x_arr[8]<50.000000
afc.c: -160 0=0
afc.c: +160b 0=0
afc.c: -162 0=0
afc.c: -182 1<>0
afc.c: +191 1<>0
afc.c: -205 ((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))/14.700000)=<1.660000
afc.c: -207 ((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))/14.700000)>=0.130000
Path Prefix to cover :
afc.c
-140 -142 -146 -148 +151 -158 -160 +160b -162 -182 +191 -205 -207


TEST CASE 59

Dimensions:
input__controller = 1;
input__controller[0].input_arr = 1;
input__controller[0].int_state_arr = 0;
input__controller[0].float_state_arr = 7;
input__controller[0].x_arr = 13;
ret_val__controller = 1;
ret_val__controller[0].int_state_arr = 0;
ret_val__controller[0].float_state_arr = 7;
ret_val__controller[0].output_arr = 3;

Other input values:
input__controller[0].input_arr[0] = -423.000000;
input__controller[0].float_state_arr[0] = -371.000000;
input__controller[0].float_state_arr[1] = -78.000000;
input__controller[0].float_state_arr[2] = 385.000000;
input__controller[0].float_state_arr[3] = -0.400000;
input__controller[0].float_state_arr[4] = -193.000000;
input__controller[0].float_state_arr[5] = 0.400000;
input__controller[0].float_state_arr[6] = -73.000000;
input__controller[0].x_arr[0] = -493.000000;
input__controller[0].x_arr[1] = 170.000000;
input__controller[0].x_arr[2] = -8.000000;
input__controller[0].x_arr[3] = -463.000000;
input__controller[0].x_arr[4] = -387.000000;
input__controller[0].x_arr[5] = -245.000000;
input__controller[0].x_arr[6] = 150.000000;
input__controller[0].x_arr[7] = -0.002291;
input__controller[0].x_arr[8] = -478.000000;
input__controller[0].x_arr[9] = 11.000000;
input__controller[0].x_arr[10] = 417.000000;
input__controller[0].x_arr[11] = 173.000000;
input__controller[0].x_arr[12] = -343.000000;
ret_val__controller[0].float_state_arr[0] = 397.000000;
ret_val__controller[0].float_state_arr[1] = -241.000000;
ret_val__controller[0].float_state_arr[2] = -268.000000;
ret_val__controller[0].float_state_arr[3] = -365.000000;
ret_val__controller[0].float_state_arr[4] = -94.000000;
ret_val__controller[0].float_state_arr[5] = -68.000000;
ret_val__controller[0].float_state_arr[6] = -139.000000;
ret_val__controller[0].output_arr[0] = 438.000000;
ret_val__controller[0].output_arr[1] = -491.000000;
ret_val__controller[0].output_arr[2] = -16.000000;

Result:
unknown

Path Covered :
afc.c
-140 -142 -146 -148 +151 -158 -160 +160b -162 -182 +191 -205 -207


Path Predicate for case 59:
afc.c: -140 input[0].x_arr[10]>-1.000000
afc.c: -142 ((unsigned char)input[0].float_state_arr[3])=0
afc.c: -146 (input[0].float_state_arr[0]+0.010000)<10.000000
afc.c: -148 ((unsigned char)input[0].float_state_arr[5])=0
afc.c: +151 ((unsigned char)input[0].float_state_arr[4])<>0
afc.c: -158 input[0].x_arr[8]<50.000000
afc.c: -160 0=0
afc.c: +160b 0=0
afc.c: -162 0=0
afc.c: -182 1<>0
afc.c: +191 1<>0
afc.c: -205 ((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))/14.700000)=<1.660000
afc.c: -207 ((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))/14.700000)>=0.130000

Simplified Path Predicate for case 59:
input[0].x_arr[10]>-1.000000 AND
((unsigned char)input[0].float_state_arr[3])=0 AND
(input[0].float_state_arr[0]+0.010000)<10.000000 AND
((unsigned char)input[0].float_state_arr[5])=0 AND
((unsigned char)input[0].float_state_arr[4])<>0 AND
input[0].x_arr[8]<50.000000 AND
((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))/14.700000)=<1.660000 AND
((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))/14.700000)>=0.130000

Output Values for case 59: (Symbolic,Concrete)
return value = 0, 0
ret_val[0].float_state_arr[0] = (input[0].float_state_arr[0]+0.010000), -370.990000
ret_val[0].float_state_arr[1] = input[0].float_state_arr[1], -78.000000
ret_val[0].float_state_arr[2] = (input[0].float_state_arr[2]+(((input[0].x_arr[9]+-((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))))*0.413280)*0.010000)), 385.000000
ret_val[0].float_state_arr[3] = 0.000000, 0.000000
ret_val[0].float_state_arr[4] = 0.000000, 0.000000
ret_val[0].float_state_arr[5] = 0.000000, 0.000000
ret_val[0].float_state_arr[6] = input[0].float_state_arr[6], -73.000000
ret_val[0].output_arr[0] = ((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))/14.700000), 0.748299
ret_val[0].output_arr[1] = 1.000000, 1.000000
ret_val[0].output_arr[2] = 14.700000, 14.700000

to explore negation deepest unexplored condition of predicate,
Path Predicate Prefix to solve :
afc.c: -140 input[0].x_arr[10]>-1.000000
afc.c: -142 ((unsigned char)input[0].float_state_arr[3])=0
afc.c: -146 (input[0].float_state_arr[0]+0.010000)<10.000000
afc.c: -148 ((unsigned char)input[0].float_state_arr[5])=0
afc.c: +151 ((unsigned char)input[0].float_state_arr[4])<>0
afc.c: -158 input[0].x_arr[8]<50.000000
afc.c: -160 0=0
afc.c: +160b 0=0
afc.c: -162 0=0
afc.c: -182 1<>0
afc.c: -191 1=0
Path Prefix to cover :
afc.c
-140 -142 -146 -148 +151 -158 -160 +160b -162 -182 -191
trivially infeasible

to explore negation deepest unexplored condition of predicate,
Path Predicate Prefix to solve :
afc.c: -140 input[0].x_arr[10]>-1.000000
afc.c: -142 ((unsigned char)input[0].float_state_arr[3])=0
afc.c: -146 (input[0].float_state_arr[0]+0.010000)<10.000000
afc.c: -148 ((unsigned char)input[0].float_state_arr[5])=0
afc.c: +151 ((unsigned char)input[0].float_state_arr[4])<>0
afc.c: -158 input[0].x_arr[8]<50.000000
afc.c: -160 0=0
afc.c: +160b 0=0
afc.c: -162 0=0
afc.c: +182 1=0
Path Prefix to cover :
afc.c
-140 -142 -146 -148 +151 -158 -160 +160b -162 +182
trivially infeasible

to explore negation deepest unexplored condition of predicate,
Path Predicate Prefix to solve :
afc.c: -140 input[0].x_arr[10]>-1.000000
afc.c: -142 ((unsigned char)input[0].float_state_arr[3])=0
afc.c: -146 (input[0].float_state_arr[0]+0.010000)<10.000000
afc.c: -148 ((unsigned char)input[0].float_state_arr[5])=0
afc.c: +151 ((unsigned char)input[0].float_state_arr[4])<>0
afc.c: -158 input[0].x_arr[8]<50.000000
afc.c: -160 0=0
afc.c: +160b 0=0
afc.c: +162 0<>0
Path Prefix to cover :
afc.c
-140 -142 -146 -148 +151 -158 -160 +160b +162
trivially infeasible

to explore negation deepest unexplored condition of predicate,
Path Predicate Prefix to solve :
afc.c: -140 input[0].x_arr[10]>-1.000000
afc.c: -142 ((unsigned char)input[0].float_state_arr[3])=0
afc.c: -146 (input[0].float_state_arr[0]+0.010000)<10.000000
afc.c: -148 ((unsigned char)input[0].float_state_arr[5])=0
afc.c: +151 ((unsigned char)input[0].float_state_arr[4])<>0
afc.c: -158 input[0].x_arr[8]<50.000000
afc.c: -160 0=0
afc.c: -160b 0<>0
Path Prefix to cover :
afc.c
-140 -142 -146 -148 +151 -158 -160 -160b
trivially infeasible

to explore negation deepest unexplored condition of predicate,
Path Predicate Prefix to solve :
afc.c: -140 input[0].x_arr[10]>-1.000000
afc.c: -142 ((unsigned char)input[0].float_state_arr[3])=0
afc.c: -146 (input[0].float_state_arr[0]+0.010000)<10.000000
afc.c: -148 ((unsigned char)input[0].float_state_arr[5])=0
afc.c: +151 ((unsigned char)input[0].float_state_arr[4])<>0
afc.c: -158 input[0].x_arr[8]<50.000000
afc.c: +160 0<>0
Path Prefix to cover :
afc.c
-140 -142 -146 -148 +151 -158 +160
trivially infeasible

to explore negation deepest unexplored condition of predicate,
Path Predicate Prefix to solve :
afc.c: -140 input[0].x_arr[10]>-1.000000
afc.c: -142 ((unsigned char)input[0].float_state_arr[3])=0
afc.c: -146 (input[0].float_state_arr[0]+0.010000)<10.000000
afc.c: -148 ((unsigned char)input[0].float_state_arr[5])=0
afc.c: +151 ((unsigned char)input[0].float_state_arr[4])<>0
afc.c: +158 input[0].x_arr[8]>=50.000000
Path Prefix to cover :
afc.c
-140 -142 -146 -148 +151 +158


TEST CASE 60

Dimensions:
input__controller = 1;
input__controller[0].input_arr = 1;
input__controller[0].int_state_arr = 0;
input__controller[0].float_state_arr = 7;
input__controller[0].x_arr = 13;
ret_val__controller = 1;
ret_val__controller[0].int_state_arr = 0;
ret_val__controller[0].float_state_arr = 7;
ret_val__controller[0].output_arr = 3;

Other input values:
input__controller[0].input_arr[0] = -423.000000;
input__controller[0].float_state_arr[0] = -371.000000;
input__controller[0].float_state_arr[1] = -78.000000;
input__controller[0].float_state_arr[2] = -292.000000;
input__controller[0].float_state_arr[3] = -0.400000;
input__controller[0].float_state_arr[4] = -193.000000;
input__controller[0].float_state_arr[5] = 0.400000;
input__controller[0].float_state_arr[6] = -73.000000;
input__controller[0].x_arr[0] = -493.000000;
input__controller[0].x_arr[1] = 170.000000;
input__controller[0].x_arr[2] = -8.000000;
input__controller[0].x_arr[3] = -463.000000;
input__controller[0].x_arr[4] = -387.000000;
input__controller[0].x_arr[5] = -245.000000;
input__controller[0].x_arr[6] = 150.000000;
input__controller[0].x_arr[7] = -475.000000;
input__controller[0].x_arr[8] = 1023.000000;
input__controller[0].x_arr[9] = -156.000000;
input__controller[0].x_arr[10] = 417.000000;
input__controller[0].x_arr[11] = 173.000000;
input__controller[0].x_arr[12] = -343.000000;
ret_val__controller[0].float_state_arr[0] = 397.000000;
ret_val__controller[0].float_state_arr[1] = -241.000000;
ret_val__controller[0].float_state_arr[2] = -268.000000;
ret_val__controller[0].float_state_arr[3] = -365.000000;
ret_val__controller[0].float_state_arr[4] = -94.000000;
ret_val__controller[0].float_state_arr[5] = -68.000000;
ret_val__controller[0].float_state_arr[6] = -139.000000;
ret_val__controller[0].output_arr[0] = 438.000000;
ret_val__controller[0].output_arr[1] = -491.000000;
ret_val__controller[0].output_arr[2] = -16.000000;

Result:
unknown

Path Covered :
afc.c
-140 -142 -146 -148 +151 +158 -160 +160b -162 -182 +191 +205


Path Predicate for case 60:
afc.c: -140 input[0].x_arr[10]>-1.000000
afc.c: -142 ((unsigned char)input[0].float_state_arr[3])=0
afc.c: -146 (input[0].float_state_arr[0]+0.010000)<10.000000
afc.c: -148 ((unsigned char)input[0].float_state_arr[5])=0
afc.c: +151 ((unsigned char)input[0].float_state_arr[4])<>0
afc.c: +158 input[0].x_arr[8]>=50.000000
afc.c: -160 0=0
afc.c: +160b 0=0
afc.c: -162 0=0
afc.c: -182 1<>0
afc.c: +191 1<>0
afc.c: +205 ((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))/14.700000)>1.660000

Simplified Path Predicate for case 60:
input[0].x_arr[10]>-1.000000 AND
((unsigned char)input[0].float_state_arr[3])=0 AND
(input[0].float_state_arr[0]+0.010000)<10.000000 AND
((unsigned char)input[0].float_state_arr[5])=0 AND
((unsigned char)input[0].float_state_arr[4])<>0 AND
input[0].x_arr[8]>=50.000000 AND
((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))/14.700000)>1.660000

Output Values for case 60: (Symbolic,Concrete)
return value = 0, 0
ret_val[0].float_state_arr[0] = (input[0].float_state_arr[0]+0.010000), -370.990000
ret_val[0].float_state_arr[1] = input[0].float_state_arr[1], -78.000000
ret_val[0].float_state_arr[2] = (input[0].float_state_arr[2]+(((input[0].x_arr[9]+-((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))))*0.413280)*0.010000)), -5957.592441
ret_val[0].float_state_arr[3] = 0.000000, 0.000000
ret_val[0].float_state_arr[4] = 1.000000, 1.000000
ret_val[0].float_state_arr[5] = 0.000000, 0.000000
ret_val[0].float_state_arr[6] = input[0].float_state_arr[6], -73.000000
ret_val[0].output_arr[0] = 1.660000, 1.660000
ret_val[0].output_arr[1] = 1.000000, 1.000000
ret_val[0].output_arr[2] = 14.700000, 14.700000

to explore negation deepest unexplored condition of predicate,
Path Predicate Prefix to solve :
afc.c: -140 input[0].x_arr[10]>-1.000000
afc.c: -142 ((unsigned char)input[0].float_state_arr[3])=0
afc.c: -146 (input[0].float_state_arr[0]+0.010000)<10.000000
afc.c: -148 ((unsigned char)input[0].float_state_arr[5])=0
afc.c: +151 ((unsigned char)input[0].float_state_arr[4])<>0
afc.c: +158 input[0].x_arr[8]>=50.000000
afc.c: -160 0=0
afc.c: +160b 0=0
afc.c: -162 0=0
afc.c: -182 1<>0
afc.c: +191 1<>0
afc.c: -205 ((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))/14.700000)=<1.660000
Path Prefix to cover :
afc.c
-140 -142 -146 -148 +151 +158 -160 +160b -162 -182 +191 -205


TEST CASE 61

Dimensions:
input__controller = 1;
input__controller[0].input_arr = 1;
input__controller[0].int_state_arr = 0;
input__controller[0].float_state_arr = 7;
input__controller[0].x_arr = 13;
ret_val__controller = 1;
ret_val__controller[0].int_state_arr = 0;
ret_val__controller[0].float_state_arr = 7;
ret_val__controller[0].output_arr = 3;

Other input values:
input__controller[0].input_arr[0] = -423.000000;
input__controller[0].float_state_arr[0] = -371.000000;
input__controller[0].float_state_arr[1] = -78.000000;
input__controller[0].float_state_arr[2] = 289.000000;
input__controller[0].float_state_arr[3] = -0.400000;
input__controller[0].float_state_arr[4] = -193.000000;
input__controller[0].float_state_arr[5] = 0.400000;
input__controller[0].float_state_arr[6] = -73.000000;
input__controller[0].x_arr[0] = -493.000000;
input__controller[0].x_arr[1] = 170.000000;
input__controller[0].x_arr[2] = -8.000000;
input__controller[0].x_arr[3] = -463.000000;
input__controller[0].x_arr[4] = -387.000000;
input__controller[0].x_arr[5] = -245.000000;
input__controller[0].x_arr[6] = 150.000000;
input__controller[0].x_arr[7] = 0.000000;
input__controller[0].x_arr[8] = 1023.000000;
input__controller[0].x_arr[9] = -0.366000;
input__controller[0].x_arr[10] = 417.000000;
input__controller[0].x_arr[11] = 173.000000;
input__controller[0].x_arr[12] = -343.000000;
ret_val__controller[0].float_state_arr[0] = 397.000000;
ret_val__controller[0].float_state_arr[1] = -241.000000;
ret_val__controller[0].float_state_arr[2] = -268.000000;
ret_val__controller[0].float_state_arr[3] = -365.000000;
ret_val__controller[0].float_state_arr[4] = -94.000000;
ret_val__controller[0].float_state_arr[5] = -68.000000;
ret_val__controller[0].float_state_arr[6] = -139.000000;
ret_val__controller[0].output_arr[0] = 438.000000;
ret_val__controller[0].output_arr[1] = -491.000000;
ret_val__controller[0].output_arr[2] = -16.000000;

Result:
unknown

Path Covered :
afc.c
-140 -142 -146 -148 +151 +158 -160 +160b -162 -182 +191 -205 +207


Path Predicate for case 61:
afc.c: -140 input[0].x_arr[10]>-1.000000
afc.c: -142 ((unsigned char)input[0].float_state_arr[3])=0
afc.c: -146 (input[0].float_state_arr[0]+0.010000)<10.000000
afc.c: -148 ((unsigned char)input[0].float_state_arr[5])=0
afc.c: +151 ((unsigned char)input[0].float_state_arr[4])<>0
afc.c: +158 input[0].x_arr[8]>=50.000000
afc.c: -160 0=0
afc.c: +160b 0=0
afc.c: -162 0=0
afc.c: -182 1<>0
afc.c: +191 1<>0
afc.c: -205 ((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))/14.700000)=<1.660000
afc.c: +207 ((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))/14.700000)<0.130000

Simplified Path Predicate for case 61:
input[0].x_arr[10]>-1.000000 AND
((unsigned char)input[0].float_state_arr[3])=0 AND
(input[0].float_state_arr[0]+0.010000)<10.000000 AND
((unsigned char)input[0].float_state_arr[5])=0 AND
((unsigned char)input[0].float_state_arr[4])<>0 AND
input[0].x_arr[8]>=50.000000 AND
((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))/14.700000)=<1.660000 AND
((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))/14.700000)<0.130000

Output Values for case 61: (Symbolic,Concrete)
return value = 0, 0
ret_val[0].float_state_arr[0] = (input[0].float_state_arr[0]+0.010000), -370.990000
ret_val[0].float_state_arr[1] = input[0].float_state_arr[1], -78.000000
ret_val[0].float_state_arr[2] = (input[0].float_state_arr[2]+(((input[0].x_arr[9]+-((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))))*0.413280)*0.010000)), 289.000000
ret_val[0].float_state_arr[3] = 0.000000, 0.000000
ret_val[0].float_state_arr[4] = 1.000000, 1.000000
ret_val[0].float_state_arr[5] = 0.000000, 0.000000
ret_val[0].float_state_arr[6] = input[0].float_state_arr[6], -73.000000
ret_val[0].output_arr[0] = 0.130000, 0.130000
ret_val[0].output_arr[1] = 1.000000, 1.000000
ret_val[0].output_arr[2] = 14.700000, 14.700000

to explore negation deepest unexplored condition of predicate,
Path Predicate Prefix to solve :
afc.c: -140 input[0].x_arr[10]>-1.000000
afc.c: -142 ((unsigned char)input[0].float_state_arr[3])=0
afc.c: -146 (input[0].float_state_arr[0]+0.010000)<10.000000
afc.c: -148 ((unsigned char)input[0].float_state_arr[5])=0
afc.c: +151 ((unsigned char)input[0].float_state_arr[4])<>0
afc.c: +158 input[0].x_arr[8]>=50.000000
afc.c: -160 0=0
afc.c: +160b 0=0
afc.c: -162 0=0
afc.c: -182 1<>0
afc.c: +191 1<>0
afc.c: -205 ((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))/14.700000)=<1.660000
afc.c: -207 ((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))/14.700000)>=0.130000
Path Prefix to cover :
afc.c
-140 -142 -146 -148 +151 +158 -160 +160b -162 -182 +191 -205 -207


TEST CASE 62

Dimensions:
input__controller = 1;
input__controller[0].input_arr = 1;
input__controller[0].int_state_arr = 0;
input__controller[0].float_state_arr = 7;
input__controller[0].x_arr = 13;
ret_val__controller = 1;
ret_val__controller[0].int_state_arr = 0;
ret_val__controller[0].float_state_arr = 7;
ret_val__controller[0].output_arr = 3;

Other input values:
input__controller[0].input_arr[0] = -423.000000;
input__controller[0].float_state_arr[0] = -371.000000;
input__controller[0].float_state_arr[1] = -78.000000;
input__controller[0].float_state_arr[2] = -431.000000;
input__controller[0].float_state_arr[3] = -0.400000;
input__controller[0].float_state_arr[4] = -193.000000;
input__controller[0].float_state_arr[5] = 0.400000;
input__controller[0].float_state_arr[6] = -73.000000;
input__controller[0].x_arr[0] = -493.000000;
input__controller[0].x_arr[1] = 170.000000;
input__controller[0].x_arr[2] = -8.000000;
input__controller[0].x_arr[3] = -463.000000;
input__controller[0].x_arr[4] = -387.000000;
input__controller[0].x_arr[5] = -245.000000;
input__controller[0].x_arr[6] = 150.000000;
input__controller[0].x_arr[7] = -0.000693;
input__controller[0].x_arr[8] = 1023.000000;
input__controller[0].x_arr[9] = 4.000000;
input__controller[0].x_arr[10] = 417.000000;
input__controller[0].x_arr[11] = 173.000000;
input__controller[0].x_arr[12] = -343.000000;
ret_val__controller[0].float_state_arr[0] = 397.000000;
ret_val__controller[0].float_state_arr[1] = -241.000000;
ret_val__controller[0].float_state_arr[2] = -268.000000;
ret_val__controller[0].float_state_arr[3] = -365.000000;
ret_val__controller[0].float_state_arr[4] = -94.000000;
ret_val__controller[0].float_state_arr[5] = -68.000000;
ret_val__controller[0].float_state_arr[6] = -139.000000;
ret_val__controller[0].output_arr[0] = 438.000000;
ret_val__controller[0].output_arr[1] = -491.000000;
ret_val__controller[0].output_arr[2] = -16.000000;

Result:
unknown

Path Covered :
afc.c
-140 -142 -146 -148 +151 +158 -160 +160b -162 -182 +191 -205 -207


Path Predicate for case 62:
afc.c: -140 input[0].x_arr[10]>-1.000000
afc.c: -142 ((unsigned char)input[0].float_state_arr[3])=0
afc.c: -146 (input[0].float_state_arr[0]+0.010000)<10.000000
afc.c: -148 ((unsigned char)input[0].float_state_arr[5])=0
afc.c: +151 ((unsigned char)input[0].float_state_arr[4])<>0
afc.c: +158 input[0].x_arr[8]>=50.000000
afc.c: -160 0=0
afc.c: +160b 0=0
afc.c: -162 0=0
afc.c: -182 1<>0
afc.c: +191 1<>0
afc.c: -205 ((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))/14.700000)=<1.660000
afc.c: -207 ((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))/14.700000)>=0.130000

Simplified Path Predicate for case 62:
input[0].x_arr[10]>-1.000000 AND
((unsigned char)input[0].float_state_arr[3])=0 AND
(input[0].float_state_arr[0]+0.010000)<10.000000 AND
((unsigned char)input[0].float_state_arr[5])=0 AND
((unsigned char)input[0].float_state_arr[4])<>0 AND
input[0].x_arr[8]>=50.000000 AND
((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))/14.700000)=<1.660000 AND
((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))/14.700000)>=0.130000

Output Values for case 62: (Symbolic,Concrete)
return value = 0, 0
ret_val[0].float_state_arr[0] = (input[0].float_state_arr[0]+0.010000), -370.990000
ret_val[0].float_state_arr[1] = input[0].float_state_arr[1], -78.000000
ret_val[0].float_state_arr[2] = (input[0].float_state_arr[2]+(((input[0].x_arr[9]+-((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))))*0.413280)*0.010000)), -431.000000
ret_val[0].float_state_arr[3] = 0.000000, 0.000000
ret_val[0].float_state_arr[4] = 1.000000, 1.000000
ret_val[0].float_state_arr[5] = 0.000000, 0.000000
ret_val[0].float_state_arr[6] = input[0].float_state_arr[6], -73.000000
ret_val[0].output_arr[0] = ((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))/14.700000), 0.272109
ret_val[0].output_arr[1] = 1.000000, 1.000000
ret_val[0].output_arr[2] = 14.700000, 14.700000

to explore negation deepest unexplored condition of predicate,
Path Predicate Prefix to solve :
afc.c: -140 input[0].x_arr[10]>-1.000000
afc.c: -142 ((unsigned char)input[0].float_state_arr[3])=0
afc.c: -146 (input[0].float_state_arr[0]+0.010000)<10.000000
afc.c: -148 ((unsigned char)input[0].float_state_arr[5])=0
afc.c: +151 ((unsigned char)input[0].float_state_arr[4])<>0
afc.c: +158 input[0].x_arr[8]>=50.000000
afc.c: -160 0=0
afc.c: +160b 0=0
afc.c: -162 0=0
afc.c: -182 1<>0
afc.c: -191 1=0
Path Prefix to cover :
afc.c
-140 -142 -146 -148 +151 +158 -160 +160b -162 -182 -191
trivially infeasible

to explore negation deepest unexplored condition of predicate,
Path Predicate Prefix to solve :
afc.c: -140 input[0].x_arr[10]>-1.000000
afc.c: -142 ((unsigned char)input[0].float_state_arr[3])=0
afc.c: -146 (input[0].float_state_arr[0]+0.010000)<10.000000
afc.c: -148 ((unsigned char)input[0].float_state_arr[5])=0
afc.c: +151 ((unsigned char)input[0].float_state_arr[4])<>0
afc.c: +158 input[0].x_arr[8]>=50.000000
afc.c: -160 0=0
afc.c: +160b 0=0
afc.c: -162 0=0
afc.c: +182 1=0
Path Prefix to cover :
afc.c
-140 -142 -146 -148 +151 +158 -160 +160b -162 +182
trivially infeasible

to explore negation deepest unexplored condition of predicate,
Path Predicate Prefix to solve :
afc.c: -140 input[0].x_arr[10]>-1.000000
afc.c: -142 ((unsigned char)input[0].float_state_arr[3])=0
afc.c: -146 (input[0].float_state_arr[0]+0.010000)<10.000000
afc.c: -148 ((unsigned char)input[0].float_state_arr[5])=0
afc.c: +151 ((unsigned char)input[0].float_state_arr[4])<>0
afc.c: +158 input[0].x_arr[8]>=50.000000
afc.c: -160 0=0
afc.c: +160b 0=0
afc.c: +162 0<>0
Path Prefix to cover :
afc.c
-140 -142 -146 -148 +151 +158 -160 +160b +162
trivially infeasible

to explore negation deepest unexplored condition of predicate,
Path Predicate Prefix to solve :
afc.c: -140 input[0].x_arr[10]>-1.000000
afc.c: -142 ((unsigned char)input[0].float_state_arr[3])=0
afc.c: -146 (input[0].float_state_arr[0]+0.010000)<10.000000
afc.c: -148 ((unsigned char)input[0].float_state_arr[5])=0
afc.c: +151 ((unsigned char)input[0].float_state_arr[4])<>0
afc.c: +158 input[0].x_arr[8]>=50.000000
afc.c: -160 0=0
afc.c: -160b 0<>0
Path Prefix to cover :
afc.c
-140 -142 -146 -148 +151 +158 -160 -160b
trivially infeasible

to explore negation deepest unexplored condition of predicate,
Path Predicate Prefix to solve :
afc.c: -140 input[0].x_arr[10]>-1.000000
afc.c: -142 ((unsigned char)input[0].float_state_arr[3])=0
afc.c: -146 (input[0].float_state_arr[0]+0.010000)<10.000000
afc.c: -148 ((unsigned char)input[0].float_state_arr[5])=0
afc.c: +151 ((unsigned char)input[0].float_state_arr[4])<>0
afc.c: +158 input[0].x_arr[8]>=50.000000
afc.c: +160 0<>0
Path Prefix to cover :
afc.c
-140 -142 -146 -148 +151 +158 +160
trivially infeasible

to explore negation deepest unexplored condition of predicate,
Path Predicate Prefix to solve :
afc.c: -140 input[0].x_arr[10]>-1.000000
afc.c: -142 ((unsigned char)input[0].float_state_arr[3])=0
afc.c: -146 (input[0].float_state_arr[0]+0.010000)<10.000000
afc.c: -148 ((unsigned char)input[0].float_state_arr[5])=0
afc.c: -151 ((unsigned char)input[0].float_state_arr[4])=0
Path Prefix to cover :
afc.c
-140 -142 -146 -148 -151


TEST CASE 63

Dimensions:
input__controller = 1;
input__controller[0].input_arr = 1;
input__controller[0].int_state_arr = 0;
input__controller[0].float_state_arr = 7;
input__controller[0].x_arr = 13;
ret_val__controller = 1;
ret_val__controller[0].int_state_arr = 0;
ret_val__controller[0].float_state_arr = 7;
ret_val__controller[0].output_arr = 3;

Other input values:
input__controller[0].input_arr[0] = -423.000000;
input__controller[0].float_state_arr[0] = -371.000000;
input__controller[0].float_state_arr[1] = -78.000000;
input__controller[0].float_state_arr[2] = -292.000000;
input__controller[0].float_state_arr[3] = -0.400000;
input__controller[0].float_state_arr[4] = -0.500000;
input__controller[0].float_state_arr[5] = 0.400000;
input__controller[0].float_state_arr[6] = -73.000000;
input__controller[0].x_arr[0] = -493.000000;
input__controller[0].x_arr[1] = 170.000000;
input__controller[0].x_arr[2] = -8.000000;
input__controller[0].x_arr[3] = -463.000000;
input__controller[0].x_arr[4] = -387.000000;
input__controller[0].x_arr[5] = -245.000000;
input__controller[0].x_arr[6] = 150.000000;
input__controller[0].x_arr[7] = -475.000000;
input__controller[0].x_arr[8] = -478.000000;
input__controller[0].x_arr[9] = -156.000000;
input__controller[0].x_arr[10] = 417.000000;
input__controller[0].x_arr[11] = 173.000000;
input__controller[0].x_arr[12] = -343.000000;
ret_val__controller[0].float_state_arr[0] = 397.000000;
ret_val__controller[0].float_state_arr[1] = -241.000000;
ret_val__controller[0].float_state_arr[2] = -268.000000;
ret_val__controller[0].float_state_arr[3] = -365.000000;
ret_val__controller[0].float_state_arr[4] = -94.000000;
ret_val__controller[0].float_state_arr[5] = -68.000000;
ret_val__controller[0].float_state_arr[6] = -139.000000;
ret_val__controller[0].output_arr[0] = 438.000000;
ret_val__controller[0].output_arr[1] = -491.000000;
ret_val__controller[0].output_arr[2] = -16.000000;

Result:
unknown

Path Covered :
afc.c
-140 -142 -146 -148 -151 -158 -160 +160b -162 -182 +191 +205


Path Predicate for case 63:
afc.c: -140 input[0].x_arr[10]>-1.000000
afc.c: -142 ((unsigned char)input[0].float_state_arr[3])=0
afc.c: -146 (input[0].float_state_arr[0]+0.010000)<10.000000
afc.c: -148 ((unsigned char)input[0].float_state_arr[5])=0
afc.c: -151 ((unsigned char)input[0].float_state_arr[4])=0
afc.c: -158 input[0].x_arr[8]<70.000000
afc.c: -160 0=0
afc.c: +160b 0=0
afc.c: -162 0=0
afc.c: -182 1<>0
afc.c: +191 1<>0
afc.c: +205 ((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))/14.700000)>1.660000

Simplified Path Predicate for case 63:
input[0].x_arr[10]>-1.000000 AND
((unsigned char)input[0].float_state_arr[3])=0 AND
(input[0].float_state_arr[0]+0.010000)<10.000000 AND
((unsigned char)input[0].float_state_arr[5])=0 AND
((unsigned char)input[0].float_state_arr[4])=0 AND
input[0].x_arr[8]<70.000000 AND
((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))/14.700000)>1.660000

Output Values for case 63: (Symbolic,Concrete)
return value = 0, 0
ret_val[0].float_state_arr[0] = (input[0].float_state_arr[0]+0.010000), -370.990000
ret_val[0].float_state_arr[1] = input[0].float_state_arr[1], -78.000000
ret_val[0].float_state_arr[2] = (input[0].float_state_arr[2]+(((input[0].x_arr[9]+-((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))))*0.413280)*0.010000)), -5957.592441
ret_val[0].float_state_arr[3] = 0.000000, 0.000000
ret_val[0].float_state_arr[4] = 0.000000, 0.000000
ret_val[0].float_state_arr[5] = 0.000000, 0.000000
ret_val[0].float_state_arr[6] = input[0].float_state_arr[6], -73.000000
ret_val[0].output_arr[0] = 1.660000, 1.660000
ret_val[0].output_arr[1] = 1.000000, 1.000000
ret_val[0].output_arr[2] = 14.700000, 14.700000

to explore negation deepest unexplored condition of predicate,
Path Predicate Prefix to solve :
afc.c: -140 input[0].x_arr[10]>-1.000000
afc.c: -142 ((unsigned char)input[0].float_state_arr[3])=0
afc.c: -146 (input[0].float_state_arr[0]+0.010000)<10.000000
afc.c: -148 ((unsigned char)input[0].float_state_arr[5])=0
afc.c: -151 ((unsigned char)input[0].float_state_arr[4])=0
afc.c: -158 input[0].x_arr[8]<70.000000
afc.c: -160 0=0
afc.c: +160b 0=0
afc.c: -162 0=0
afc.c: -182 1<>0
afc.c: +191 1<>0
afc.c: -205 ((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))/14.700000)=<1.660000
Path Prefix to cover :
afc.c
-140 -142 -146 -148 -151 -158 -160 +160b -162 -182 +191 -205


TEST CASE 64

Dimensions:
input__controller = 1;
input__controller[0].input_arr = 1;
input__controller[0].int_state_arr = 0;
input__controller[0].float_state_arr = 7;
input__controller[0].x_arr = 13;
ret_val__controller = 1;
ret_val__controller[0].int_state_arr = 0;
ret_val__controller[0].float_state_arr = 7;
ret_val__controller[0].output_arr = 3;

Other input values:
input__controller[0].input_arr[0] = -423.000000;
input__controller[0].float_state_arr[0] = -371.000000;
input__controller[0].float_state_arr[1] = -78.000000;
input__controller[0].float_state_arr[2] = -486.000000;
input__controller[0].float_state_arr[3] = -0.400000;
input__controller[0].float_state_arr[4] = -0.500000;
input__controller[0].float_state_arr[5] = 0.400000;
input__controller[0].float_state_arr[6] = -73.000000;
input__controller[0].x_arr[0] = -493.000000;
input__controller[0].x_arr[1] = 170.000000;
input__controller[0].x_arr[2] = -8.000000;
input__controller[0].x_arr[3] = -463.000000;
input__controller[0].x_arr[4] = -387.000000;
input__controller[0].x_arr[5] = -245.000000;
input__controller[0].x_arr[6] = 150.000000;
input__controller[0].x_arr[7] = -0.000000;
input__controller[0].x_arr[8] = -478.000000;
input__controller[0].x_arr[9] = -0.366000;
input__controller[0].x_arr[10] = 417.000000;
input__controller[0].x_arr[11] = 173.000000;
input__controller[0].x_arr[12] = -343.000000;
ret_val__controller[0].float_state_arr[0] = 397.000000;
ret_val__controller[0].float_state_arr[1] = -241.000000;
ret_val__controller[0].float_state_arr[2] = -268.000000;
ret_val__controller[0].float_state_arr[3] = -365.000000;
ret_val__controller[0].float_state_arr[4] = -94.000000;
ret_val__controller[0].float_state_arr[5] = -68.000000;
ret_val__controller[0].float_state_arr[6] = -139.000000;
ret_val__controller[0].output_arr[0] = 438.000000;
ret_val__controller[0].output_arr[1] = -491.000000;
ret_val__controller[0].output_arr[2] = -16.000000;

Result:
unknown

Path Covered :
afc.c
-140 -142 -146 -148 -151 -158 -160 +160b -162 -182 +191 -205 +207


Path Predicate for case 64:
afc.c: -140 input[0].x_arr[10]>-1.000000
afc.c: -142 ((unsigned char)input[0].float_state_arr[3])=0
afc.c: -146 (input[0].float_state_arr[0]+0.010000)<10.000000
afc.c: -148 ((unsigned char)input[0].float_state_arr[5])=0
afc.c: -151 ((unsigned char)input[0].float_state_arr[4])=0
afc.c: -158 input[0].x_arr[8]<70.000000
afc.c: -160 0=0
afc.c: +160b 0=0
afc.c: -162 0=0
afc.c: -182 1<>0
afc.c: +191 1<>0
afc.c: -205 ((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))/14.700000)=<1.660000
afc.c: +207 ((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))/14.700000)<0.130000

Simplified Path Predicate for case 64:
input[0].x_arr[10]>-1.000000 AND
((unsigned char)input[0].float_state_arr[3])=0 AND
(input[0].float_state_arr[0]+0.010000)<10.000000 AND
((unsigned char)input[0].float_state_arr[5])=0 AND
((unsigned char)input[0].float_state_arr[4])=0 AND
input[0].x_arr[8]<70.000000 AND
((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))/14.700000)=<1.660000 AND
((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))/14.700000)<0.130000

Output Values for case 64: (Symbolic,Concrete)
return value = 0, 0
ret_val[0].float_state_arr[0] = (input[0].float_state_arr[0]+0.010000), -370.990000
ret_val[0].float_state_arr[1] = input[0].float_state_arr[1], -78.000000
ret_val[0].float_state_arr[2] = (input[0].float_state_arr[2]+(((input[0].x_arr[9]+-((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))))*0.413280)*0.010000)), -486.000000
ret_val[0].float_state_arr[3] = 0.000000, 0.000000
ret_val[0].float_state_arr[4] = 0.000000, 0.000000
ret_val[0].float_state_arr[5] = 0.000000, 0.000000
ret_val[0].float_state_arr[6] = input[0].float_state_arr[6], -73.000000
ret_val[0].output_arr[0] = 0.130000, 0.130000
ret_val[0].output_arr[1] = 1.000000, 1.000000
ret_val[0].output_arr[2] = 14.700000, 14.700000

to explore negation deepest unexplored condition of predicate,
Path Predicate Prefix to solve :
afc.c: -140 input[0].x_arr[10]>-1.000000
afc.c: -142 ((unsigned char)input[0].float_state_arr[3])=0
afc.c: -146 (input[0].float_state_arr[0]+0.010000)<10.000000
afc.c: -148 ((unsigned char)input[0].float_state_arr[5])=0
afc.c: -151 ((unsigned char)input[0].float_state_arr[4])=0
afc.c: -158 input[0].x_arr[8]<70.000000
afc.c: -160 0=0
afc.c: +160b 0=0
afc.c: -162 0=0
afc.c: -182 1<>0
afc.c: +191 1<>0
afc.c: -205 ((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))/14.700000)=<1.660000
afc.c: -207 ((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))/14.700000)>=0.130000
Path Prefix to cover :
afc.c
-140 -142 -146 -148 -151 -158 -160 +160b -162 -182 +191 -205 -207


TEST CASE 65

Dimensions:
input__controller = 1;
input__controller[0].input_arr = 1;
input__controller[0].int_state_arr = 0;
input__controller[0].float_state_arr = 7;
input__controller[0].x_arr = 13;
ret_val__controller = 1;
ret_val__controller[0].int_state_arr = 0;
ret_val__controller[0].float_state_arr = 7;
ret_val__controller[0].output_arr = 3;

Other input values:
input__controller[0].input_arr[0] = -423.000000;
input__controller[0].float_state_arr[0] = -371.000000;
input__controller[0].float_state_arr[1] = -78.000000;
input__controller[0].float_state_arr[2] = -410.000000;
input__controller[0].float_state_arr[3] = -0.400000;
input__controller[0].float_state_arr[4] = -0.500000;
input__controller[0].float_state_arr[5] = 0.400000;
input__controller[0].float_state_arr[6] = -73.000000;
input__controller[0].x_arr[0] = -493.000000;
input__controller[0].x_arr[1] = 170.000000;
input__controller[0].x_arr[2] = -8.000000;
input__controller[0].x_arr[3] = -463.000000;
input__controller[0].x_arr[4] = -387.000000;
input__controller[0].x_arr[5] = -245.000000;
input__controller[0].x_arr[6] = 150.000000;
input__controller[0].x_arr[7] = -139067.898708;
input__controller[0].x_arr[8] = -478.000000;
input__controller[0].x_arr[9] = 7.000000;
input__controller[0].x_arr[10] = 417.000000;
input__controller[0].x_arr[11] = 173.000000;
input__controller[0].x_arr[12] = -343.000000;
ret_val__controller[0].float_state_arr[0] = 397.000000;
ret_val__controller[0].float_state_arr[1] = -241.000000;
ret_val__controller[0].float_state_arr[2] = -268.000000;
ret_val__controller[0].float_state_arr[3] = -365.000000;
ret_val__controller[0].float_state_arr[4] = -94.000000;
ret_val__controller[0].float_state_arr[5] = -68.000000;
ret_val__controller[0].float_state_arr[6] = -139.000000;
ret_val__controller[0].output_arr[0] = 438.000000;
ret_val__controller[0].output_arr[1] = -491.000000;
ret_val__controller[0].output_arr[2] = -16.000000;

Result:
unknown

Path Covered :
afc.c
-140 -142 -146 -148 -151 -158 -160 +160b -162 -182 +191 -205 -207


Path Predicate for case 65:
afc.c: -140 input[0].x_arr[10]>-1.000000
afc.c: -142 ((unsigned char)input[0].float_state_arr[3])=0
afc.c: -146 (input[0].float_state_arr[0]+0.010000)<10.000000
afc.c: -148 ((unsigned char)input[0].float_state_arr[5])=0
afc.c: -151 ((unsigned char)input[0].float_state_arr[4])=0
afc.c: -158 input[0].x_arr[8]<70.000000
afc.c: -160 0=0
afc.c: +160b 0=0
afc.c: -162 0=0
afc.c: -182 1<>0
afc.c: +191 1<>0
afc.c: -205 ((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))/14.700000)=<1.660000
afc.c: -207 ((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))/14.700000)>=0.130000

Simplified Path Predicate for case 65:
input[0].x_arr[10]>-1.000000 AND
((unsigned char)input[0].float_state_arr[3])=0 AND
(input[0].float_state_arr[0]+0.010000)<10.000000 AND
((unsigned char)input[0].float_state_arr[5])=0 AND
((unsigned char)input[0].float_state_arr[4])=0 AND
input[0].x_arr[8]<70.000000 AND
((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))/14.700000)=<1.660000 AND
((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))/14.700000)>=0.130000

Output Values for case 65: (Symbolic,Concrete)
return value = 0, 0
ret_val[0].float_state_arr[0] = (input[0].float_state_arr[0]+0.010000), -370.990000
ret_val[0].float_state_arr[1] = input[0].float_state_arr[1], -78.000000
ret_val[0].float_state_arr[2] = (input[0].float_state_arr[2]+(((input[0].x_arr[9]+-((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))))*0.413280)*0.010000)), -410.000000
ret_val[0].float_state_arr[3] = 0.000000, 0.000000
ret_val[0].float_state_arr[4] = 0.000000, 0.000000
ret_val[0].float_state_arr[5] = 0.000000, 0.000000
ret_val[0].float_state_arr[6] = input[0].float_state_arr[6], -73.000000
ret_val[0].output_arr[0] = ((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))/14.700000), 0.476190
ret_val[0].output_arr[1] = 1.000000, 1.000000
ret_val[0].output_arr[2] = 14.700000, 14.700000

to explore negation deepest unexplored condition of predicate,
Path Predicate Prefix to solve :
afc.c: -140 input[0].x_arr[10]>-1.000000
afc.c: -142 ((unsigned char)input[0].float_state_arr[3])=0
afc.c: -146 (input[0].float_state_arr[0]+0.010000)<10.000000
afc.c: -148 ((unsigned char)input[0].float_state_arr[5])=0
afc.c: -151 ((unsigned char)input[0].float_state_arr[4])=0
afc.c: -158 input[0].x_arr[8]<70.000000
afc.c: -160 0=0
afc.c: +160b 0=0
afc.c: -162 0=0
afc.c: -182 1<>0
afc.c: -191 1=0
Path Prefix to cover :
afc.c
-140 -142 -146 -148 -151 -158 -160 +160b -162 -182 -191
trivially infeasible

to explore negation deepest unexplored condition of predicate,
Path Predicate Prefix to solve :
afc.c: -140 input[0].x_arr[10]>-1.000000
afc.c: -142 ((unsigned char)input[0].float_state_arr[3])=0
afc.c: -146 (input[0].float_state_arr[0]+0.010000)<10.000000
afc.c: -148 ((unsigned char)input[0].float_state_arr[5])=0
afc.c: -151 ((unsigned char)input[0].float_state_arr[4])=0
afc.c: -158 input[0].x_arr[8]<70.000000
afc.c: -160 0=0
afc.c: +160b 0=0
afc.c: -162 0=0
afc.c: +182 1=0
Path Prefix to cover :
afc.c
-140 -142 -146 -148 -151 -158 -160 +160b -162 +182
trivially infeasible

to explore negation deepest unexplored condition of predicate,
Path Predicate Prefix to solve :
afc.c: -140 input[0].x_arr[10]>-1.000000
afc.c: -142 ((unsigned char)input[0].float_state_arr[3])=0
afc.c: -146 (input[0].float_state_arr[0]+0.010000)<10.000000
afc.c: -148 ((unsigned char)input[0].float_state_arr[5])=0
afc.c: -151 ((unsigned char)input[0].float_state_arr[4])=0
afc.c: -158 input[0].x_arr[8]<70.000000
afc.c: -160 0=0
afc.c: +160b 0=0
afc.c: +162 0<>0
Path Prefix to cover :
afc.c
-140 -142 -146 -148 -151 -158 -160 +160b +162
trivially infeasible

to explore negation deepest unexplored condition of predicate,
Path Predicate Prefix to solve :
afc.c: -140 input[0].x_arr[10]>-1.000000
afc.c: -142 ((unsigned char)input[0].float_state_arr[3])=0
afc.c: -146 (input[0].float_state_arr[0]+0.010000)<10.000000
afc.c: -148 ((unsigned char)input[0].float_state_arr[5])=0
afc.c: -151 ((unsigned char)input[0].float_state_arr[4])=0
afc.c: -158 input[0].x_arr[8]<70.000000
afc.c: -160 0=0
afc.c: -160b 0<>0
Path Prefix to cover :
afc.c
-140 -142 -146 -148 -151 -158 -160 -160b
trivially infeasible

to explore negation deepest unexplored condition of predicate,
Path Predicate Prefix to solve :
afc.c: -140 input[0].x_arr[10]>-1.000000
afc.c: -142 ((unsigned char)input[0].float_state_arr[3])=0
afc.c: -146 (input[0].float_state_arr[0]+0.010000)<10.000000
afc.c: -148 ((unsigned char)input[0].float_state_arr[5])=0
afc.c: -151 ((unsigned char)input[0].float_state_arr[4])=0
afc.c: -158 input[0].x_arr[8]<70.000000
afc.c: +160 0<>0
Path Prefix to cover :
afc.c
-140 -142 -146 -148 -151 -158 +160
trivially infeasible

to explore negation deepest unexplored condition of predicate,
Path Predicate Prefix to solve :
afc.c: -140 input[0].x_arr[10]>-1.000000
afc.c: -142 ((unsigned char)input[0].float_state_arr[3])=0
afc.c: -146 (input[0].float_state_arr[0]+0.010000)<10.000000
afc.c: -148 ((unsigned char)input[0].float_state_arr[5])=0
afc.c: -151 ((unsigned char)input[0].float_state_arr[4])=0
afc.c: +158 input[0].x_arr[8]>=70.000000
Path Prefix to cover :
afc.c
-140 -142 -146 -148 -151 +158


TEST CASE 66

Dimensions:
input__controller = 1;
input__controller[0].input_arr = 1;
input__controller[0].int_state_arr = 0;
input__controller[0].float_state_arr = 7;
input__controller[0].x_arr = 13;
ret_val__controller = 1;
ret_val__controller[0].int_state_arr = 0;
ret_val__controller[0].float_state_arr = 7;
ret_val__controller[0].output_arr = 3;

Other input values:
input__controller[0].input_arr[0] = -423.000000;
input__controller[0].float_state_arr[0] = -371.000000;
input__controller[0].float_state_arr[1] = -78.000000;
input__controller[0].float_state_arr[2] = -292.000000;
input__controller[0].float_state_arr[3] = -0.400000;
input__controller[0].float_state_arr[4] = -0.500000;
input__controller[0].float_state_arr[5] = 0.400000;
input__controller[0].float_state_arr[6] = -73.000000;
input__controller[0].x_arr[0] = -493.000000;
input__controller[0].x_arr[1] = 170.000000;
input__controller[0].x_arr[2] = -8.000000;
input__controller[0].x_arr[3] = -463.000000;
input__controller[0].x_arr[4] = -387.000000;
input__controller[0].x_arr[5] = -245.000000;
input__controller[0].x_arr[6] = 150.000000;
input__controller[0].x_arr[7] = -475.000000;
input__controller[0].x_arr[8] = 743.000000;
input__controller[0].x_arr[9] = -156.000000;
input__controller[0].x_arr[10] = 417.000000;
input__controller[0].x_arr[11] = 173.000000;
input__controller[0].x_arr[12] = -343.000000;
ret_val__controller[0].float_state_arr[0] = 397.000000;
ret_val__controller[0].float_state_arr[1] = -241.000000;
ret_val__controller[0].float_state_arr[2] = -268.000000;
ret_val__controller[0].float_state_arr[3] = -365.000000;
ret_val__controller[0].float_state_arr[4] = -94.000000;
ret_val__controller[0].float_state_arr[5] = -68.000000;
ret_val__controller[0].float_state_arr[6] = -139.000000;
ret_val__controller[0].output_arr[0] = 438.000000;
ret_val__controller[0].output_arr[1] = -491.000000;
ret_val__controller[0].output_arr[2] = -16.000000;

Result:
unknown

Path Covered :
afc.c
-140 -142 -146 -148 -151 +158 -160 +160b -162 -182 +191 +205


Path Predicate for case 66:
afc.c: -140 input[0].x_arr[10]>-1.000000
afc.c: -142 ((unsigned char)input[0].float_state_arr[3])=0
afc.c: -146 (input[0].float_state_arr[0]+0.010000)<10.000000
afc.c: -148 ((unsigned char)input[0].float_state_arr[5])=0
afc.c: -151 ((unsigned char)input[0].float_state_arr[4])=0
afc.c: +158 input[0].x_arr[8]>=70.000000
afc.c: -160 0=0
afc.c: +160b 0=0
afc.c: -162 0=0
afc.c: -182 1<>0
afc.c: +191 1<>0
afc.c: +205 ((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))/14.700000)>1.660000

Simplified Path Predicate for case 66:
input[0].x_arr[10]>-1.000000 AND
((unsigned char)input[0].float_state_arr[3])=0 AND
(input[0].float_state_arr[0]+0.010000)<10.000000 AND
((unsigned char)input[0].float_state_arr[5])=0 AND
((unsigned char)input[0].float_state_arr[4])=0 AND
input[0].x_arr[8]>=70.000000 AND
((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))/14.700000)>1.660000

Output Values for case 66: (Symbolic,Concrete)
return value = 0, 0
ret_val[0].float_state_arr[0] = (input[0].float_state_arr[0]+0.010000), -370.990000
ret_val[0].float_state_arr[1] = input[0].float_state_arr[1], -78.000000
ret_val[0].float_state_arr[2] = (input[0].float_state_arr[2]+(((input[0].x_arr[9]+-((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))))*0.413280)*0.010000)), -5957.592441
ret_val[0].float_state_arr[3] = 0.000000, 0.000000
ret_val[0].float_state_arr[4] = 1.000000, 1.000000
ret_val[0].float_state_arr[5] = 0.000000, 0.000000
ret_val[0].float_state_arr[6] = input[0].float_state_arr[6], -73.000000
ret_val[0].output_arr[0] = 1.660000, 1.660000
ret_val[0].output_arr[1] = 1.000000, 1.000000
ret_val[0].output_arr[2] = 14.700000, 14.700000

to explore negation deepest unexplored condition of predicate,
Path Predicate Prefix to solve :
afc.c: -140 input[0].x_arr[10]>-1.000000
afc.c: -142 ((unsigned char)input[0].float_state_arr[3])=0
afc.c: -146 (input[0].float_state_arr[0]+0.010000)<10.000000
afc.c: -148 ((unsigned char)input[0].float_state_arr[5])=0
afc.c: -151 ((unsigned char)input[0].float_state_arr[4])=0
afc.c: +158 input[0].x_arr[8]>=70.000000
afc.c: -160 0=0
afc.c: +160b 0=0
afc.c: -162 0=0
afc.c: -182 1<>0
afc.c: +191 1<>0
afc.c: -205 ((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))/14.700000)=<1.660000
Path Prefix to cover :
afc.c
-140 -142 -146 -148 -151 +158 -160 +160b -162 -182 +191 -205


TEST CASE 67

Dimensions:
input__controller = 1;
input__controller[0].input_arr = 1;
input__controller[0].int_state_arr = 0;
input__controller[0].float_state_arr = 7;
input__controller[0].x_arr = 13;
ret_val__controller = 1;
ret_val__controller[0].int_state_arr = 0;
ret_val__controller[0].float_state_arr = 7;
ret_val__controller[0].output_arr = 3;

Other input values:
input__controller[0].input_arr[0] = -423.000000;
input__controller[0].float_state_arr[0] = -371.000000;
input__controller[0].float_state_arr[1] = -78.000000;
input__controller[0].float_state_arr[2] = -160.000000;
input__controller[0].float_state_arr[3] = -0.400000;
input__controller[0].float_state_arr[4] = -0.500000;
input__controller[0].float_state_arr[5] = 0.400000;
input__controller[0].float_state_arr[6] = -73.000000;
input__controller[0].x_arr[0] = -493.000000;
input__controller[0].x_arr[1] = 170.000000;
input__controller[0].x_arr[2] = -8.000000;
input__controller[0].x_arr[3] = -463.000000;
input__controller[0].x_arr[4] = -387.000000;
input__controller[0].x_arr[5] = -245.000000;
input__controller[0].x_arr[6] = 150.000000;
input__controller[0].x_arr[7] = -0.000000;
input__controller[0].x_arr[8] = 743.000000;
input__controller[0].x_arr[9] = -0.366000;
input__controller[0].x_arr[10] = 417.000000;
input__controller[0].x_arr[11] = 173.000000;
input__controller[0].x_arr[12] = -343.000000;
ret_val__controller[0].float_state_arr[0] = 397.000000;
ret_val__controller[0].float_state_arr[1] = -241.000000;
ret_val__controller[0].float_state_arr[2] = -268.000000;
ret_val__controller[0].float_state_arr[3] = -365.000000;
ret_val__controller[0].float_state_arr[4] = -94.000000;
ret_val__controller[0].float_state_arr[5] = -68.000000;
ret_val__controller[0].float_state_arr[6] = -139.000000;
ret_val__controller[0].output_arr[0] = 438.000000;
ret_val__controller[0].output_arr[1] = -491.000000;
ret_val__controller[0].output_arr[2] = -16.000000;

Result:
unknown

Path Covered :
afc.c
-140 -142 -146 -148 -151 +158 -160 +160b -162 -182 +191 -205 +207


Path Predicate for case 67:
afc.c: -140 input[0].x_arr[10]>-1.000000
afc.c: -142 ((unsigned char)input[0].float_state_arr[3])=0
afc.c: -146 (input[0].float_state_arr[0]+0.010000)<10.000000
afc.c: -148 ((unsigned char)input[0].float_state_arr[5])=0
afc.c: -151 ((unsigned char)input[0].float_state_arr[4])=0
afc.c: +158 input[0].x_arr[8]>=70.000000
afc.c: -160 0=0
afc.c: +160b 0=0
afc.c: -162 0=0
afc.c: -182 1<>0
afc.c: +191 1<>0
afc.c: -205 ((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))/14.700000)=<1.660000
afc.c: +207 ((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))/14.700000)<0.130000

Simplified Path Predicate for case 67:
input[0].x_arr[10]>-1.000000 AND
((unsigned char)input[0].float_state_arr[3])=0 AND
(input[0].float_state_arr[0]+0.010000)<10.000000 AND
((unsigned char)input[0].float_state_arr[5])=0 AND
((unsigned char)input[0].float_state_arr[4])=0 AND
input[0].x_arr[8]>=70.000000 AND
((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))/14.700000)=<1.660000 AND
((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))/14.700000)<0.130000

Output Values for case 67: (Symbolic,Concrete)
return value = 0, 0
ret_val[0].float_state_arr[0] = (input[0].float_state_arr[0]+0.010000), -370.990000
ret_val[0].float_state_arr[1] = input[0].float_state_arr[1], -78.000000
ret_val[0].float_state_arr[2] = (input[0].float_state_arr[2]+(((input[0].x_arr[9]+-((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))))*0.413280)*0.010000)), -160.000000
ret_val[0].float_state_arr[3] = 0.000000, 0.000000
ret_val[0].float_state_arr[4] = 1.000000, 1.000000
ret_val[0].float_state_arr[5] = 0.000000, 0.000000
ret_val[0].float_state_arr[6] = input[0].float_state_arr[6], -73.000000
ret_val[0].output_arr[0] = 0.130000, 0.130000
ret_val[0].output_arr[1] = 1.000000, 1.000000
ret_val[0].output_arr[2] = 14.700000, 14.700000

to explore negation deepest unexplored condition of predicate,
Path Predicate Prefix to solve :
afc.c: -140 input[0].x_arr[10]>-1.000000
afc.c: -142 ((unsigned char)input[0].float_state_arr[3])=0
afc.c: -146 (input[0].float_state_arr[0]+0.010000)<10.000000
afc.c: -148 ((unsigned char)input[0].float_state_arr[5])=0
afc.c: -151 ((unsigned char)input[0].float_state_arr[4])=0
afc.c: +158 input[0].x_arr[8]>=70.000000
afc.c: -160 0=0
afc.c: +160b 0=0
afc.c: -162 0=0
afc.c: -182 1<>0
afc.c: +191 1<>0
afc.c: -205 ((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))/14.700000)=<1.660000
afc.c: -207 ((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))/14.700000)>=0.130000
Path Prefix to cover :
afc.c
-140 -142 -146 -148 -151 +158 -160 +160b -162 -182 +191 -205 -207


TEST CASE 68

Dimensions:
input__controller = 1;
input__controller[0].input_arr = 1;
input__controller[0].int_state_arr = 0;
input__controller[0].float_state_arr = 7;
input__controller[0].x_arr = 13;
ret_val__controller = 1;
ret_val__controller[0].int_state_arr = 0;
ret_val__controller[0].float_state_arr = 7;
ret_val__controller[0].output_arr = 3;

Other input values:
input__controller[0].input_arr[0] = -423.000000;
input__controller[0].float_state_arr[0] = -371.000000;
input__controller[0].float_state_arr[1] = -78.000000;
input__controller[0].float_state_arr[2] = 37.000000;
input__controller[0].float_state_arr[3] = -0.400000;
input__controller[0].float_state_arr[4] = -0.500000;
input__controller[0].float_state_arr[5] = 0.400000;
input__controller[0].float_state_arr[6] = -73.000000;
input__controller[0].x_arr[0] = -493.000000;
input__controller[0].x_arr[1] = 170.000000;
input__controller[0].x_arr[2] = -8.000000;
input__controller[0].x_arr[3] = -463.000000;
input__controller[0].x_arr[4] = -387.000000;
input__controller[0].x_arr[5] = -245.000000;
input__controller[0].x_arr[6] = 150.000000;
input__controller[0].x_arr[7] = -0.312186;
input__controller[0].x_arr[8] = 743.000000;
input__controller[0].x_arr[9] = 13.000000;
input__controller[0].x_arr[10] = 417.000000;
input__controller[0].x_arr[11] = 173.000000;
input__controller[0].x_arr[12] = -343.000000;
ret_val__controller[0].float_state_arr[0] = 397.000000;
ret_val__controller[0].float_state_arr[1] = -241.000000;
ret_val__controller[0].float_state_arr[2] = -268.000000;
ret_val__controller[0].float_state_arr[3] = -365.000000;
ret_val__controller[0].float_state_arr[4] = -94.000000;
ret_val__controller[0].float_state_arr[5] = -68.000000;
ret_val__controller[0].float_state_arr[6] = -139.000000;
ret_val__controller[0].output_arr[0] = 438.000000;
ret_val__controller[0].output_arr[1] = -491.000000;
ret_val__controller[0].output_arr[2] = -16.000000;

Result:
unknown

Path Covered :
afc.c
-140 -142 -146 -148 -151 +158 -160 +160b -162 -182 +191 -205 -207


Path Predicate for case 68:
afc.c: -140 input[0].x_arr[10]>-1.000000
afc.c: -142 ((unsigned char)input[0].float_state_arr[3])=0
afc.c: -146 (input[0].float_state_arr[0]+0.010000)<10.000000
afc.c: -148 ((unsigned char)input[0].float_state_arr[5])=0
afc.c: -151 ((unsigned char)input[0].float_state_arr[4])=0
afc.c: +158 input[0].x_arr[8]>=70.000000
afc.c: -160 0=0
afc.c: +160b 0=0
afc.c: -162 0=0
afc.c: -182 1<>0
afc.c: +191 1<>0
afc.c: -205 ((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))/14.700000)=<1.660000
afc.c: -207 ((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))/14.700000)>=0.130000

Simplified Path Predicate for case 68:
input[0].x_arr[10]>-1.000000 AND
((unsigned char)input[0].float_state_arr[3])=0 AND
(input[0].float_state_arr[0]+0.010000)<10.000000 AND
((unsigned char)input[0].float_state_arr[5])=0 AND
((unsigned char)input[0].float_state_arr[4])=0 AND
input[0].x_arr[8]>=70.000000 AND
((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))/14.700000)=<1.660000 AND
((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))/14.700000)>=0.130000

Output Values for case 68: (Symbolic,Concrete)
return value = 0, 0
ret_val[0].float_state_arr[0] = (input[0].float_state_arr[0]+0.010000), -370.990000
ret_val[0].float_state_arr[1] = input[0].float_state_arr[1], -78.000000
ret_val[0].float_state_arr[2] = (input[0].float_state_arr[2]+(((input[0].x_arr[9]+-((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))))*0.413280)*0.010000)), 37.000000
ret_val[0].float_state_arr[3] = 0.000000, 0.000000
ret_val[0].float_state_arr[4] = 1.000000, 1.000000
ret_val[0].float_state_arr[5] = 0.000000, 0.000000
ret_val[0].float_state_arr[6] = input[0].float_state_arr[6], -73.000000
ret_val[0].output_arr[0] = ((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))/14.700000), 0.884354
ret_val[0].output_arr[1] = 1.000000, 1.000000
ret_val[0].output_arr[2] = 14.700000, 14.700000

to explore negation deepest unexplored condition of predicate,
Path Predicate Prefix to solve :
afc.c: -140 input[0].x_arr[10]>-1.000000
afc.c: -142 ((unsigned char)input[0].float_state_arr[3])=0
afc.c: -146 (input[0].float_state_arr[0]+0.010000)<10.000000
afc.c: -148 ((unsigned char)input[0].float_state_arr[5])=0
afc.c: -151 ((unsigned char)input[0].float_state_arr[4])=0
afc.c: +158 input[0].x_arr[8]>=70.000000
afc.c: -160 0=0
afc.c: +160b 0=0
afc.c: -162 0=0
afc.c: -182 1<>0
afc.c: -191 1=0
Path Prefix to cover :
afc.c
-140 -142 -146 -148 -151 +158 -160 +160b -162 -182 -191
trivially infeasible

to explore negation deepest unexplored condition of predicate,
Path Predicate Prefix to solve :
afc.c: -140 input[0].x_arr[10]>-1.000000
afc.c: -142 ((unsigned char)input[0].float_state_arr[3])=0
afc.c: -146 (input[0].float_state_arr[0]+0.010000)<10.000000
afc.c: -148 ((unsigned char)input[0].float_state_arr[5])=0
afc.c: -151 ((unsigned char)input[0].float_state_arr[4])=0
afc.c: +158 input[0].x_arr[8]>=70.000000
afc.c: -160 0=0
afc.c: +160b 0=0
afc.c: -162 0=0
afc.c: +182 1=0
Path Prefix to cover :
afc.c
-140 -142 -146 -148 -151 +158 -160 +160b -162 +182
trivially infeasible

to explore negation deepest unexplored condition of predicate,
Path Predicate Prefix to solve :
afc.c: -140 input[0].x_arr[10]>-1.000000
afc.c: -142 ((unsigned char)input[0].float_state_arr[3])=0
afc.c: -146 (input[0].float_state_arr[0]+0.010000)<10.000000
afc.c: -148 ((unsigned char)input[0].float_state_arr[5])=0
afc.c: -151 ((unsigned char)input[0].float_state_arr[4])=0
afc.c: +158 input[0].x_arr[8]>=70.000000
afc.c: -160 0=0
afc.c: +160b 0=0
afc.c: +162 0<>0
Path Prefix to cover :
afc.c
-140 -142 -146 -148 -151 +158 -160 +160b +162
trivially infeasible

to explore negation deepest unexplored condition of predicate,
Path Predicate Prefix to solve :
afc.c: -140 input[0].x_arr[10]>-1.000000
afc.c: -142 ((unsigned char)input[0].float_state_arr[3])=0
afc.c: -146 (input[0].float_state_arr[0]+0.010000)<10.000000
afc.c: -148 ((unsigned char)input[0].float_state_arr[5])=0
afc.c: -151 ((unsigned char)input[0].float_state_arr[4])=0
afc.c: +158 input[0].x_arr[8]>=70.000000
afc.c: -160 0=0
afc.c: -160b 0<>0
Path Prefix to cover :
afc.c
-140 -142 -146 -148 -151 +158 -160 -160b
trivially infeasible

to explore negation deepest unexplored condition of predicate,
Path Predicate Prefix to solve :
afc.c: -140 input[0].x_arr[10]>-1.000000
afc.c: -142 ((unsigned char)input[0].float_state_arr[3])=0
afc.c: -146 (input[0].float_state_arr[0]+0.010000)<10.000000
afc.c: -148 ((unsigned char)input[0].float_state_arr[5])=0
afc.c: -151 ((unsigned char)input[0].float_state_arr[4])=0
afc.c: +158 input[0].x_arr[8]>=70.000000
afc.c: +160 0<>0
Path Prefix to cover :
afc.c
-140 -142 -146 -148 -151 +158 +160
trivially infeasible

to explore negation deepest unexplored condition of predicate,
Path Predicate Prefix to solve :
afc.c: -140 input[0].x_arr[10]>-1.000000
afc.c: -142 ((unsigned char)input[0].float_state_arr[3])=0
afc.c: +146 (input[0].float_state_arr[0]+0.010000)>=10.000000
Path Prefix to cover :
afc.c
-140 -142 +146


TEST CASE 69

Dimensions:
input__controller = 1;
input__controller[0].input_arr = 1;
input__controller[0].int_state_arr = 0;
input__controller[0].float_state_arr = 7;
input__controller[0].x_arr = 13;
ret_val__controller = 1;
ret_val__controller[0].int_state_arr = 0;
ret_val__controller[0].float_state_arr = 7;
ret_val__controller[0].output_arr = 3;

Other input values:
input__controller[0].input_arr[0] = -423.000000;
input__controller[0].float_state_arr[0] = 768.990000;
input__controller[0].float_state_arr[1] = -78.000000;
input__controller[0].float_state_arr[2] = -292.000000;
input__controller[0].float_state_arr[3] = -0.400000;
input__controller[0].float_state_arr[4] = -193.000000;
input__controller[0].float_state_arr[5] = -384.000000;
input__controller[0].float_state_arr[6] = -73.000000;
input__controller[0].x_arr[0] = -493.000000;
input__controller[0].x_arr[1] = 170.000000;
input__controller[0].x_arr[2] = -8.000000;
input__controller[0].x_arr[3] = -463.000000;
input__controller[0].x_arr[4] = -387.000000;
input__controller[0].x_arr[5] = -245.000000;
input__controller[0].x_arr[6] = 150.000000;
input__controller[0].x_arr[7] = -475.000000;
input__controller[0].x_arr[8] = -478.000000;
input__controller[0].x_arr[9] = -156.000000;
input__controller[0].x_arr[10] = 417.000000;
input__controller[0].x_arr[11] = 173.000000;
input__controller[0].x_arr[12] = -343.000000;
ret_val__controller[0].float_state_arr[0] = 397.000000;
ret_val__controller[0].float_state_arr[1] = -241.000000;
ret_val__controller[0].float_state_arr[2] = -268.000000;
ret_val__controller[0].float_state_arr[3] = -365.000000;
ret_val__controller[0].float_state_arr[4] = -94.000000;
ret_val__controller[0].float_state_arr[5] = -68.000000;
ret_val__controller[0].float_state_arr[6] = -139.000000;
ret_val__controller[0].output_arr[0] = 438.000000;
ret_val__controller[0].output_arr[1] = -491.000000;
ret_val__controller[0].output_arr[2] = -16.000000;

Result:
unknown

Path Covered :
afc.c
-140 -142 +146 +151 -158 -160 -160b -161 +162 -162b +182 -191 -195 +197 -205 +207


Path Predicate for case 69:
afc.c: -140 input[0].x_arr[10]>-1.000000
afc.c: -142 ((unsigned char)input[0].float_state_arr[3])=0
afc.c: +146 (input[0].float_state_arr[0]+0.010000)>=10.000000
afc.c: +151 ((unsigned char)input[0].float_state_arr[4])<>0
afc.c: -158 input[0].x_arr[8]<50.000000
afc.c: -160 0=0
afc.c: -160b 1<>0
afc.c: -161 0=0
afc.c: +162 1<>0
afc.c: -162b 0=0
afc.c: +182 0=0
afc.c: -191 0=0
afc.c: -195 (1.000000+((0.040000*(input[0].x_arr[10]+-14.700000))+(((0.140000*(input[0].x_arr[10]+-14.700000))*0.010000)+input[0].float_state_arr[1])))=<100.000000
afc.c: +197 (1.000000+((0.040000*(input[0].x_arr[10]+-14.700000))+(((0.140000*(input[0].x_arr[10]+-14.700000))*0.010000)+input[0].float_state_arr[1])))<0.000000
afc.c: -205 0.000000=<1.660000
afc.c: +207 0.000000<0.130000

Simplified Path Predicate for case 69:
input[0].x_arr[10]>-1.000000 AND
((unsigned char)input[0].float_state_arr[3])=0 AND
(input[0].float_state_arr[0]+0.010000)>=10.000000 AND
((unsigned char)input[0].float_state_arr[4])<>0 AND
input[0].x_arr[8]<50.000000 AND
(1.000000+((0.040000*(input[0].x_arr[10]+-14.700000))+(((0.140000*(input[0].x_arr[10]+-14.700000))*0.010000)+input[0].float_state_arr[1])))=<100.000000 AND
(1.000000+((0.040000*(input[0].x_arr[10]+-14.700000))+(((0.140000*(input[0].x_arr[10]+-14.700000))*0.010000)+input[0].float_state_arr[1])))<0.000000

Output Values for case 69: (Symbolic,Concrete)
return value = 0, 0
ret_val[0].float_state_arr[0] = (input[0].float_state_arr[0]+0.010000), 769.000000
ret_val[0].float_state_arr[1] = (((0.140000*(input[0].x_arr[10]+-14.700000))*0.010000)+input[0].float_state_arr[1]), -77.436780
ret_val[0].float_state_arr[2] = (input[0].float_state_arr[2]+(((input[0].x_arr[9]+-((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))))*0.413280)*0.010000)), -5957.592441
ret_val[0].float_state_arr[3] = 0.000000, 0.000000
ret_val[0].float_state_arr[4] = 0.000000, 0.000000
ret_val[0].float_state_arr[5] = 1.000000, 1.000000
ret_val[0].float_state_arr[6] = ((0.040000*(input[0].x_arr[10]+-14.700000))+(((0.140000*(input[0].x_arr[10]+-14.700000))*0.010000)+input[0].float_state_arr[1])), -61.344780
ret_val[0].output_arr[0] = 0.130000, 0.130000
ret_val[0].output_arr[1] = 0.000000, 0.000000
ret_val[0].output_arr[2] = 14.700000, 14.700000

to explore negation deepest unexplored condition of predicate,
Path Predicate Prefix to solve :
afc.c: -140 input[0].x_arr[10]>-1.000000
afc.c: -142 ((unsigned char)input[0].float_state_arr[3])=0
afc.c: +146 (input[0].float_state_arr[0]+0.010000)>=10.000000
afc.c: +151 ((unsigned char)input[0].float_state_arr[4])<>0
afc.c: -158 input[0].x_arr[8]<50.000000
afc.c: -160 0=0
afc.c: -160b 1<>0
afc.c: -161 0=0
afc.c: +162 1<>0
afc.c: -162b 0=0
afc.c: +182 0=0
afc.c: -191 0=0
afc.c: -195 (1.000000+((0.040000*(input[0].x_arr[10]+-14.700000))+(((0.140000*(input[0].x_arr[10]+-14.700000))*0.010000)+input[0].float_state_arr[1])))=<100.000000
afc.c: +197 (1.000000+((0.040000*(input[0].x_arr[10]+-14.700000))+(((0.140000*(input[0].x_arr[10]+-14.700000))*0.010000)+input[0].float_state_arr[1])))<0.000000
afc.c: -205 0.000000=<1.660000
afc.c: -207 0.000000>=0.130000
Path Prefix to cover :
afc.c
-140 -142 +146 +151 -158 -160 -160b -161 +162 -162b +182 -191 -195 +197 -205 -207
trivially infeasible

to explore negation deepest unexplored condition of predicate,
Path Predicate Prefix to solve :
afc.c: -140 input[0].x_arr[10]>-1.000000
afc.c: -142 ((unsigned char)input[0].float_state_arr[3])=0
afc.c: +146 (input[0].float_state_arr[0]+0.010000)>=10.000000
afc.c: +151 ((unsigned char)input[0].float_state_arr[4])<>0
afc.c: -158 input[0].x_arr[8]<50.000000
afc.c: -160 0=0
afc.c: -160b 1<>0
afc.c: -161 0=0
afc.c: +162 1<>0
afc.c: -162b 0=0
afc.c: +182 0=0
afc.c: -191 0=0
afc.c: -195 (1.000000+((0.040000*(input[0].x_arr[10]+-14.700000))+(((0.140000*(input[0].x_arr[10]+-14.700000))*0.010000)+input[0].float_state_arr[1])))=<100.000000
afc.c: +197 (1.000000+((0.040000*(input[0].x_arr[10]+-14.700000))+(((0.140000*(input[0].x_arr[10]+-14.700000))*0.010000)+input[0].float_state_arr[1])))<0.000000
afc.c: +205 0.000000>1.660000
Path Prefix to cover :
afc.c
-140 -142 +146 +151 -158 -160 -160b -161 +162 -162b +182 -191 -195 +197 +205
trivially infeasible

to explore negation deepest unexplored condition of predicate,
Path Predicate Prefix to solve :
afc.c: -140 input[0].x_arr[10]>-1.000000
afc.c: -142 ((unsigned char)input[0].float_state_arr[3])=0
afc.c: +146 (input[0].float_state_arr[0]+0.010000)>=10.000000
afc.c: +151 ((unsigned char)input[0].float_state_arr[4])<>0
afc.c: -158 input[0].x_arr[8]<50.000000
afc.c: -160 0=0
afc.c: -160b 1<>0
afc.c: -161 0=0
afc.c: +162 1<>0
afc.c: -162b 0=0
afc.c: +182 0=0
afc.c: -191 0=0
afc.c: -195 (1.000000+((0.040000*(input[0].x_arr[10]+-14.700000))+(((0.140000*(input[0].x_arr[10]+-14.700000))*0.010000)+input[0].float_state_arr[1])))=<100.000000
afc.c: -197 (1.000000+((0.040000*(input[0].x_arr[10]+-14.700000))+(((0.140000*(input[0].x_arr[10]+-14.700000))*0.010000)+input[0].float_state_arr[1])))>=0.000000
Path Prefix to cover :
afc.c
-140 -142 +146 +151 -158 -160 -160b -161 +162 -162b +182 -191 -195 -197


TEST CASE 70

Dimensions:
input__controller = 1;
input__controller[0].input_arr = 1;
input__controller[0].int_state_arr = 0;
input__controller[0].float_state_arr = 7;
input__controller[0].x_arr = 13;
ret_val__controller = 1;
ret_val__controller[0].int_state_arr = 0;
ret_val__controller[0].float_state_arr = 7;
ret_val__controller[0].output_arr = 3;

Other input values:
input__controller[0].input_arr[0] = -423.000000;
input__controller[0].float_state_arr[0] = 768.990000;
input__controller[0].float_state_arr[1] = 65.000000;
input__controller[0].float_state_arr[2] = -292.000000;
input__controller[0].float_state_arr[3] = -0.400000;
input__controller[0].float_state_arr[4] = -193.000000;
input__controller[0].float_state_arr[5] = -384.000000;
input__controller[0].float_state_arr[6] = -73.000000;
input__controller[0].x_arr[0] = -493.000000;
input__controller[0].x_arr[1] = 170.000000;
input__controller[0].x_arr[2] = -8.000000;
input__controller[0].x_arr[3] = -463.000000;
input__controller[0].x_arr[4] = -387.000000;
input__controller[0].x_arr[5] = -245.000000;
input__controller[0].x_arr[6] = 150.000000;
input__controller[0].x_arr[7] = -475.000000;
input__controller[0].x_arr[8] = -478.000000;
input__controller[0].x_arr[9] = -156.000000;
input__controller[0].x_arr[10] = 14.700000;
input__controller[0].x_arr[11] = 173.000000;
input__controller[0].x_arr[12] = -343.000000;
ret_val__controller[0].float_state_arr[0] = 397.000000;
ret_val__controller[0].float_state_arr[1] = -241.000000;
ret_val__controller[0].float_state_arr[2] = -268.000000;
ret_val__controller[0].float_state_arr[3] = -365.000000;
ret_val__controller[0].float_state_arr[4] = -94.000000;
ret_val__controller[0].float_state_arr[5] = -68.000000;
ret_val__controller[0].float_state_arr[6] = -139.000000;
ret_val__controller[0].output_arr[0] = 438.000000;
ret_val__controller[0].output_arr[1] = -491.000000;
ret_val__controller[0].output_arr[2] = -16.000000;

Result:
unknown

Path Covered :
afc.c
-140 -142 +146 +151 -158 -160 -160b -161 +162 -162b +182 -191 -195 -197 +205


Path Predicate for case 70:
afc.c: -140 input[0].x_arr[10]>-1.000000
afc.c: -142 ((unsigned char)input[0].float_state_arr[3])=0
afc.c: +146 (input[0].float_state_arr[0]+0.010000)>=10.000000
afc.c: +151 ((unsigned char)input[0].float_state_arr[4])<>0
afc.c: -158 input[0].x_arr[8]<50.000000
afc.c: -160 0=0
afc.c: -160b 1<>0
afc.c: -161 0=0
afc.c: +162 1<>0
afc.c: -162b 0=0
afc.c: +182 0=0
afc.c: -191 0=0
afc.c: -195 (1.000000+((0.040000*(input[0].x_arr[10]+-14.700000))+(((0.140000*(input[0].x_arr[10]+-14.700000))*0.010000)+input[0].float_state_arr[1])))=<100.000000
afc.c: -197 (1.000000+((0.040000*(input[0].x_arr[10]+-14.700000))+(((0.140000*(input[0].x_arr[10]+-14.700000))*0.010000)+input[0].float_state_arr[1])))>=0.000000
afc.c: +205 (((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))/14.700000)*(1.000000+((0.040000*(input[0].x_arr[10]+-14.700000))+(((0.140000*(input[0].x_arr[10]+-14.700000))*0.010000)+input[0].float_state_arr[1]))))>1.660000

Simplified Path Predicate for case 70:
input[0].x_arr[10]>-1.000000 AND
((unsigned char)input[0].float_state_arr[3])=0 AND
(input[0].float_state_arr[0]+0.010000)>=10.000000 AND
((unsigned char)input[0].float_state_arr[4])<>0 AND
input[0].x_arr[8]<50.000000 AND
(1.000000+((0.040000*(input[0].x_arr[10]+-14.700000))+(((0.140000*(input[0].x_arr[10]+-14.700000))*0.010000)+input[0].float_state_arr[1])))=<100.000000 AND
(1.000000+((0.040000*(input[0].x_arr[10]+-14.700000))+(((0.140000*(input[0].x_arr[10]+-14.700000))*0.010000)+input[0].float_state_arr[1])))>=0.000000 AND
(((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))/14.700000)*(1.000000+((0.040000*(input[0].x_arr[10]+-14.700000))+(((0.140000*(input[0].x_arr[10]+-14.700000))*0.010000)+input[0].float_state_arr[1]))))>1.660000

Output Values for case 70: (Symbolic,Concrete)
return value = 0, 0
ret_val[0].float_state_arr[0] = (input[0].float_state_arr[0]+0.010000), 769.000000
ret_val[0].float_state_arr[1] = (((0.140000*(input[0].x_arr[10]+-14.700000))*0.010000)+input[0].float_state_arr[1]), 65.000000
ret_val[0].float_state_arr[2] = (input[0].float_state_arr[2]+(((input[0].x_arr[9]+-((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))))*0.413280)*0.010000)), -5957.592441
ret_val[0].float_state_arr[3] = 0.000000, 0.000000
ret_val[0].float_state_arr[4] = 0.000000, 0.000000
ret_val[0].float_state_arr[5] = 1.000000, 1.000000
ret_val[0].float_state_arr[6] = ((0.040000*(input[0].x_arr[10]+-14.700000))+(((0.140000*(input[0].x_arr[10]+-14.700000))*0.010000)+input[0].float_state_arr[1])), 65.000000
ret_val[0].output_arr[0] = 1.660000, 1.660000
ret_val[0].output_arr[1] = 0.000000, 0.000000
ret_val[0].output_arr[2] = 14.700000, 14.700000

to explore negation deepest unexplored condition of predicate,
Path Predicate Prefix to solve :
afc.c: -140 input[0].x_arr[10]>-1.000000
afc.c: -142 ((unsigned char)input[0].float_state_arr[3])=0
afc.c: +146 (input[0].float_state_arr[0]+0.010000)>=10.000000
afc.c: +151 ((unsigned char)input[0].float_state_arr[4])<>0
afc.c: -158 input[0].x_arr[8]<50.000000
afc.c: -160 0=0
afc.c: -160b 1<>0
afc.c: -161 0=0
afc.c: +162 1<>0
afc.c: -162b 0=0
afc.c: +182 0=0
afc.c: -191 0=0
afc.c: -195 (1.000000+((0.040000*(input[0].x_arr[10]+-14.700000))+(((0.140000*(input[0].x_arr[10]+-14.700000))*0.010000)+input[0].float_state_arr[1])))=<100.000000
afc.c: -197 (1.000000+((0.040000*(input[0].x_arr[10]+-14.700000))+(((0.140000*(input[0].x_arr[10]+-14.700000))*0.010000)+input[0].float_state_arr[1])))>=0.000000
afc.c: -205 (((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))/14.700000)*(1.000000+((0.040000*(input[0].x_arr[10]+-14.700000))+(((0.140000*(input[0].x_arr[10]+-14.700000))*0.010000)+input[0].float_state_arr[1]))))=<1.660000
Path Prefix to cover :
afc.c
-140 -142 +146 +151 -158 -160 -160b -161 +162 -162b +182 -191 -195 -197 -205


TEST CASE 71

Dimensions:
input__controller = 1;
input__controller[0].input_arr = 1;
input__controller[0].int_state_arr = 0;
input__controller[0].float_state_arr = 7;
input__controller[0].x_arr = 13;
ret_val__controller = 1;
ret_val__controller[0].int_state_arr = 0;
ret_val__controller[0].float_state_arr = 7;
ret_val__controller[0].output_arr = 3;

Other input values:
input__controller[0].input_arr[0] = -423.000000;
input__controller[0].float_state_arr[0] = 768.990000;
input__controller[0].float_state_arr[1] = -1.000000;
input__controller[0].float_state_arr[2] = -152.000000;
input__controller[0].float_state_arr[3] = -0.400000;
input__controller[0].float_state_arr[4] = -193.000000;
input__controller[0].float_state_arr[5] = -384.000000;
input__controller[0].float_state_arr[6] = -73.000000;
input__controller[0].x_arr[0] = -493.000000;
input__controller[0].x_arr[1] = 170.000000;
input__controller[0].x_arr[2] = -8.000000;
input__controller[0].x_arr[3] = -463.000000;
input__controller[0].x_arr[4] = -387.000000;
input__controller[0].x_arr[5] = -245.000000;
input__controller[0].x_arr[6] = 150.000000;
input__controller[0].x_arr[7] = 0.000000;
input__controller[0].x_arr[8] = -478.000000;
input__controller[0].x_arr[9] = -0.366000;
input__controller[0].x_arr[10] = 14.700000;
input__controller[0].x_arr[11] = 173.000000;
input__controller[0].x_arr[12] = -343.000000;
ret_val__controller[0].float_state_arr[0] = 397.000000;
ret_val__controller[0].float_state_arr[1] = -241.000000;
ret_val__controller[0].float_state_arr[2] = -268.000000;
ret_val__controller[0].float_state_arr[3] = -365.000000;
ret_val__controller[0].float_state_arr[4] = -94.000000;
ret_val__controller[0].float_state_arr[5] = -68.000000;
ret_val__controller[0].float_state_arr[6] = -139.000000;
ret_val__controller[0].output_arr[0] = 438.000000;
ret_val__controller[0].output_arr[1] = -491.000000;
ret_val__controller[0].output_arr[2] = -16.000000;

Result:
unknown

Path Covered :
afc.c
-140 -142 +146 +151 -158 -160 -160b -161 +162 -162b +182 -191 -195 -197 -205 +207


Path Predicate for case 71:
afc.c: -140 input[0].x_arr[10]>-1.000000
afc.c: -142 ((unsigned char)input[0].float_state_arr[3])=0
afc.c: +146 (input[0].float_state_arr[0]+0.010000)>=10.000000
afc.c: +151 ((unsigned char)input[0].float_state_arr[4])<>0
afc.c: -158 input[0].x_arr[8]<50.000000
afc.c: -160 0=0
afc.c: -160b 1<>0
afc.c: -161 0=0
afc.c: +162 1<>0
afc.c: -162b 0=0
afc.c: +182 0=0
afc.c: -191 0=0
afc.c: -195 (1.000000+((0.040000*(input[0].x_arr[10]+-14.700000))+(((0.140000*(input[0].x_arr[10]+-14.700000))*0.010000)+input[0].float_state_arr[1])))=<100.000000
afc.c: -197 (1.000000+((0.040000*(input[0].x_arr[10]+-14.700000))+(((0.140000*(input[0].x_arr[10]+-14.700000))*0.010000)+input[0].float_state_arr[1])))>=0.000000
afc.c: -205 (((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))/14.700000)*(1.000000+((0.040000*(input[0].x_arr[10]+-14.700000))+(((0.140000*(input[0].x_arr[10]+-14.700000))*0.010000)+input[0].float_state_arr[1]))))=<1.660000
afc.c: +207 (((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))/14.700000)*(1.000000+((0.040000*(input[0].x_arr[10]+-14.700000))+(((0.140000*(input[0].x_arr[10]+-14.700000))*0.010000)+input[0].float_state_arr[1]))))<0.130000

Simplified Path Predicate for case 71:
input[0].x_arr[10]>-1.000000 AND
((unsigned char)input[0].float_state_arr[3])=0 AND
(input[0].float_state_arr[0]+0.010000)>=10.000000 AND
((unsigned char)input[0].float_state_arr[4])<>0 AND
input[0].x_arr[8]<50.000000 AND
(1.000000+((0.040000*(input[0].x_arr[10]+-14.700000))+(((0.140000*(input[0].x_arr[10]+-14.700000))*0.010000)+input[0].float_state_arr[1])))=<100.000000 AND
(1.000000+((0.040000*(input[0].x_arr[10]+-14.700000))+(((0.140000*(input[0].x_arr[10]+-14.700000))*0.010000)+input[0].float_state_arr[1])))>=0.000000 AND
(((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))/14.700000)*(1.000000+((0.040000*(input[0].x_arr[10]+-14.700000))+(((0.140000*(input[0].x_arr[10]+-14.700000))*0.010000)+input[0].float_state_arr[1]))))=<1.660000 AND
(((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))/14.700000)*(1.000000+((0.040000*(input[0].x_arr[10]+-14.700000))+(((0.140000*(input[0].x_arr[10]+-14.700000))*0.010000)+input[0].float_state_arr[1]))))<0.130000

Output Values for case 71: (Symbolic,Concrete)
return value = 0, 0
ret_val[0].float_state_arr[0] = (input[0].float_state_arr[0]+0.010000), 769.000000
ret_val[0].float_state_arr[1] = (((0.140000*(input[0].x_arr[10]+-14.700000))*0.010000)+input[0].float_state_arr[1]), -1.000000
ret_val[0].float_state_arr[2] = (input[0].float_state_arr[2]+(((input[0].x_arr[9]+-((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))))*0.413280)*0.010000)), -152.000000
ret_val[0].float_state_arr[3] = 0.000000, 0.000000
ret_val[0].float_state_arr[4] = 0.000000, 0.000000
ret_val[0].float_state_arr[5] = 1.000000, 1.000000
ret_val[0].float_state_arr[6] = ((0.040000*(input[0].x_arr[10]+-14.700000))+(((0.140000*(input[0].x_arr[10]+-14.700000))*0.010000)+input[0].float_state_arr[1])), -1.000000
ret_val[0].output_arr[0] = 0.130000, 0.130000
ret_val[0].output_arr[1] = 0.000000, 0.000000
ret_val[0].output_arr[2] = 14.700000, 14.700000

to explore negation deepest unexplored condition of predicate,
Path Predicate Prefix to solve :
afc.c: -140 input[0].x_arr[10]>-1.000000
afc.c: -142 ((unsigned char)input[0].float_state_arr[3])=0
afc.c: +146 (input[0].float_state_arr[0]+0.010000)>=10.000000
afc.c: +151 ((unsigned char)input[0].float_state_arr[4])<>0
afc.c: -158 input[0].x_arr[8]<50.000000
afc.c: -160 0=0
afc.c: -160b 1<>0
afc.c: -161 0=0
afc.c: +162 1<>0
afc.c: -162b 0=0
afc.c: +182 0=0
afc.c: -191 0=0
afc.c: -195 (1.000000+((0.040000*(input[0].x_arr[10]+-14.700000))+(((0.140000*(input[0].x_arr[10]+-14.700000))*0.010000)+input[0].float_state_arr[1])))=<100.000000
afc.c: -197 (1.000000+((0.040000*(input[0].x_arr[10]+-14.700000))+(((0.140000*(input[0].x_arr[10]+-14.700000))*0.010000)+input[0].float_state_arr[1])))>=0.000000
afc.c: -205 (((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))/14.700000)*(1.000000+((0.040000*(input[0].x_arr[10]+-14.700000))+(((0.140000*(input[0].x_arr[10]+-14.700000))*0.010000)+input[0].float_state_arr[1]))))=<1.660000
afc.c: -207 (((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))/14.700000)*(1.000000+((0.040000*(input[0].x_arr[10]+-14.700000))+(((0.140000*(input[0].x_arr[10]+-14.700000))*0.010000)+input[0].float_state_arr[1]))))>=0.130000
Path Prefix to cover :
afc.c
-140 -142 +146 +151 -158 -160 -160b -161 +162 -162b +182 -191 -195 -197 -205 -207


TEST CASE 72

Dimensions:
input__controller = 1;
input__controller[0].input_arr = 1;
input__controller[0].int_state_arr = 0;
input__controller[0].float_state_arr = 7;
input__controller[0].x_arr = 13;
ret_val__controller = 1;
ret_val__controller[0].int_state_arr = 0;
ret_val__controller[0].float_state_arr = 7;
ret_val__controller[0].output_arr = 3;

Other input values:
input__controller[0].input_arr[0] = -423.000000;
input__controller[0].float_state_arr[0] = 768.990000;
input__controller[0].float_state_arr[1] = -0.928206;
input__controller[0].float_state_arr[2] = 465.000000;
input__controller[0].float_state_arr[3] = -0.400000;
input__controller[0].float_state_arr[4] = -193.000000;
input__controller[0].float_state_arr[5] = -384.000000;
input__controller[0].float_state_arr[6] = -73.000000;
input__controller[0].x_arr[0] = -493.000000;
input__controller[0].x_arr[1] = 170.000000;
input__controller[0].x_arr[2] = -8.000000;
input__controller[0].x_arr[3] = -463.000000;
input__controller[0].x_arr[4] = -387.000000;
input__controller[0].x_arr[5] = -245.000000;
input__controller[0].x_arr[6] = 150.000000;
input__controller[0].x_arr[7] = -0.045599;
input__controller[0].x_arr[8] = -478.000000;
input__controller[0].x_arr[9] = 330.000000;
input__controller[0].x_arr[10] = 14.700000;
input__controller[0].x_arr[11] = 173.000000;
input__controller[0].x_arr[12] = -343.000000;
ret_val__controller[0].float_state_arr[0] = 397.000000;
ret_val__controller[0].float_state_arr[1] = -241.000000;
ret_val__controller[0].float_state_arr[2] = -268.000000;
ret_val__controller[0].float_state_arr[3] = -365.000000;
ret_val__controller[0].float_state_arr[4] = -94.000000;
ret_val__controller[0].float_state_arr[5] = -68.000000;
ret_val__controller[0].float_state_arr[6] = -139.000000;
ret_val__controller[0].output_arr[0] = 438.000000;
ret_val__controller[0].output_arr[1] = -491.000000;
ret_val__controller[0].output_arr[2] = -16.000000;

Result:
unknown

Path Covered :
afc.c
-140 -142 +146 +151 -158 -160 -160b -161 +162 -162b +182 -191 -195 -197 -205 -207


Path Predicate for case 72:
afc.c: -140 input[0].x_arr[10]>-1.000000
afc.c: -142 ((unsigned char)input[0].float_state_arr[3])=0
afc.c: +146 (input[0].float_state_arr[0]+0.010000)>=10.000000
afc.c: +151 ((unsigned char)input[0].float_state_arr[4])<>0
afc.c: -158 input[0].x_arr[8]<50.000000
afc.c: -160 0=0
afc.c: -160b 1<>0
afc.c: -161 0=0
afc.c: +162 1<>0
afc.c: -162b 0=0
afc.c: +182 0=0
afc.c: -191 0=0
afc.c: -195 (1.000000+((0.040000*(input[0].x_arr[10]+-14.700000))+(((0.140000*(input[0].x_arr[10]+-14.700000))*0.010000)+input[0].float_state_arr[1])))=<100.000000
afc.c: -197 (1.000000+((0.040000*(input[0].x_arr[10]+-14.700000))+(((0.140000*(input[0].x_arr[10]+-14.700000))*0.010000)+input[0].float_state_arr[1])))>=0.000000
afc.c: -205 (((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))/14.700000)*(1.000000+((0.040000*(input[0].x_arr[10]+-14.700000))+(((0.140000*(input[0].x_arr[10]+-14.700000))*0.010000)+input[0].float_state_arr[1]))))=<1.660000
afc.c: -207 (((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))/14.700000)*(1.000000+((0.040000*(input[0].x_arr[10]+-14.700000))+(((0.140000*(input[0].x_arr[10]+-14.700000))*0.010000)+input[0].float_state_arr[1]))))>=0.130000

Simplified Path Predicate for case 72:
input[0].x_arr[10]>-1.000000 AND
((unsigned char)input[0].float_state_arr[3])=0 AND
(input[0].float_state_arr[0]+0.010000)>=10.000000 AND
((unsigned char)input[0].float_state_arr[4])<>0 AND
input[0].x_arr[8]<50.000000 AND
(1.000000+((0.040000*(input[0].x_arr[10]+-14.700000))+(((0.140000*(input[0].x_arr[10]+-14.700000))*0.010000)+input[0].float_state_arr[1])))=<100.000000 AND
(1.000000+((0.040000*(input[0].x_arr[10]+-14.700000))+(((0.140000*(input[0].x_arr[10]+-14.700000))*0.010000)+input[0].float_state_arr[1])))>=0.000000 AND
(((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))/14.700000)*(1.000000+((0.040000*(input[0].x_arr[10]+-14.700000))+(((0.140000*(input[0].x_arr[10]+-14.700000))*0.010000)+input[0].float_state_arr[1]))))=<1.660000 AND
(((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))/14.700000)*(1.000000+((0.040000*(input[0].x_arr[10]+-14.700000))+(((0.140000*(input[0].x_arr[10]+-14.700000))*0.010000)+input[0].float_state_arr[1]))))>=0.130000

Output Values for case 72: (Symbolic,Concrete)
return value = 0, 0
ret_val[0].float_state_arr[0] = (input[0].float_state_arr[0]+0.010000), 769.000000
ret_val[0].float_state_arr[1] = (((0.140000*(input[0].x_arr[10]+-14.700000))*0.010000)+input[0].float_state_arr[1]), -0.928206
ret_val[0].float_state_arr[2] = (input[0].float_state_arr[2]+(((input[0].x_arr[9]+-((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))))*0.413280)*0.010000)), 465.000000
ret_val[0].float_state_arr[3] = 0.000000, 0.000000
ret_val[0].float_state_arr[4] = 0.000000, 0.000000
ret_val[0].float_state_arr[5] = 1.000000, 1.000000
ret_val[0].float_state_arr[6] = ((0.040000*(input[0].x_arr[10]+-14.700000))+(((0.140000*(input[0].x_arr[10]+-14.700000))*0.010000)+input[0].float_state_arr[1])), -0.928206
ret_val[0].output_arr[0] = (((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))/14.700000)*(1.000000+((0.040000*(input[0].x_arr[10]+-14.700000))+(((0.140000*(input[0].x_arr[10]+-14.700000))*0.010000)+input[0].float_state_arr[1])))), 1.611700
ret_val[0].output_arr[1] = 0.000000, 0.000000
ret_val[0].output_arr[2] = 14.700000, 14.700000

to explore negation deepest unexplored condition of predicate,
Path Predicate Prefix to solve :
afc.c: -140 input[0].x_arr[10]>-1.000000
afc.c: -142 ((unsigned char)input[0].float_state_arr[3])=0
afc.c: +146 (input[0].float_state_arr[0]+0.010000)>=10.000000
afc.c: +151 ((unsigned char)input[0].float_state_arr[4])<>0
afc.c: -158 input[0].x_arr[8]<50.000000
afc.c: -160 0=0
afc.c: -160b 1<>0
afc.c: -161 0=0
afc.c: +162 1<>0
afc.c: -162b 0=0
afc.c: +182 0=0
afc.c: -191 0=0
afc.c: +195 (1.000000+((0.040000*(input[0].x_arr[10]+-14.700000))+(((0.140000*(input[0].x_arr[10]+-14.700000))*0.010000)+input[0].float_state_arr[1])))>100.000000
Path Prefix to cover :
afc.c
-140 -142 +146 +151 -158 -160 -160b -161 +162 -162b +182 -191 +195


TEST CASE 73

Dimensions:
input__controller = 1;
input__controller[0].input_arr = 1;
input__controller[0].int_state_arr = 0;
input__controller[0].float_state_arr = 7;
input__controller[0].x_arr = 13;
ret_val__controller = 1;
ret_val__controller[0].int_state_arr = 0;
ret_val__controller[0].float_state_arr = 7;
ret_val__controller[0].output_arr = 3;

Other input values:
input__controller[0].input_arr[0] = -423.000000;
input__controller[0].float_state_arr[0] = 768.990000;
input__controller[0].float_state_arr[1] = 952.000000;
input__controller[0].float_state_arr[2] = -292.000000;
input__controller[0].float_state_arr[3] = -0.400000;
input__controller[0].float_state_arr[4] = -193.000000;
input__controller[0].float_state_arr[5] = -384.000000;
input__controller[0].float_state_arr[6] = -73.000000;
input__controller[0].x_arr[0] = -493.000000;
input__controller[0].x_arr[1] = 170.000000;
input__controller[0].x_arr[2] = -8.000000;
input__controller[0].x_arr[3] = -463.000000;
input__controller[0].x_arr[4] = -387.000000;
input__controller[0].x_arr[5] = -245.000000;
input__controller[0].x_arr[6] = 150.000000;
input__controller[0].x_arr[7] = -475.000000;
input__controller[0].x_arr[8] = -478.000000;
input__controller[0].x_arr[9] = -156.000000;
input__controller[0].x_arr[10] = 14.700000;
input__controller[0].x_arr[11] = 173.000000;
input__controller[0].x_arr[12] = -343.000000;
ret_val__controller[0].float_state_arr[0] = 397.000000;
ret_val__controller[0].float_state_arr[1] = -241.000000;
ret_val__controller[0].float_state_arr[2] = -268.000000;
ret_val__controller[0].float_state_arr[3] = -365.000000;
ret_val__controller[0].float_state_arr[4] = -94.000000;
ret_val__controller[0].float_state_arr[5] = -68.000000;
ret_val__controller[0].float_state_arr[6] = -139.000000;
ret_val__controller[0].output_arr[0] = 438.000000;
ret_val__controller[0].output_arr[1] = -491.000000;
ret_val__controller[0].output_arr[2] = -16.000000;

Result:
unknown

Path Covered :
afc.c
-140 -142 +146 +151 -158 -160 -160b -161 +162 -162b +182 -191 +195 +205


Path Predicate for case 73:
afc.c: -140 input[0].x_arr[10]>-1.000000
afc.c: -142 ((unsigned char)input[0].float_state_arr[3])=0
afc.c: +146 (input[0].float_state_arr[0]+0.010000)>=10.000000
afc.c: +151 ((unsigned char)input[0].float_state_arr[4])<>0
afc.c: -158 input[0].x_arr[8]<50.000000
afc.c: -160 0=0
afc.c: -160b 1<>0
afc.c: -161 0=0
afc.c: +162 1<>0
afc.c: -162b 0=0
afc.c: +182 0=0
afc.c: -191 0=0
afc.c: +195 (1.000000+((0.040000*(input[0].x_arr[10]+-14.700000))+(((0.140000*(input[0].x_arr[10]+-14.700000))*0.010000)+input[0].float_state_arr[1])))>100.000000
afc.c: +205 (((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))/14.700000)*100.000000)>1.660000

Simplified Path Predicate for case 73:
input[0].x_arr[10]>-1.000000 AND
((unsigned char)input[0].float_state_arr[3])=0 AND
(input[0].float_state_arr[0]+0.010000)>=10.000000 AND
((unsigned char)input[0].float_state_arr[4])<>0 AND
input[0].x_arr[8]<50.000000 AND
(1.000000+((0.040000*(input[0].x_arr[10]+-14.700000))+(((0.140000*(input[0].x_arr[10]+-14.700000))*0.010000)+input[0].float_state_arr[1])))>100.000000 AND
(((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))/14.700000)*100.000000)>1.660000

Output Values for case 73: (Symbolic,Concrete)
return value = 0, 0
ret_val[0].float_state_arr[0] = (input[0].float_state_arr[0]+0.010000), 769.000000
ret_val[0].float_state_arr[1] = (((0.140000*(input[0].x_arr[10]+-14.700000))*0.010000)+input[0].float_state_arr[1]), 952.000000
ret_val[0].float_state_arr[2] = (input[0].float_state_arr[2]+(((input[0].x_arr[9]+-((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))))*0.413280)*0.010000)), -5957.592441
ret_val[0].float_state_arr[3] = 0.000000, 0.000000
ret_val[0].float_state_arr[4] = 0.000000, 0.000000
ret_val[0].float_state_arr[5] = 1.000000, 1.000000
ret_val[0].float_state_arr[6] = ((0.040000*(input[0].x_arr[10]+-14.700000))+(((0.140000*(input[0].x_arr[10]+-14.700000))*0.010000)+input[0].float_state_arr[1])), 952.000000
ret_val[0].output_arr[0] = 1.660000, 1.660000
ret_val[0].output_arr[1] = 0.000000, 0.000000
ret_val[0].output_arr[2] = 14.700000, 14.700000

to explore negation deepest unexplored condition of predicate,
Path Predicate Prefix to solve :
afc.c: -140 input[0].x_arr[10]>-1.000000
afc.c: -142 ((unsigned char)input[0].float_state_arr[3])=0
afc.c: +146 (input[0].float_state_arr[0]+0.010000)>=10.000000
afc.c: +151 ((unsigned char)input[0].float_state_arr[4])<>0
afc.c: -158 input[0].x_arr[8]<50.000000
afc.c: -160 0=0
afc.c: -160b 1<>0
afc.c: -161 0=0
afc.c: +162 1<>0
afc.c: -162b 0=0
afc.c: +182 0=0
afc.c: -191 0=0
afc.c: +195 (1.000000+((0.040000*(input[0].x_arr[10]+-14.700000))+(((0.140000*(input[0].x_arr[10]+-14.700000))*0.010000)+input[0].float_state_arr[1])))>100.000000
afc.c: -205 (((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))/14.700000)*100.000000)=<1.660000
Path Prefix to cover :
afc.c
-140 -142 +146 +151 -158 -160 -160b -161 +162 -162b +182 -191 +195 -205


TEST CASE 74

Dimensions:
input__controller = 1;
input__controller[0].input_arr = 1;
input__controller[0].int_state_arr = 0;
input__controller[0].float_state_arr = 7;
input__controller[0].x_arr = 13;
ret_val__controller = 1;
ret_val__controller[0].int_state_arr = 0;
ret_val__controller[0].float_state_arr = 7;
ret_val__controller[0].output_arr = 3;

Other input values:
input__controller[0].input_arr[0] = -423.000000;
input__controller[0].float_state_arr[0] = 768.990000;
input__controller[0].float_state_arr[1] = 952.000000;
input__controller[0].float_state_arr[2] = -356.000000;
input__controller[0].float_state_arr[3] = -0.400000;
input__controller[0].float_state_arr[4] = -193.000000;
input__controller[0].float_state_arr[5] = -384.000000;
input__controller[0].float_state_arr[6] = -73.000000;
input__controller[0].x_arr[0] = -493.000000;
input__controller[0].x_arr[1] = 170.000000;
input__controller[0].x_arr[2] = -8.000000;
input__controller[0].x_arr[3] = -463.000000;
input__controller[0].x_arr[4] = -387.000000;
input__controller[0].x_arr[5] = -245.000000;
input__controller[0].x_arr[6] = 150.000000;
input__controller[0].x_arr[7] = -120869.996592;
input__controller[0].x_arr[8] = -478.000000;
input__controller[0].x_arr[9] = -416.000000;
input__controller[0].x_arr[10] = 14.700000;
input__controller[0].x_arr[11] = 173.000000;
input__controller[0].x_arr[12] = -343.000000;
ret_val__controller[0].float_state_arr[0] = 397.000000;
ret_val__controller[0].float_state_arr[1] = -241.000000;
ret_val__controller[0].float_state_arr[2] = -268.000000;
ret_val__controller[0].float_state_arr[3] = -365.000000;
ret_val__controller[0].float_state_arr[4] = -94.000000;
ret_val__controller[0].float_state_arr[5] = -68.000000;
ret_val__controller[0].float_state_arr[6] = -139.000000;
ret_val__controller[0].output_arr[0] = 438.000000;
ret_val__controller[0].output_arr[1] = -491.000000;
ret_val__controller[0].output_arr[2] = -16.000000;

Result:
unknown

Path Covered :
afc.c
-140 -142 +146 +151 -158 -160 -160b -161 +162 -162b +182 -191 +195 -205 +207


Path Predicate for case 74:
afc.c: -140 input[0].x_arr[10]>-1.000000
afc.c: -142 ((unsigned char)input[0].float_state_arr[3])=0
afc.c: +146 (input[0].float_state_arr[0]+0.010000)>=10.000000
afc.c: +151 ((unsigned char)input[0].float_state_arr[4])<>0
afc.c: -158 input[0].x_arr[8]<50.000000
afc.c: -160 0=0
afc.c: -160b 1<>0
afc.c: -161 0=0
afc.c: +162 1<>0
afc.c: -162b 0=0
afc.c: +182 0=0
afc.c: -191 0=0
afc.c: +195 (1.000000+((0.040000*(input[0].x_arr[10]+-14.700000))+(((0.140000*(input[0].x_arr[10]+-14.700000))*0.010000)+input[0].float_state_arr[1])))>100.000000
afc.c: -205 (((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))/14.700000)*100.000000)=<1.660000
afc.c: +207 (((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))/14.700000)*100.000000)<0.130000

Simplified Path Predicate for case 74:
input[0].x_arr[10]>-1.000000 AND
((unsigned char)input[0].float_state_arr[3])=0 AND
(input[0].float_state_arr[0]+0.010000)>=10.000000 AND
((unsigned char)input[0].float_state_arr[4])<>0 AND
input[0].x_arr[8]<50.000000 AND
(1.000000+((0.040000*(input[0].x_arr[10]+-14.700000))+(((0.140000*(input[0].x_arr[10]+-14.700000))*0.010000)+input[0].float_state_arr[1])))>100.000000 AND
(((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))/14.700000)*100.000000)=<1.660000 AND
(((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))/14.700000)*100.000000)<0.130000

Output Values for case 74: (Symbolic,Concrete)
return value = 0, 0
ret_val[0].float_state_arr[0] = (input[0].float_state_arr[0]+0.010000), 769.000000
ret_val[0].float_state_arr[1] = (((0.140000*(input[0].x_arr[10]+-14.700000))*0.010000)+input[0].float_state_arr[1]), 952.000000
ret_val[0].float_state_arr[2] = (input[0].float_state_arr[2]+(((input[0].x_arr[9]+-((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))))*0.413280)*0.010000)), -356.000000
ret_val[0].float_state_arr[3] = 0.000000, 0.000000
ret_val[0].float_state_arr[4] = 0.000000, 0.000000
ret_val[0].float_state_arr[5] = 1.000000, 1.000000
ret_val[0].float_state_arr[6] = ((0.040000*(input[0].x_arr[10]+-14.700000))+(((0.140000*(input[0].x_arr[10]+-14.700000))*0.010000)+input[0].float_state_arr[1])), 952.000000
ret_val[0].output_arr[0] = 0.130000, 0.130000
ret_val[0].output_arr[1] = 0.000000, 0.000000
ret_val[0].output_arr[2] = 14.700000, 14.700000

to explore negation deepest unexplored condition of predicate,
Path Predicate Prefix to solve :
afc.c: -140 input[0].x_arr[10]>-1.000000
afc.c: -142 ((unsigned char)input[0].float_state_arr[3])=0
afc.c: +146 (input[0].float_state_arr[0]+0.010000)>=10.000000
afc.c: +151 ((unsigned char)input[0].float_state_arr[4])<>0
afc.c: -158 input[0].x_arr[8]<50.000000
afc.c: -160 0=0
afc.c: -160b 1<>0
afc.c: -161 0=0
afc.c: +162 1<>0
afc.c: -162b 0=0
afc.c: +182 0=0
afc.c: -191 0=0
afc.c: +195 (1.000000+((0.040000*(input[0].x_arr[10]+-14.700000))+(((0.140000*(input[0].x_arr[10]+-14.700000))*0.010000)+input[0].float_state_arr[1])))>100.000000
afc.c: -205 (((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))/14.700000)*100.000000)=<1.660000
afc.c: -207 (((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))/14.700000)*100.000000)>=0.130000
Path Prefix to cover :
afc.c
-140 -142 +146 +151 -158 -160 -160b -161 +162 -162b +182 -191 +195 -205 -207
Supposed infeasible (with the given preconditions) (constraint resolution timeout - all_vars_negated_ctr)

to explore negation deepest unexplored condition of predicate,
Path Predicate Prefix to solve :
afc.c: -140 input[0].x_arr[10]>-1.000000
afc.c: -142 ((unsigned char)input[0].float_state_arr[3])=0
afc.c: +146 (input[0].float_state_arr[0]+0.010000)>=10.000000
afc.c: +151 ((unsigned char)input[0].float_state_arr[4])<>0
afc.c: -158 input[0].x_arr[8]<50.000000
afc.c: -160 0=0
afc.c: -160b 1<>0
afc.c: -161 0=0
afc.c: +162 1<>0
afc.c: -162b 0=0
afc.c: +182 0=0
afc.c: +191 0<>0
Path Prefix to cover :
afc.c
-140 -142 +146 +151 -158 -160 -160b -161 +162 -162b +182 +191
trivially infeasible

to explore negation deepest unexplored condition of predicate,
Path Predicate Prefix to solve :
afc.c: -140 input[0].x_arr[10]>-1.000000
afc.c: -142 ((unsigned char)input[0].float_state_arr[3])=0
afc.c: +146 (input[0].float_state_arr[0]+0.010000)>=10.000000
afc.c: +151 ((unsigned char)input[0].float_state_arr[4])<>0
afc.c: -158 input[0].x_arr[8]<50.000000
afc.c: -160 0=0
afc.c: -160b 1<>0
afc.c: -161 0=0
afc.c: +162 1<>0
afc.c: -162b 0=0
afc.c: -182 0<>0
Path Prefix to cover :
afc.c
-140 -142 +146 +151 -158 -160 -160b -161 +162 -162b -182
trivially infeasible

to explore negation deepest unexplored condition of predicate,
Path Predicate Prefix to solve :
afc.c: -140 input[0].x_arr[10]>-1.000000
afc.c: -142 ((unsigned char)input[0].float_state_arr[3])=0
afc.c: +146 (input[0].float_state_arr[0]+0.010000)>=10.000000
afc.c: +151 ((unsigned char)input[0].float_state_arr[4])<>0
afc.c: -158 input[0].x_arr[8]<50.000000
afc.c: -160 0=0
afc.c: -160b 1<>0
afc.c: -161 0=0
afc.c: +162 1<>0
afc.c: +162b 0<>0
Path Prefix to cover :
afc.c
-140 -142 +146 +151 -158 -160 -160b -161 +162 +162b
trivially infeasible

to explore negation deepest unexplored condition of predicate,
Path Predicate Prefix to solve :
afc.c: -140 input[0].x_arr[10]>-1.000000
afc.c: -142 ((unsigned char)input[0].float_state_arr[3])=0
afc.c: +146 (input[0].float_state_arr[0]+0.010000)>=10.000000
afc.c: +151 ((unsigned char)input[0].float_state_arr[4])<>0
afc.c: -158 input[0].x_arr[8]<50.000000
afc.c: -160 0=0
afc.c: -160b 1<>0
afc.c: -161 0=0
afc.c: -162 1=0
Path Prefix to cover :
afc.c
-140 -142 +146 +151 -158 -160 -160b -161 -162
trivially infeasible

to explore negation deepest unexplored condition of predicate,
Path Predicate Prefix to solve :
afc.c: -140 input[0].x_arr[10]>-1.000000
afc.c: -142 ((unsigned char)input[0].float_state_arr[3])=0
afc.c: +146 (input[0].float_state_arr[0]+0.010000)>=10.000000
afc.c: +151 ((unsigned char)input[0].float_state_arr[4])<>0
afc.c: -158 input[0].x_arr[8]<50.000000
afc.c: -160 0=0
afc.c: -160b 1<>0
afc.c: +161 0<>0
Path Prefix to cover :
afc.c
-140 -142 +146 +151 -158 -160 -160b +161
trivially infeasible

to explore negation deepest unexplored condition of predicate,
Path Predicate Prefix to solve :
afc.c: -140 input[0].x_arr[10]>-1.000000
afc.c: -142 ((unsigned char)input[0].float_state_arr[3])=0
afc.c: +146 (input[0].float_state_arr[0]+0.010000)>=10.000000
afc.c: +151 ((unsigned char)input[0].float_state_arr[4])<>0
afc.c: -158 input[0].x_arr[8]<50.000000
afc.c: -160 0=0
afc.c: +160b 1=0
Path Prefix to cover :
afc.c
-140 -142 +146 +151 -158 -160 +160b
trivially infeasible

to explore negation deepest unexplored condition of predicate,
Path Predicate Prefix to solve :
afc.c: -140 input[0].x_arr[10]>-1.000000
afc.c: -142 ((unsigned char)input[0].float_state_arr[3])=0
afc.c: +146 (input[0].float_state_arr[0]+0.010000)>=10.000000
afc.c: +151 ((unsigned char)input[0].float_state_arr[4])<>0
afc.c: -158 input[0].x_arr[8]<50.000000
afc.c: +160 0<>0
Path Prefix to cover :
afc.c
-140 -142 +146 +151 -158 +160
trivially infeasible

to explore negation deepest unexplored condition of predicate,
Path Predicate Prefix to solve :
afc.c: -140 input[0].x_arr[10]>-1.000000
afc.c: -142 ((unsigned char)input[0].float_state_arr[3])=0
afc.c: +146 (input[0].float_state_arr[0]+0.010000)>=10.000000
afc.c: +151 ((unsigned char)input[0].float_state_arr[4])<>0
afc.c: +158 input[0].x_arr[8]>=50.000000
Path Prefix to cover :
afc.c
-140 -142 +146 +151 +158


TEST CASE 76

Dimensions:
input__controller = 1;
input__controller[0].input_arr = 1;
input__controller[0].int_state_arr = 0;
input__controller[0].float_state_arr = 7;
input__controller[0].x_arr = 13;
ret_val__controller = 1;
ret_val__controller[0].int_state_arr = 0;
ret_val__controller[0].float_state_arr = 7;
ret_val__controller[0].output_arr = 3;

Other input values:
input__controller[0].input_arr[0] = -423.000000;
input__controller[0].float_state_arr[0] = 768.990000;
input__controller[0].float_state_arr[1] = -78.000000;
input__controller[0].float_state_arr[2] = -292.000000;
input__controller[0].float_state_arr[3] = -0.400000;
input__controller[0].float_state_arr[4] = -193.000000;
input__controller[0].float_state_arr[5] = -384.000000;
input__controller[0].float_state_arr[6] = -73.000000;
input__controller[0].x_arr[0] = -493.000000;
input__controller[0].x_arr[1] = 170.000000;
input__controller[0].x_arr[2] = -8.000000;
input__controller[0].x_arr[3] = -463.000000;
input__controller[0].x_arr[4] = -387.000000;
input__controller[0].x_arr[5] = -245.000000;
input__controller[0].x_arr[6] = 150.000000;
input__controller[0].x_arr[7] = -475.000000;
input__controller[0].x_arr[8] = 583.000000;
input__controller[0].x_arr[9] = -156.000000;
input__controller[0].x_arr[10] = 417.000000;
input__controller[0].x_arr[11] = 173.000000;
input__controller[0].x_arr[12] = -343.000000;
ret_val__controller[0].float_state_arr[0] = 397.000000;
ret_val__controller[0].float_state_arr[1] = -241.000000;
ret_val__controller[0].float_state_arr[2] = -268.000000;
ret_val__controller[0].float_state_arr[3] = -365.000000;
ret_val__controller[0].float_state_arr[4] = -94.000000;
ret_val__controller[0].float_state_arr[5] = -68.000000;
ret_val__controller[0].float_state_arr[6] = -139.000000;
ret_val__controller[0].output_arr[0] = 438.000000;
ret_val__controller[0].output_arr[1] = -491.000000;
ret_val__controller[0].output_arr[2] = -16.000000;

Result:
unknown

Path Covered :
afc.c
-140 -142 +146 +151 +158 -160 -160b +161 +162 +162b -182 +191 +205


Path Predicate for case 76:
afc.c: -140 input[0].x_arr[10]>-1.000000
afc.c: -142 ((unsigned char)input[0].float_state_arr[3])=0
afc.c: +146 (input[0].float_state_arr[0]+0.010000)>=10.000000
afc.c: +151 ((unsigned char)input[0].float_state_arr[4])<>0
afc.c: +158 input[0].x_arr[8]>=50.000000
afc.c: -160 0=0
afc.c: -160b 1<>0
afc.c: +161 1<>0
afc.c: +162 1<>0
afc.c: +162b 1<>0
afc.c: -182 1<>0
afc.c: +191 1<>0
afc.c: +205 ((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))/12.500000)>1.660000

Simplified Path Predicate for case 76:
input[0].x_arr[10]>-1.000000 AND
((unsigned char)input[0].float_state_arr[3])=0 AND
(input[0].float_state_arr[0]+0.010000)>=10.000000 AND
((unsigned char)input[0].float_state_arr[4])<>0 AND
input[0].x_arr[8]>=50.000000 AND
((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))/12.500000)>1.660000

Output Values for case 76: (Symbolic,Concrete)
return value = 0, 0
ret_val[0].float_state_arr[0] = (input[0].float_state_arr[0]+0.010000), 769.000000
ret_val[0].float_state_arr[1] = input[0].float_state_arr[1], -78.000000
ret_val[0].float_state_arr[2] = (input[0].float_state_arr[2]+(((input[0].x_arr[9]+-((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))))*0.413280)*0.010000)), -5957.592441
ret_val[0].float_state_arr[3] = 0.000000, 0.000000
ret_val[0].float_state_arr[4] = 1.000000, 1.000000
ret_val[0].float_state_arr[5] = 1.000000, 1.000000
ret_val[0].float_state_arr[6] = input[0].float_state_arr[6], -73.000000
ret_val[0].output_arr[0] = 1.660000, 1.660000
ret_val[0].output_arr[1] = 1.000000, 1.000000
ret_val[0].output_arr[2] = 12.500000, 12.500000

to explore negation deepest unexplored condition of predicate,
Path Predicate Prefix to solve :
afc.c: -140 input[0].x_arr[10]>-1.000000
afc.c: -142 ((unsigned char)input[0].float_state_arr[3])=0
afc.c: +146 (input[0].float_state_arr[0]+0.010000)>=10.000000
afc.c: +151 ((unsigned char)input[0].float_state_arr[4])<>0
afc.c: +158 input[0].x_arr[8]>=50.000000
afc.c: -160 0=0
afc.c: -160b 1<>0
afc.c: +161 1<>0
afc.c: +162 1<>0
afc.c: +162b 1<>0
afc.c: -182 1<>0
afc.c: +191 1<>0
afc.c: -205 ((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))/12.500000)=<1.660000
Path Prefix to cover :
afc.c
-140 -142 +146 +151 +158 -160 -160b +161 +162 +162b -182 +191 -205


TEST CASE 77

Dimensions:
input__controller = 1;
input__controller[0].input_arr = 1;
input__controller[0].int_state_arr = 0;
input__controller[0].float_state_arr = 7;
input__controller[0].x_arr = 13;
ret_val__controller = 1;
ret_val__controller[0].int_state_arr = 0;
ret_val__controller[0].float_state_arr = 7;
ret_val__controller[0].output_arr = 3;

Other input values:
input__controller[0].input_arr[0] = -423.000000;
input__controller[0].float_state_arr[0] = 768.990000;
input__controller[0].float_state_arr[1] = -78.000000;
input__controller[0].float_state_arr[2] = -345.000000;
input__controller[0].float_state_arr[3] = -0.400000;
input__controller[0].float_state_arr[4] = -193.000000;
input__controller[0].float_state_arr[5] = -384.000000;
input__controller[0].float_state_arr[6] = -73.000000;
input__controller[0].x_arr[0] = -493.000000;
input__controller[0].x_arr[1] = 170.000000;
input__controller[0].x_arr[2] = -8.000000;
input__controller[0].x_arr[3] = -463.000000;
input__controller[0].x_arr[4] = -387.000000;
input__controller[0].x_arr[5] = -245.000000;
input__controller[0].x_arr[6] = 150.000000;
input__controller[0].x_arr[7] = 0.000000;
input__controller[0].x_arr[8] = 583.000000;
input__controller[0].x_arr[9] = -0.366000;
input__controller[0].x_arr[10] = 417.000000;
input__controller[0].x_arr[11] = 173.000000;
input__controller[0].x_arr[12] = -343.000000;
ret_val__controller[0].float_state_arr[0] = 397.000000;
ret_val__controller[0].float_state_arr[1] = -241.000000;
ret_val__controller[0].float_state_arr[2] = -268.000000;
ret_val__controller[0].float_state_arr[3] = -365.000000;
ret_val__controller[0].float_state_arr[4] = -94.000000;
ret_val__controller[0].float_state_arr[5] = -68.000000;
ret_val__controller[0].float_state_arr[6] = -139.000000;
ret_val__controller[0].output_arr[0] = 438.000000;
ret_val__controller[0].output_arr[1] = -491.000000;
ret_val__controller[0].output_arr[2] = -16.000000;

Result:
unknown

Path Covered :
afc.c
-140 -142 +146 +151 +158 -160 -160b +161 +162 +162b -182 +191 -205 +207


Path Predicate for case 77:
afc.c: -140 input[0].x_arr[10]>-1.000000
afc.c: -142 ((unsigned char)input[0].float_state_arr[3])=0
afc.c: +146 (input[0].float_state_arr[0]+0.010000)>=10.000000
afc.c: +151 ((unsigned char)input[0].float_state_arr[4])<>0
afc.c: +158 input[0].x_arr[8]>=50.000000
afc.c: -160 0=0
afc.c: -160b 1<>0
afc.c: +161 1<>0
afc.c: +162 1<>0
afc.c: +162b 1<>0
afc.c: -182 1<>0
afc.c: +191 1<>0
afc.c: -205 ((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))/12.500000)=<1.660000
afc.c: +207 ((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))/12.500000)<0.130000

Simplified Path Predicate for case 77:
input[0].x_arr[10]>-1.000000 AND
((unsigned char)input[0].float_state_arr[3])=0 AND
(input[0].float_state_arr[0]+0.010000)>=10.000000 AND
((unsigned char)input[0].float_state_arr[4])<>0 AND
input[0].x_arr[8]>=50.000000 AND
((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))/12.500000)=<1.660000 AND
((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))/12.500000)<0.130000

Output Values for case 77: (Symbolic,Concrete)
return value = 0, 0
ret_val[0].float_state_arr[0] = (input[0].float_state_arr[0]+0.010000), 769.000000
ret_val[0].float_state_arr[1] = input[0].float_state_arr[1], -78.000000
ret_val[0].float_state_arr[2] = (input[0].float_state_arr[2]+(((input[0].x_arr[9]+-((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))))*0.413280)*0.010000)), -345.000000
ret_val[0].float_state_arr[3] = 0.000000, 0.000000
ret_val[0].float_state_arr[4] = 1.000000, 1.000000
ret_val[0].float_state_arr[5] = 1.000000, 1.000000
ret_val[0].float_state_arr[6] = input[0].float_state_arr[6], -73.000000
ret_val[0].output_arr[0] = 0.130000, 0.130000
ret_val[0].output_arr[1] = 1.000000, 1.000000
ret_val[0].output_arr[2] = 12.500000, 12.500000

to explore negation deepest unexplored condition of predicate,
Path Predicate Prefix to solve :
afc.c: -140 input[0].x_arr[10]>-1.000000
afc.c: -142 ((unsigned char)input[0].float_state_arr[3])=0
afc.c: +146 (input[0].float_state_arr[0]+0.010000)>=10.000000
afc.c: +151 ((unsigned char)input[0].float_state_arr[4])<>0
afc.c: +158 input[0].x_arr[8]>=50.000000
afc.c: -160 0=0
afc.c: -160b 1<>0
afc.c: +161 1<>0
afc.c: +162 1<>0
afc.c: +162b 1<>0
afc.c: -182 1<>0
afc.c: +191 1<>0
afc.c: -205 ((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))/12.500000)=<1.660000
afc.c: -207 ((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))/12.500000)>=0.130000
Path Prefix to cover :
afc.c
-140 -142 +146 +151 +158 -160 -160b +161 +162 +162b -182 +191 -205 -207


TEST CASE 78

Dimensions:
input__controller = 1;
input__controller[0].input_arr = 1;
input__controller[0].int_state_arr = 0;
input__controller[0].float_state_arr = 7;
input__controller[0].x_arr = 13;
ret_val__controller = 1;
ret_val__controller[0].int_state_arr = 0;
ret_val__controller[0].float_state_arr = 7;
ret_val__controller[0].output_arr = 3;

Other input values:
input__controller[0].input_arr[0] = -423.000000;
input__controller[0].float_state_arr[0] = 768.990000;
input__controller[0].float_state_arr[1] = -78.000000;
input__controller[0].float_state_arr[2] = -95.000000;
input__controller[0].float_state_arr[3] = -0.400000;
input__controller[0].float_state_arr[4] = -193.000000;
input__controller[0].float_state_arr[5] = -384.000000;
input__controller[0].float_state_arr[6] = -73.000000;
input__controller[0].x_arr[0] = -493.000000;
input__controller[0].x_arr[1] = 170.000000;
input__controller[0].x_arr[2] = -8.000000;
input__controller[0].x_arr[3] = -463.000000;
input__controller[0].x_arr[4] = -387.000000;
input__controller[0].x_arr[5] = -245.000000;
input__controller[0].x_arr[6] = 150.000000;
input__controller[0].x_arr[7] = -0.052342;
input__controller[0].x_arr[8] = 583.000000;
input__controller[0].x_arr[9] = 16.000000;
input__controller[0].x_arr[10] = 417.000000;
input__controller[0].x_arr[11] = 173.000000;
input__controller[0].x_arr[12] = -343.000000;
ret_val__controller[0].float_state_arr[0] = 397.000000;
ret_val__controller[0].float_state_arr[1] = -241.000000;
ret_val__controller[0].float_state_arr[2] = -268.000000;
ret_val__controller[0].float_state_arr[3] = -365.000000;
ret_val__controller[0].float_state_arr[4] = -94.000000;
ret_val__controller[0].float_state_arr[5] = -68.000000;
ret_val__controller[0].float_state_arr[6] = -139.000000;
ret_val__controller[0].output_arr[0] = 438.000000;
ret_val__controller[0].output_arr[1] = -491.000000;
ret_val__controller[0].output_arr[2] = -16.000000;

Result:
unknown

Path Covered :
afc.c
-140 -142 +146 +151 +158 -160 -160b +161 +162 +162b -182 +191 -205 -207


Path Predicate for case 78:
afc.c: -140 input[0].x_arr[10]>-1.000000
afc.c: -142 ((unsigned char)input[0].float_state_arr[3])=0
afc.c: +146 (input[0].float_state_arr[0]+0.010000)>=10.000000
afc.c: +151 ((unsigned char)input[0].float_state_arr[4])<>0
afc.c: +158 input[0].x_arr[8]>=50.000000
afc.c: -160 0=0
afc.c: -160b 1<>0
afc.c: +161 1<>0
afc.c: +162 1<>0
afc.c: +162b 1<>0
afc.c: -182 1<>0
afc.c: +191 1<>0
afc.c: -205 ((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))/12.500000)=<1.660000
afc.c: -207 ((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))/12.500000)>=0.130000

Simplified Path Predicate for case 78:
input[0].x_arr[10]>-1.000000 AND
((unsigned char)input[0].float_state_arr[3])=0 AND
(input[0].float_state_arr[0]+0.010000)>=10.000000 AND
((unsigned char)input[0].float_state_arr[4])<>0 AND
input[0].x_arr[8]>=50.000000 AND
((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))/12.500000)=<1.660000 AND
((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))/12.500000)>=0.130000

Output Values for case 78: (Symbolic,Concrete)
return value = 0, 0
ret_val[0].float_state_arr[0] = (input[0].float_state_arr[0]+0.010000), 769.000000
ret_val[0].float_state_arr[1] = input[0].float_state_arr[1], -78.000000
ret_val[0].float_state_arr[2] = (input[0].float_state_arr[2]+(((input[0].x_arr[9]+-((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))))*0.413280)*0.010000)), -95.000000
ret_val[0].float_state_arr[3] = 0.000000, 0.000000
ret_val[0].float_state_arr[4] = 1.000000, 1.000000
ret_val[0].float_state_arr[5] = 1.000000, 1.000000
ret_val[0].float_state_arr[6] = input[0].float_state_arr[6], -73.000000
ret_val[0].output_arr[0] = ((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))/12.500000), 1.280000
ret_val[0].output_arr[1] = 1.000000, 1.000000
ret_val[0].output_arr[2] = 12.500000, 12.500000

to explore negation deepest unexplored condition of predicate,
Path Predicate Prefix to solve :
afc.c: -140 input[0].x_arr[10]>-1.000000
afc.c: -142 ((unsigned char)input[0].float_state_arr[3])=0
afc.c: +146 (input[0].float_state_arr[0]+0.010000)>=10.000000
afc.c: +151 ((unsigned char)input[0].float_state_arr[4])<>0
afc.c: +158 input[0].x_arr[8]>=50.000000
afc.c: -160 0=0
afc.c: -160b 1<>0
afc.c: +161 1<>0
afc.c: +162 1<>0
afc.c: +162b 1<>0
afc.c: -182 1<>0
afc.c: -191 1=0
Path Prefix to cover :
afc.c
-140 -142 +146 +151 +158 -160 -160b +161 +162 +162b -182 -191
trivially infeasible

to explore negation deepest unexplored condition of predicate,
Path Predicate Prefix to solve :
afc.c: -140 input[0].x_arr[10]>-1.000000
afc.c: -142 ((unsigned char)input[0].float_state_arr[3])=0
afc.c: +146 (input[0].float_state_arr[0]+0.010000)>=10.000000
afc.c: +151 ((unsigned char)input[0].float_state_arr[4])<>0
afc.c: +158 input[0].x_arr[8]>=50.000000
afc.c: -160 0=0
afc.c: -160b 1<>0
afc.c: +161 1<>0
afc.c: +162 1<>0
afc.c: +162b 1<>0
afc.c: +182 1=0
Path Prefix to cover :
afc.c
-140 -142 +146 +151 +158 -160 -160b +161 +162 +162b +182
trivially infeasible

to explore negation deepest unexplored condition of predicate,
Path Predicate Prefix to solve :
afc.c: -140 input[0].x_arr[10]>-1.000000
afc.c: -142 ((unsigned char)input[0].float_state_arr[3])=0
afc.c: +146 (input[0].float_state_arr[0]+0.010000)>=10.000000
afc.c: +151 ((unsigned char)input[0].float_state_arr[4])<>0
afc.c: +158 input[0].x_arr[8]>=50.000000
afc.c: -160 0=0
afc.c: -160b 1<>0
afc.c: +161 1<>0
afc.c: +162 1<>0
afc.c: -162b 1=0
Path Prefix to cover :
afc.c
-140 -142 +146 +151 +158 -160 -160b +161 +162 -162b
trivially infeasible

to explore negation deepest unexplored condition of predicate,
Path Predicate Prefix to solve :
afc.c: -140 input[0].x_arr[10]>-1.000000
afc.c: -142 ((unsigned char)input[0].float_state_arr[3])=0
afc.c: +146 (input[0].float_state_arr[0]+0.010000)>=10.000000
afc.c: +151 ((unsigned char)input[0].float_state_arr[4])<>0
afc.c: +158 input[0].x_arr[8]>=50.000000
afc.c: -160 0=0
afc.c: -160b 1<>0
afc.c: +161 1<>0
afc.c: -162 1=0
Path Prefix to cover :
afc.c
-140 -142 +146 +151 +158 -160 -160b +161 -162
trivially infeasible

to explore negation deepest unexplored condition of predicate,
Path Predicate Prefix to solve :
afc.c: -140 input[0].x_arr[10]>-1.000000
afc.c: -142 ((unsigned char)input[0].float_state_arr[3])=0
afc.c: +146 (input[0].float_state_arr[0]+0.010000)>=10.000000
afc.c: +151 ((unsigned char)input[0].float_state_arr[4])<>0
afc.c: +158 input[0].x_arr[8]>=50.000000
afc.c: -160 0=0
afc.c: -160b 1<>0
afc.c: -161 1=0
Path Prefix to cover :
afc.c
-140 -142 +146 +151 +158 -160 -160b -161
trivially infeasible

to explore negation deepest unexplored condition of predicate,
Path Predicate Prefix to solve :
afc.c: -140 input[0].x_arr[10]>-1.000000
afc.c: -142 ((unsigned char)input[0].float_state_arr[3])=0
afc.c: +146 (input[0].float_state_arr[0]+0.010000)>=10.000000
afc.c: +151 ((unsigned char)input[0].float_state_arr[4])<>0
afc.c: +158 input[0].x_arr[8]>=50.000000
afc.c: -160 0=0
afc.c: +160b 1=0
Path Prefix to cover :
afc.c
-140 -142 +146 +151 +158 -160 +160b
trivially infeasible

to explore negation deepest unexplored condition of predicate,
Path Predicate Prefix to solve :
afc.c: -140 input[0].x_arr[10]>-1.000000
afc.c: -142 ((unsigned char)input[0].float_state_arr[3])=0
afc.c: +146 (input[0].float_state_arr[0]+0.010000)>=10.000000
afc.c: +151 ((unsigned char)input[0].float_state_arr[4])<>0
afc.c: +158 input[0].x_arr[8]>=50.000000
afc.c: +160 0<>0
Path Prefix to cover :
afc.c
-140 -142 +146 +151 +158 +160
trivially infeasible

to explore negation deepest unexplored condition of predicate,
Path Predicate Prefix to solve :
afc.c: -140 input[0].x_arr[10]>-1.000000
afc.c: -142 ((unsigned char)input[0].float_state_arr[3])=0
afc.c: +146 (input[0].float_state_arr[0]+0.010000)>=10.000000
afc.c: -151 ((unsigned char)input[0].float_state_arr[4])=0
Path Prefix to cover :
afc.c
-140 -142 +146 -151


TEST CASE 79

Dimensions:
input__controller = 1;
input__controller[0].input_arr = 1;
input__controller[0].int_state_arr = 0;
input__controller[0].float_state_arr = 7;
input__controller[0].x_arr = 13;
ret_val__controller = 1;
ret_val__controller[0].int_state_arr = 0;
ret_val__controller[0].float_state_arr = 7;
ret_val__controller[0].output_arr = 3;

Other input values:
input__controller[0].input_arr[0] = -423.000000;
input__controller[0].float_state_arr[0] = 768.990000;
input__controller[0].float_state_arr[1] = -78.000000;
input__controller[0].float_state_arr[2] = -292.000000;
input__controller[0].float_state_arr[3] = -0.400000;
input__controller[0].float_state_arr[4] = 0.600000;
input__controller[0].float_state_arr[5] = -384.000000;
input__controller[0].float_state_arr[6] = -73.000000;
input__controller[0].x_arr[0] = -493.000000;
input__controller[0].x_arr[1] = 170.000000;
input__controller[0].x_arr[2] = -8.000000;
input__controller[0].x_arr[3] = -463.000000;
input__controller[0].x_arr[4] = -387.000000;
input__controller[0].x_arr[5] = -245.000000;
input__controller[0].x_arr[6] = 150.000000;
input__controller[0].x_arr[7] = -475.000000;
input__controller[0].x_arr[8] = -478.000000;
input__controller[0].x_arr[9] = -156.000000;
input__controller[0].x_arr[10] = 417.000000;
input__controller[0].x_arr[11] = 173.000000;
input__controller[0].x_arr[12] = -343.000000;
ret_val__controller[0].float_state_arr[0] = 397.000000;
ret_val__controller[0].float_state_arr[1] = -241.000000;
ret_val__controller[0].float_state_arr[2] = -268.000000;
ret_val__controller[0].float_state_arr[3] = -365.000000;
ret_val__controller[0].float_state_arr[4] = -94.000000;
ret_val__controller[0].float_state_arr[5] = -68.000000;
ret_val__controller[0].float_state_arr[6] = -139.000000;
ret_val__controller[0].output_arr[0] = 438.000000;
ret_val__controller[0].output_arr[1] = -491.000000;
ret_val__controller[0].output_arr[2] = -16.000000;

Result:
unknown

Path Covered :
afc.c
-140 -142 +146 -151 -158 -160 -160b -161 +162 -162b +182 -191 -195 +197 -205 +207


Path Predicate for case 79:
afc.c: -140 input[0].x_arr[10]>-1.000000
afc.c: -142 ((unsigned char)input[0].float_state_arr[3])=0
afc.c: +146 (input[0].float_state_arr[0]+0.010000)>=10.000000
afc.c: -151 ((unsigned char)input[0].float_state_arr[4])=0
afc.c: -158 input[0].x_arr[8]<70.000000
afc.c: -160 0=0
afc.c: -160b 1<>0
afc.c: -161 0=0
afc.c: +162 1<>0
afc.c: -162b 0=0
afc.c: +182 0=0
afc.c: -191 0=0
afc.c: -195 (1.000000+((0.040000*(input[0].x_arr[10]+-14.700000))+(((0.140000*(input[0].x_arr[10]+-14.700000))*0.010000)+input[0].float_state_arr[1])))=<100.000000
afc.c: +197 (1.000000+((0.040000*(input[0].x_arr[10]+-14.700000))+(((0.140000*(input[0].x_arr[10]+-14.700000))*0.010000)+input[0].float_state_arr[1])))<0.000000
afc.c: -205 0.000000=<1.660000
afc.c: +207 0.000000<0.130000

Simplified Path Predicate for case 79:
input[0].x_arr[10]>-1.000000 AND
((unsigned char)input[0].float_state_arr[3])=0 AND
(input[0].float_state_arr[0]+0.010000)>=10.000000 AND
((unsigned char)input[0].float_state_arr[4])=0 AND
input[0].x_arr[8]<70.000000 AND
(1.000000+((0.040000*(input[0].x_arr[10]+-14.700000))+(((0.140000*(input[0].x_arr[10]+-14.700000))*0.010000)+input[0].float_state_arr[1])))=<100.000000 AND
(1.000000+((0.040000*(input[0].x_arr[10]+-14.700000))+(((0.140000*(input[0].x_arr[10]+-14.700000))*0.010000)+input[0].float_state_arr[1])))<0.000000

Output Values for case 79: (Symbolic,Concrete)
return value = 0, 0
ret_val[0].float_state_arr[0] = (input[0].float_state_arr[0]+0.010000), 769.000000
ret_val[0].float_state_arr[1] = (((0.140000*(input[0].x_arr[10]+-14.700000))*0.010000)+input[0].float_state_arr[1]), -77.436780
ret_val[0].float_state_arr[2] = (input[0].float_state_arr[2]+(((input[0].x_arr[9]+-((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))))*0.413280)*0.010000)), -5957.592441
ret_val[0].float_state_arr[3] = 0.000000, 0.000000
ret_val[0].float_state_arr[4] = 0.000000, 0.000000
ret_val[0].float_state_arr[5] = 1.000000, 1.000000
ret_val[0].float_state_arr[6] = ((0.040000*(input[0].x_arr[10]+-14.700000))+(((0.140000*(input[0].x_arr[10]+-14.700000))*0.010000)+input[0].float_state_arr[1])), -61.344780
ret_val[0].output_arr[0] = 0.130000, 0.130000
ret_val[0].output_arr[1] = 0.000000, 0.000000
ret_val[0].output_arr[2] = 14.700000, 14.700000

to explore negation deepest unexplored condition of predicate,
Path Predicate Prefix to solve :
afc.c: -140 input[0].x_arr[10]>-1.000000
afc.c: -142 ((unsigned char)input[0].float_state_arr[3])=0
afc.c: +146 (input[0].float_state_arr[0]+0.010000)>=10.000000
afc.c: -151 ((unsigned char)input[0].float_state_arr[4])=0
afc.c: -158 input[0].x_arr[8]<70.000000
afc.c: -160 0=0
afc.c: -160b 1<>0
afc.c: -161 0=0
afc.c: +162 1<>0
afc.c: -162b 0=0
afc.c: +182 0=0
afc.c: -191 0=0
afc.c: -195 (1.000000+((0.040000*(input[0].x_arr[10]+-14.700000))+(((0.140000*(input[0].x_arr[10]+-14.700000))*0.010000)+input[0].float_state_arr[1])))=<100.000000
afc.c: +197 (1.000000+((0.040000*(input[0].x_arr[10]+-14.700000))+(((0.140000*(input[0].x_arr[10]+-14.700000))*0.010000)+input[0].float_state_arr[1])))<0.000000
afc.c: -205 0.000000=<1.660000
afc.c: -207 0.000000>=0.130000
Path Prefix to cover :
afc.c
-140 -142 +146 -151 -158 -160 -160b -161 +162 -162b +182 -191 -195 +197 -205 -207
trivially infeasible

to explore negation deepest unexplored condition of predicate,
Path Predicate Prefix to solve :
afc.c: -140 input[0].x_arr[10]>-1.000000
afc.c: -142 ((unsigned char)input[0].float_state_arr[3])=0
afc.c: +146 (input[0].float_state_arr[0]+0.010000)>=10.000000
afc.c: -151 ((unsigned char)input[0].float_state_arr[4])=0
afc.c: -158 input[0].x_arr[8]<70.000000
afc.c: -160 0=0
afc.c: -160b 1<>0
afc.c: -161 0=0
afc.c: +162 1<>0
afc.c: -162b 0=0
afc.c: +182 0=0
afc.c: -191 0=0
afc.c: -195 (1.000000+((0.040000*(input[0].x_arr[10]+-14.700000))+(((0.140000*(input[0].x_arr[10]+-14.700000))*0.010000)+input[0].float_state_arr[1])))=<100.000000
afc.c: +197 (1.000000+((0.040000*(input[0].x_arr[10]+-14.700000))+(((0.140000*(input[0].x_arr[10]+-14.700000))*0.010000)+input[0].float_state_arr[1])))<0.000000
afc.c: +205 0.000000>1.660000
Path Prefix to cover :
afc.c
-140 -142 +146 -151 -158 -160 -160b -161 +162 -162b +182 -191 -195 +197 +205
trivially infeasible

to explore negation deepest unexplored condition of predicate,
Path Predicate Prefix to solve :
afc.c: -140 input[0].x_arr[10]>-1.000000
afc.c: -142 ((unsigned char)input[0].float_state_arr[3])=0
afc.c: +146 (input[0].float_state_arr[0]+0.010000)>=10.000000
afc.c: -151 ((unsigned char)input[0].float_state_arr[4])=0
afc.c: -158 input[0].x_arr[8]<70.000000
afc.c: -160 0=0
afc.c: -160b 1<>0
afc.c: -161 0=0
afc.c: +162 1<>0
afc.c: -162b 0=0
afc.c: +182 0=0
afc.c: -191 0=0
afc.c: -195 (1.000000+((0.040000*(input[0].x_arr[10]+-14.700000))+(((0.140000*(input[0].x_arr[10]+-14.700000))*0.010000)+input[0].float_state_arr[1])))=<100.000000
afc.c: -197 (1.000000+((0.040000*(input[0].x_arr[10]+-14.700000))+(((0.140000*(input[0].x_arr[10]+-14.700000))*0.010000)+input[0].float_state_arr[1])))>=0.000000
Path Prefix to cover :
afc.c
-140 -142 +146 -151 -158 -160 -160b -161 +162 -162b +182 -191 -195 -197


TEST CASE 80

Dimensions:
input__controller = 1;
input__controller[0].input_arr = 1;
input__controller[0].int_state_arr = 0;
input__controller[0].float_state_arr = 7;
input__controller[0].x_arr = 13;
ret_val__controller = 1;
ret_val__controller[0].int_state_arr = 0;
ret_val__controller[0].float_state_arr = 7;
ret_val__controller[0].output_arr = 3;

Other input values:
input__controller[0].input_arr[0] = -423.000000;
input__controller[0].float_state_arr[0] = 768.990000;
input__controller[0].float_state_arr[1] = 31.000000;
input__controller[0].float_state_arr[2] = -292.000000;
input__controller[0].float_state_arr[3] = -0.400000;
input__controller[0].float_state_arr[4] = 0.600000;
input__controller[0].float_state_arr[5] = -384.000000;
input__controller[0].float_state_arr[6] = -73.000000;
input__controller[0].x_arr[0] = -493.000000;
input__controller[0].x_arr[1] = 170.000000;
input__controller[0].x_arr[2] = -8.000000;
input__controller[0].x_arr[3] = -463.000000;
input__controller[0].x_arr[4] = -387.000000;
input__controller[0].x_arr[5] = -245.000000;
input__controller[0].x_arr[6] = 150.000000;
input__controller[0].x_arr[7] = -475.000000;
input__controller[0].x_arr[8] = -478.000000;
input__controller[0].x_arr[9] = -156.000000;
input__controller[0].x_arr[10] = 14.700000;
input__controller[0].x_arr[11] = 173.000000;
input__controller[0].x_arr[12] = -343.000000;
ret_val__controller[0].float_state_arr[0] = 397.000000;
ret_val__controller[0].float_state_arr[1] = -241.000000;
ret_val__controller[0].float_state_arr[2] = -268.000000;
ret_val__controller[0].float_state_arr[3] = -365.000000;
ret_val__controller[0].float_state_arr[4] = -94.000000;
ret_val__controller[0].float_state_arr[5] = -68.000000;
ret_val__controller[0].float_state_arr[6] = -139.000000;
ret_val__controller[0].output_arr[0] = 438.000000;
ret_val__controller[0].output_arr[1] = -491.000000;
ret_val__controller[0].output_arr[2] = -16.000000;

Result:
unknown

Path Covered :
afc.c
-140 -142 +146 -151 -158 -160 -160b -161 +162 -162b +182 -191 -195 -197 +205


Path Predicate for case 80:
afc.c: -140 input[0].x_arr[10]>-1.000000
afc.c: -142 ((unsigned char)input[0].float_state_arr[3])=0
afc.c: +146 (input[0].float_state_arr[0]+0.010000)>=10.000000
afc.c: -151 ((unsigned char)input[0].float_state_arr[4])=0
afc.c: -158 input[0].x_arr[8]<70.000000
afc.c: -160 0=0
afc.c: -160b 1<>0
afc.c: -161 0=0
afc.c: +162 1<>0
afc.c: -162b 0=0
afc.c: +182 0=0
afc.c: -191 0=0
afc.c: -195 (1.000000+((0.040000*(input[0].x_arr[10]+-14.700000))+(((0.140000*(input[0].x_arr[10]+-14.700000))*0.010000)+input[0].float_state_arr[1])))=<100.000000
afc.c: -197 (1.000000+((0.040000*(input[0].x_arr[10]+-14.700000))+(((0.140000*(input[0].x_arr[10]+-14.700000))*0.010000)+input[0].float_state_arr[1])))>=0.000000
afc.c: +205 (((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))/14.700000)*(1.000000+((0.040000*(input[0].x_arr[10]+-14.700000))+(((0.140000*(input[0].x_arr[10]+-14.700000))*0.010000)+input[0].float_state_arr[1]))))>1.660000

Simplified Path Predicate for case 80:
input[0].x_arr[10]>-1.000000 AND
((unsigned char)input[0].float_state_arr[3])=0 AND
(input[0].float_state_arr[0]+0.010000)>=10.000000 AND
((unsigned char)input[0].float_state_arr[4])=0 AND
input[0].x_arr[8]<70.000000 AND
(1.000000+((0.040000*(input[0].x_arr[10]+-14.700000))+(((0.140000*(input[0].x_arr[10]+-14.700000))*0.010000)+input[0].float_state_arr[1])))=<100.000000 AND
(1.000000+((0.040000*(input[0].x_arr[10]+-14.700000))+(((0.140000*(input[0].x_arr[10]+-14.700000))*0.010000)+input[0].float_state_arr[1])))>=0.000000 AND
(((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))/14.700000)*(1.000000+((0.040000*(input[0].x_arr[10]+-14.700000))+(((0.140000*(input[0].x_arr[10]+-14.700000))*0.010000)+input[0].float_state_arr[1]))))>1.660000

Output Values for case 80: (Symbolic,Concrete)
return value = 0, 0
ret_val[0].float_state_arr[0] = (input[0].float_state_arr[0]+0.010000), 769.000000
ret_val[0].float_state_arr[1] = (((0.140000*(input[0].x_arr[10]+-14.700000))*0.010000)+input[0].float_state_arr[1]), 31.000000
ret_val[0].float_state_arr[2] = (input[0].float_state_arr[2]+(((input[0].x_arr[9]+-((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))))*0.413280)*0.010000)), -5957.592441
ret_val[0].float_state_arr[3] = 0.000000, 0.000000
ret_val[0].float_state_arr[4] = 0.000000, 0.000000
ret_val[0].float_state_arr[5] = 1.000000, 1.000000
ret_val[0].float_state_arr[6] = ((0.040000*(input[0].x_arr[10]+-14.700000))+(((0.140000*(input[0].x_arr[10]+-14.700000))*0.010000)+input[0].float_state_arr[1])), 31.000000
ret_val[0].output_arr[0] = 1.660000, 1.660000
ret_val[0].output_arr[1] = 0.000000, 0.000000
ret_val[0].output_arr[2] = 14.700000, 14.700000

to explore negation deepest unexplored condition of predicate,
Path Predicate Prefix to solve :
afc.c: -140 input[0].x_arr[10]>-1.000000
afc.c: -142 ((unsigned char)input[0].float_state_arr[3])=0
afc.c: +146 (input[0].float_state_arr[0]+0.010000)>=10.000000
afc.c: -151 ((unsigned char)input[0].float_state_arr[4])=0
afc.c: -158 input[0].x_arr[8]<70.000000
afc.c: -160 0=0
afc.c: -160b 1<>0
afc.c: -161 0=0
afc.c: +162 1<>0
afc.c: -162b 0=0
afc.c: +182 0=0
afc.c: -191 0=0
afc.c: -195 (1.000000+((0.040000*(input[0].x_arr[10]+-14.700000))+(((0.140000*(input[0].x_arr[10]+-14.700000))*0.010000)+input[0].float_state_arr[1])))=<100.000000
afc.c: -197 (1.000000+((0.040000*(input[0].x_arr[10]+-14.700000))+(((0.140000*(input[0].x_arr[10]+-14.700000))*0.010000)+input[0].float_state_arr[1])))>=0.000000
afc.c: -205 (((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))/14.700000)*(1.000000+((0.040000*(input[0].x_arr[10]+-14.700000))+(((0.140000*(input[0].x_arr[10]+-14.700000))*0.010000)+input[0].float_state_arr[1]))))=<1.660000
Path Prefix to cover :
afc.c
-140 -142 +146 -151 -158 -160 -160b -161 +162 -162b +182 -191 -195 -197 -205


TEST CASE 81

Dimensions:
input__controller = 1;
input__controller[0].input_arr = 1;
input__controller[0].int_state_arr = 0;
input__controller[0].float_state_arr = 7;
input__controller[0].x_arr = 13;
ret_val__controller = 1;
ret_val__controller[0].int_state_arr = 0;
ret_val__controller[0].float_state_arr = 7;
ret_val__controller[0].output_arr = 3;

Other input values:
input__controller[0].input_arr[0] = -423.000000;
input__controller[0].float_state_arr[0] = 768.990000;
input__controller[0].float_state_arr[1] = -1.000000;
input__controller[0].float_state_arr[2] = -103.000000;
input__controller[0].float_state_arr[3] = -0.400000;
input__controller[0].float_state_arr[4] = 0.600000;
input__controller[0].float_state_arr[5] = -384.000000;
input__controller[0].float_state_arr[6] = -73.000000;
input__controller[0].x_arr[0] = -493.000000;
input__controller[0].x_arr[1] = 170.000000;
input__controller[0].x_arr[2] = -8.000000;
input__controller[0].x_arr[3] = -463.000000;
input__controller[0].x_arr[4] = -387.000000;
input__controller[0].x_arr[5] = -245.000000;
input__controller[0].x_arr[6] = 150.000000;
input__controller[0].x_arr[7] = -0.000000;
input__controller[0].x_arr[8] = -478.000000;
input__controller[0].x_arr[9] = -0.366000;
input__controller[0].x_arr[10] = 14.700000;
input__controller[0].x_arr[11] = 173.000000;
input__controller[0].x_arr[12] = -343.000000;
ret_val__controller[0].float_state_arr[0] = 397.000000;
ret_val__controller[0].float_state_arr[1] = -241.000000;
ret_val__controller[0].float_state_arr[2] = -268.000000;
ret_val__controller[0].float_state_arr[3] = -365.000000;
ret_val__controller[0].float_state_arr[4] = -94.000000;
ret_val__controller[0].float_state_arr[5] = -68.000000;
ret_val__controller[0].float_state_arr[6] = -139.000000;
ret_val__controller[0].output_arr[0] = 438.000000;
ret_val__controller[0].output_arr[1] = -491.000000;
ret_val__controller[0].output_arr[2] = -16.000000;

Result:
unknown

Path Covered :
afc.c
-140 -142 +146 -151 -158 -160 -160b -161 +162 -162b +182 -191 -195 -197 -205 +207


Path Predicate for case 81:
afc.c: -140 input[0].x_arr[10]>-1.000000
afc.c: -142 ((unsigned char)input[0].float_state_arr[3])=0
afc.c: +146 (input[0].float_state_arr[0]+0.010000)>=10.000000
afc.c: -151 ((unsigned char)input[0].float_state_arr[4])=0
afc.c: -158 input[0].x_arr[8]<70.000000
afc.c: -160 0=0
afc.c: -160b 1<>0
afc.c: -161 0=0
afc.c: +162 1<>0
afc.c: -162b 0=0
afc.c: +182 0=0
afc.c: -191 0=0
afc.c: -195 (1.000000+((0.040000*(input[0].x_arr[10]+-14.700000))+(((0.140000*(input[0].x_arr[10]+-14.700000))*0.010000)+input[0].float_state_arr[1])))=<100.000000
afc.c: -197 (1.000000+((0.040000*(input[0].x_arr[10]+-14.700000))+(((0.140000*(input[0].x_arr[10]+-14.700000))*0.010000)+input[0].float_state_arr[1])))>=0.000000
afc.c: -205 (((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))/14.700000)*(1.000000+((0.040000*(input[0].x_arr[10]+-14.700000))+(((0.140000*(input[0].x_arr[10]+-14.700000))*0.010000)+input[0].float_state_arr[1]))))=<1.660000
afc.c: +207 (((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))/14.700000)*(1.000000+((0.040000*(input[0].x_arr[10]+-14.700000))+(((0.140000*(input[0].x_arr[10]+-14.700000))*0.010000)+input[0].float_state_arr[1]))))<0.130000

Simplified Path Predicate for case 81:
input[0].x_arr[10]>-1.000000 AND
((unsigned char)input[0].float_state_arr[3])=0 AND
(input[0].float_state_arr[0]+0.010000)>=10.000000 AND
((unsigned char)input[0].float_state_arr[4])=0 AND
input[0].x_arr[8]<70.000000 AND
(1.000000+((0.040000*(input[0].x_arr[10]+-14.700000))+(((0.140000*(input[0].x_arr[10]+-14.700000))*0.010000)+input[0].float_state_arr[1])))=<100.000000 AND
(1.000000+((0.040000*(input[0].x_arr[10]+-14.700000))+(((0.140000*(input[0].x_arr[10]+-14.700000))*0.010000)+input[0].float_state_arr[1])))>=0.000000 AND
(((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))/14.700000)*(1.000000+((0.040000*(input[0].x_arr[10]+-14.700000))+(((0.140000*(input[0].x_arr[10]+-14.700000))*0.010000)+input[0].float_state_arr[1]))))=<1.660000 AND
(((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))/14.700000)*(1.000000+((0.040000*(input[0].x_arr[10]+-14.700000))+(((0.140000*(input[0].x_arr[10]+-14.700000))*0.010000)+input[0].float_state_arr[1]))))<0.130000

Output Values for case 81: (Symbolic,Concrete)
return value = 0, 0
ret_val[0].float_state_arr[0] = (input[0].float_state_arr[0]+0.010000), 769.000000
ret_val[0].float_state_arr[1] = (((0.140000*(input[0].x_arr[10]+-14.700000))*0.010000)+input[0].float_state_arr[1]), -1.000000
ret_val[0].float_state_arr[2] = (input[0].float_state_arr[2]+(((input[0].x_arr[9]+-((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))))*0.413280)*0.010000)), -103.000000
ret_val[0].float_state_arr[3] = 0.000000, 0.000000
ret_val[0].float_state_arr[4] = 0.000000, 0.000000
ret_val[0].float_state_arr[5] = 1.000000, 1.000000
ret_val[0].float_state_arr[6] = ((0.040000*(input[0].x_arr[10]+-14.700000))+(((0.140000*(input[0].x_arr[10]+-14.700000))*0.010000)+input[0].float_state_arr[1])), -1.000000
ret_val[0].output_arr[0] = 0.130000, 0.130000
ret_val[0].output_arr[1] = 0.000000, 0.000000
ret_val[0].output_arr[2] = 14.700000, 14.700000

to explore negation deepest unexplored condition of predicate,
Path Predicate Prefix to solve :
afc.c: -140 input[0].x_arr[10]>-1.000000
afc.c: -142 ((unsigned char)input[0].float_state_arr[3])=0
afc.c: +146 (input[0].float_state_arr[0]+0.010000)>=10.000000
afc.c: -151 ((unsigned char)input[0].float_state_arr[4])=0
afc.c: -158 input[0].x_arr[8]<70.000000
afc.c: -160 0=0
afc.c: -160b 1<>0
afc.c: -161 0=0
afc.c: +162 1<>0
afc.c: -162b 0=0
afc.c: +182 0=0
afc.c: -191 0=0
afc.c: -195 (1.000000+((0.040000*(input[0].x_arr[10]+-14.700000))+(((0.140000*(input[0].x_arr[10]+-14.700000))*0.010000)+input[0].float_state_arr[1])))=<100.000000
afc.c: -197 (1.000000+((0.040000*(input[0].x_arr[10]+-14.700000))+(((0.140000*(input[0].x_arr[10]+-14.700000))*0.010000)+input[0].float_state_arr[1])))>=0.000000
afc.c: -205 (((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))/14.700000)*(1.000000+((0.040000*(input[0].x_arr[10]+-14.700000))+(((0.140000*(input[0].x_arr[10]+-14.700000))*0.010000)+input[0].float_state_arr[1]))))=<1.660000
afc.c: -207 (((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))/14.700000)*(1.000000+((0.040000*(input[0].x_arr[10]+-14.700000))+(((0.140000*(input[0].x_arr[10]+-14.700000))*0.010000)+input[0].float_state_arr[1]))))>=0.130000
Path Prefix to cover :
afc.c
-140 -142 +146 -151 -158 -160 -160b -161 +162 -162b +182 -191 -195 -197 -205 -207


TEST CASE 82

Dimensions:
input__controller = 1;
input__controller[0].input_arr = 1;
input__controller[0].int_state_arr = 0;
input__controller[0].float_state_arr = 7;
input__controller[0].x_arr = 13;
ret_val__controller = 1;
ret_val__controller[0].int_state_arr = 0;
ret_val__controller[0].float_state_arr = 7;
ret_val__controller[0].output_arr = 3;

Other input values:
input__controller[0].input_arr[0] = -423.000000;
input__controller[0].float_state_arr[0] = 768.990000;
input__controller[0].float_state_arr[1] = -0.976500;
input__controller[0].float_state_arr[2] = -26.000000;
input__controller[0].float_state_arr[3] = -0.400000;
input__controller[0].float_state_arr[4] = 0.600000;
input__controller[0].float_state_arr[5] = -384.000000;
input__controller[0].float_state_arr[6] = -73.000000;
input__controller[0].x_arr[0] = -493.000000;
input__controller[0].x_arr[1] = 170.000000;
input__controller[0].x_arr[2] = -8.000000;
input__controller[0].x_arr[3] = -463.000000;
input__controller[0].x_arr[4] = -387.000000;
input__controller[0].x_arr[5] = -245.000000;
input__controller[0].x_arr[6] = 150.000000;
input__controller[0].x_arr[7] = -35.340920;
input__controller[0].x_arr[8] = -478.000000;
input__controller[0].x_arr[9] = 884.000000;
input__controller[0].x_arr[10] = 14.700000;
input__controller[0].x_arr[11] = 173.000000;
input__controller[0].x_arr[12] = -343.000000;
ret_val__controller[0].float_state_arr[0] = 397.000000;
ret_val__controller[0].float_state_arr[1] = -241.000000;
ret_val__controller[0].float_state_arr[2] = -268.000000;
ret_val__controller[0].float_state_arr[3] = -365.000000;
ret_val__controller[0].float_state_arr[4] = -94.000000;
ret_val__controller[0].float_state_arr[5] = -68.000000;
ret_val__controller[0].float_state_arr[6] = -139.000000;
ret_val__controller[0].output_arr[0] = 438.000000;
ret_val__controller[0].output_arr[1] = -491.000000;
ret_val__controller[0].output_arr[2] = -16.000000;

Result:
unknown

Path Covered :
afc.c
-140 -142 +146 -151 -158 -160 -160b -161 +162 -162b +182 -191 -195 -197 -205 -207


Path Predicate for case 82:
afc.c: -140 input[0].x_arr[10]>-1.000000
afc.c: -142 ((unsigned char)input[0].float_state_arr[3])=0
afc.c: +146 (input[0].float_state_arr[0]+0.010000)>=10.000000
afc.c: -151 ((unsigned char)input[0].float_state_arr[4])=0
afc.c: -158 input[0].x_arr[8]<70.000000
afc.c: -160 0=0
afc.c: -160b 1<>0
afc.c: -161 0=0
afc.c: +162 1<>0
afc.c: -162b 0=0
afc.c: +182 0=0
afc.c: -191 0=0
afc.c: -195 (1.000000+((0.040000*(input[0].x_arr[10]+-14.700000))+(((0.140000*(input[0].x_arr[10]+-14.700000))*0.010000)+input[0].float_state_arr[1])))=<100.000000
afc.c: -197 (1.000000+((0.040000*(input[0].x_arr[10]+-14.700000))+(((0.140000*(input[0].x_arr[10]+-14.700000))*0.010000)+input[0].float_state_arr[1])))>=0.000000
afc.c: -205 (((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))/14.700000)*(1.000000+((0.040000*(input[0].x_arr[10]+-14.700000))+(((0.140000*(input[0].x_arr[10]+-14.700000))*0.010000)+input[0].float_state_arr[1]))))=<1.660000
afc.c: -207 (((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))/14.700000)*(1.000000+((0.040000*(input[0].x_arr[10]+-14.700000))+(((0.140000*(input[0].x_arr[10]+-14.700000))*0.010000)+input[0].float_state_arr[1]))))>=0.130000

Simplified Path Predicate for case 82:
input[0].x_arr[10]>-1.000000 AND
((unsigned char)input[0].float_state_arr[3])=0 AND
(input[0].float_state_arr[0]+0.010000)>=10.000000 AND
((unsigned char)input[0].float_state_arr[4])=0 AND
input[0].x_arr[8]<70.000000 AND
(1.000000+((0.040000*(input[0].x_arr[10]+-14.700000))+(((0.140000*(input[0].x_arr[10]+-14.700000))*0.010000)+input[0].float_state_arr[1])))=<100.000000 AND
(1.000000+((0.040000*(input[0].x_arr[10]+-14.700000))+(((0.140000*(input[0].x_arr[10]+-14.700000))*0.010000)+input[0].float_state_arr[1])))>=0.000000 AND
(((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))/14.700000)*(1.000000+((0.040000*(input[0].x_arr[10]+-14.700000))+(((0.140000*(input[0].x_arr[10]+-14.700000))*0.010000)+input[0].float_state_arr[1]))))=<1.660000 AND
(((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))/14.700000)*(1.000000+((0.040000*(input[0].x_arr[10]+-14.700000))+(((0.140000*(input[0].x_arr[10]+-14.700000))*0.010000)+input[0].float_state_arr[1]))))>=0.130000

Output Values for case 82: (Symbolic,Concrete)
return value = 0, 0
ret_val[0].float_state_arr[0] = (input[0].float_state_arr[0]+0.010000), 769.000000
ret_val[0].float_state_arr[1] = (((0.140000*(input[0].x_arr[10]+-14.700000))*0.010000)+input[0].float_state_arr[1]), -0.976500
ret_val[0].float_state_arr[2] = (input[0].float_state_arr[2]+(((input[0].x_arr[9]+-((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))))*0.413280)*0.010000)), -26.000000
ret_val[0].float_state_arr[3] = 0.000000, 0.000000
ret_val[0].float_state_arr[4] = 0.000000, 0.000000
ret_val[0].float_state_arr[5] = 1.000000, 1.000000
ret_val[0].float_state_arr[6] = ((0.040000*(input[0].x_arr[10]+-14.700000))+(((0.140000*(input[0].x_arr[10]+-14.700000))*0.010000)+input[0].float_state_arr[1])), -0.976500
ret_val[0].output_arr[0] = (((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))/14.700000)*(1.000000+((0.040000*(input[0].x_arr[10]+-14.700000))+(((0.140000*(input[0].x_arr[10]+-14.700000))*0.010000)+input[0].float_state_arr[1])))), 1.413185
ret_val[0].output_arr[1] = 0.000000, 0.000000
ret_val[0].output_arr[2] = 14.700000, 14.700000

to explore negation deepest unexplored condition of predicate,
Path Predicate Prefix to solve :
afc.c: -140 input[0].x_arr[10]>-1.000000
afc.c: -142 ((unsigned char)input[0].float_state_arr[3])=0
afc.c: +146 (input[0].float_state_arr[0]+0.010000)>=10.000000
afc.c: -151 ((unsigned char)input[0].float_state_arr[4])=0
afc.c: -158 input[0].x_arr[8]<70.000000
afc.c: -160 0=0
afc.c: -160b 1<>0
afc.c: -161 0=0
afc.c: +162 1<>0
afc.c: -162b 0=0
afc.c: +182 0=0
afc.c: -191 0=0
afc.c: +195 (1.000000+((0.040000*(input[0].x_arr[10]+-14.700000))+(((0.140000*(input[0].x_arr[10]+-14.700000))*0.010000)+input[0].float_state_arr[1])))>100.000000
Path Prefix to cover :
afc.c
-140 -142 +146 -151 -158 -160 -160b -161 +162 -162b +182 -191 +195


TEST CASE 83

Dimensions:
input__controller = 1;
input__controller[0].input_arr = 1;
input__controller[0].int_state_arr = 0;
input__controller[0].float_state_arr = 7;
input__controller[0].x_arr = 13;
ret_val__controller = 1;
ret_val__controller[0].int_state_arr = 0;
ret_val__controller[0].float_state_arr = 7;
ret_val__controller[0].output_arr = 3;

Other input values:
input__controller[0].input_arr[0] = -423.000000;
input__controller[0].float_state_arr[0] = 768.990000;
input__controller[0].float_state_arr[1] = 994.000000;
input__controller[0].float_state_arr[2] = -292.000000;
input__controller[0].float_state_arr[3] = -0.400000;
input__controller[0].float_state_arr[4] = 0.600000;
input__controller[0].float_state_arr[5] = -384.000000;
input__controller[0].float_state_arr[6] = -73.000000;
input__controller[0].x_arr[0] = -493.000000;
input__controller[0].x_arr[1] = 170.000000;
input__controller[0].x_arr[2] = -8.000000;
input__controller[0].x_arr[3] = -463.000000;
input__controller[0].x_arr[4] = -387.000000;
input__controller[0].x_arr[5] = -245.000000;
input__controller[0].x_arr[6] = 150.000000;
input__controller[0].x_arr[7] = -475.000000;
input__controller[0].x_arr[8] = -478.000000;
input__controller[0].x_arr[9] = -156.000000;
input__controller[0].x_arr[10] = 14.700000;
input__controller[0].x_arr[11] = 173.000000;
input__controller[0].x_arr[12] = -343.000000;
ret_val__controller[0].float_state_arr[0] = 397.000000;
ret_val__controller[0].float_state_arr[1] = -241.000000;
ret_val__controller[0].float_state_arr[2] = -268.000000;
ret_val__controller[0].float_state_arr[3] = -365.000000;
ret_val__controller[0].float_state_arr[4] = -94.000000;
ret_val__controller[0].float_state_arr[5] = -68.000000;
ret_val__controller[0].float_state_arr[6] = -139.000000;
ret_val__controller[0].output_arr[0] = 438.000000;
ret_val__controller[0].output_arr[1] = -491.000000;
ret_val__controller[0].output_arr[2] = -16.000000;

Result:
unknown

Path Covered :
afc.c
-140 -142 +146 -151 -158 -160 -160b -161 +162 -162b +182 -191 +195 +205


Path Predicate for case 83:
afc.c: -140 input[0].x_arr[10]>-1.000000
afc.c: -142 ((unsigned char)input[0].float_state_arr[3])=0
afc.c: +146 (input[0].float_state_arr[0]+0.010000)>=10.000000
afc.c: -151 ((unsigned char)input[0].float_state_arr[4])=0
afc.c: -158 input[0].x_arr[8]<70.000000
afc.c: -160 0=0
afc.c: -160b 1<>0
afc.c: -161 0=0
afc.c: +162 1<>0
afc.c: -162b 0=0
afc.c: +182 0=0
afc.c: -191 0=0
afc.c: +195 (1.000000+((0.040000*(input[0].x_arr[10]+-14.700000))+(((0.140000*(input[0].x_arr[10]+-14.700000))*0.010000)+input[0].float_state_arr[1])))>100.000000
afc.c: +205 (((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))/14.700000)*100.000000)>1.660000

Simplified Path Predicate for case 83:
input[0].x_arr[10]>-1.000000 AND
((unsigned char)input[0].float_state_arr[3])=0 AND
(input[0].float_state_arr[0]+0.010000)>=10.000000 AND
((unsigned char)input[0].float_state_arr[4])=0 AND
input[0].x_arr[8]<70.000000 AND
(1.000000+((0.040000*(input[0].x_arr[10]+-14.700000))+(((0.140000*(input[0].x_arr[10]+-14.700000))*0.010000)+input[0].float_state_arr[1])))>100.000000 AND
(((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))/14.700000)*100.000000)>1.660000

Output Values for case 83: (Symbolic,Concrete)
return value = 0, 0
ret_val[0].float_state_arr[0] = (input[0].float_state_arr[0]+0.010000), 769.000000
ret_val[0].float_state_arr[1] = (((0.140000*(input[0].x_arr[10]+-14.700000))*0.010000)+input[0].float_state_arr[1]), 994.000000
ret_val[0].float_state_arr[2] = (input[0].float_state_arr[2]+(((input[0].x_arr[9]+-((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))))*0.413280)*0.010000)), -5957.592441
ret_val[0].float_state_arr[3] = 0.000000, 0.000000
ret_val[0].float_state_arr[4] = 0.000000, 0.000000
ret_val[0].float_state_arr[5] = 1.000000, 1.000000
ret_val[0].float_state_arr[6] = ((0.040000*(input[0].x_arr[10]+-14.700000))+(((0.140000*(input[0].x_arr[10]+-14.700000))*0.010000)+input[0].float_state_arr[1])), 994.000000
ret_val[0].output_arr[0] = 1.660000, 1.660000
ret_val[0].output_arr[1] = 0.000000, 0.000000
ret_val[0].output_arr[2] = 14.700000, 14.700000

to explore negation deepest unexplored condition of predicate,
Path Predicate Prefix to solve :
afc.c: -140 input[0].x_arr[10]>-1.000000
afc.c: -142 ((unsigned char)input[0].float_state_arr[3])=0
afc.c: +146 (input[0].float_state_arr[0]+0.010000)>=10.000000
afc.c: -151 ((unsigned char)input[0].float_state_arr[4])=0
afc.c: -158 input[0].x_arr[8]<70.000000
afc.c: -160 0=0
afc.c: -160b 1<>0
afc.c: -161 0=0
afc.c: +162 1<>0
afc.c: -162b 0=0
afc.c: +182 0=0
afc.c: -191 0=0
afc.c: +195 (1.000000+((0.040000*(input[0].x_arr[10]+-14.700000))+(((0.140000*(input[0].x_arr[10]+-14.700000))*0.010000)+input[0].float_state_arr[1])))>100.000000
afc.c: -205 (((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))/14.700000)*100.000000)=<1.660000
Path Prefix to cover :
afc.c
-140 -142 +146 -151 -158 -160 -160b -161 +162 -162b +182 -191 +195 -205


TEST CASE 84

Dimensions:
input__controller = 1;
input__controller[0].input_arr = 1;
input__controller[0].int_state_arr = 0;
input__controller[0].float_state_arr = 7;
input__controller[0].x_arr = 13;
ret_val__controller = 1;
ret_val__controller[0].int_state_arr = 0;
ret_val__controller[0].float_state_arr = 7;
ret_val__controller[0].output_arr = 3;

Other input values:
input__controller[0].input_arr[0] = -423.000000;
input__controller[0].float_state_arr[0] = 768.990000;
input__controller[0].float_state_arr[1] = 994.000000;
input__controller[0].float_state_arr[2] = 488.000000;
input__controller[0].float_state_arr[3] = -0.400000;
input__controller[0].float_state_arr[4] = 0.600000;
input__controller[0].float_state_arr[5] = -384.000000;
input__controller[0].float_state_arr[6] = -73.000000;
input__controller[0].x_arr[0] = -493.000000;
input__controller[0].x_arr[1] = 170.000000;
input__controller[0].x_arr[2] = -8.000000;
input__controller[0].x_arr[3] = -463.000000;
input__controller[0].x_arr[4] = -387.000000;
input__controller[0].x_arr[5] = -245.000000;
input__controller[0].x_arr[6] = 150.000000;
input__controller[0].x_arr[7] = 0.000000;
input__controller[0].x_arr[8] = -478.000000;
input__controller[0].x_arr[9] = -0.366000;
input__controller[0].x_arr[10] = 14.700000;
input__controller[0].x_arr[11] = 173.000000;
input__controller[0].x_arr[12] = -343.000000;
ret_val__controller[0].float_state_arr[0] = 397.000000;
ret_val__controller[0].float_state_arr[1] = -241.000000;
ret_val__controller[0].float_state_arr[2] = -268.000000;
ret_val__controller[0].float_state_arr[3] = -365.000000;
ret_val__controller[0].float_state_arr[4] = -94.000000;
ret_val__controller[0].float_state_arr[5] = -68.000000;
ret_val__controller[0].float_state_arr[6] = -139.000000;
ret_val__controller[0].output_arr[0] = 438.000000;
ret_val__controller[0].output_arr[1] = -491.000000;
ret_val__controller[0].output_arr[2] = -16.000000;

Result:
unknown

Path Covered :
afc.c
-140 -142 +146 -151 -158 -160 -160b -161 +162 -162b +182 -191 +195 -205 +207


Path Predicate for case 84:
afc.c: -140 input[0].x_arr[10]>-1.000000
afc.c: -142 ((unsigned char)input[0].float_state_arr[3])=0
afc.c: +146 (input[0].float_state_arr[0]+0.010000)>=10.000000
afc.c: -151 ((unsigned char)input[0].float_state_arr[4])=0
afc.c: -158 input[0].x_arr[8]<70.000000
afc.c: -160 0=0
afc.c: -160b 1<>0
afc.c: -161 0=0
afc.c: +162 1<>0
afc.c: -162b 0=0
afc.c: +182 0=0
afc.c: -191 0=0
afc.c: +195 (1.000000+((0.040000*(input[0].x_arr[10]+-14.700000))+(((0.140000*(input[0].x_arr[10]+-14.700000))*0.010000)+input[0].float_state_arr[1])))>100.000000
afc.c: -205 (((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))/14.700000)*100.000000)=<1.660000
afc.c: +207 (((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))/14.700000)*100.000000)<0.130000

Simplified Path Predicate for case 84:
input[0].x_arr[10]>-1.000000 AND
((unsigned char)input[0].float_state_arr[3])=0 AND
(input[0].float_state_arr[0]+0.010000)>=10.000000 AND
((unsigned char)input[0].float_state_arr[4])=0 AND
input[0].x_arr[8]<70.000000 AND
(1.000000+((0.040000*(input[0].x_arr[10]+-14.700000))+(((0.140000*(input[0].x_arr[10]+-14.700000))*0.010000)+input[0].float_state_arr[1])))>100.000000 AND
(((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))/14.700000)*100.000000)=<1.660000 AND
(((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))/14.700000)*100.000000)<0.130000

Output Values for case 84: (Symbolic,Concrete)
return value = 0, 0
ret_val[0].float_state_arr[0] = (input[0].float_state_arr[0]+0.010000), 769.000000
ret_val[0].float_state_arr[1] = (((0.140000*(input[0].x_arr[10]+-14.700000))*0.010000)+input[0].float_state_arr[1]), 994.000000
ret_val[0].float_state_arr[2] = (input[0].float_state_arr[2]+(((input[0].x_arr[9]+-((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))))*0.413280)*0.010000)), 488.000000
ret_val[0].float_state_arr[3] = 0.000000, 0.000000
ret_val[0].float_state_arr[4] = 0.000000, 0.000000
ret_val[0].float_state_arr[5] = 1.000000, 1.000000
ret_val[0].float_state_arr[6] = ((0.040000*(input[0].x_arr[10]+-14.700000))+(((0.140000*(input[0].x_arr[10]+-14.700000))*0.010000)+input[0].float_state_arr[1])), 994.000000
ret_val[0].output_arr[0] = 0.130000, 0.130000
ret_val[0].output_arr[1] = 0.000000, 0.000000
ret_val[0].output_arr[2] = 14.700000, 14.700000

to explore negation deepest unexplored condition of predicate,
Path Predicate Prefix to solve :
afc.c: -140 input[0].x_arr[10]>-1.000000
afc.c: -142 ((unsigned char)input[0].float_state_arr[3])=0
afc.c: +146 (input[0].float_state_arr[0]+0.010000)>=10.000000
afc.c: -151 ((unsigned char)input[0].float_state_arr[4])=0
afc.c: -158 input[0].x_arr[8]<70.000000
afc.c: -160 0=0
afc.c: -160b 1<>0
afc.c: -161 0=0
afc.c: +162 1<>0
afc.c: -162b 0=0
afc.c: +182 0=0
afc.c: -191 0=0
afc.c: +195 (1.000000+((0.040000*(input[0].x_arr[10]+-14.700000))+(((0.140000*(input[0].x_arr[10]+-14.700000))*0.010000)+input[0].float_state_arr[1])))>100.000000
afc.c: -205 (((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))/14.700000)*100.000000)=<1.660000
afc.c: -207 (((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))/14.700000)*100.000000)>=0.130000
Path Prefix to cover :
afc.c
-140 -142 +146 -151 -158 -160 -160b -161 +162 -162b +182 -191 +195 -205 -207
Supposed infeasible (with the given preconditions) (constraint resolution timeout - all_vars_negated_ctr)

to explore negation deepest unexplored condition of predicate,
Path Predicate Prefix to solve :
afc.c: -140 input[0].x_arr[10]>-1.000000
afc.c: -142 ((unsigned char)input[0].float_state_arr[3])=0
afc.c: +146 (input[0].float_state_arr[0]+0.010000)>=10.000000
afc.c: -151 ((unsigned char)input[0].float_state_arr[4])=0
afc.c: -158 input[0].x_arr[8]<70.000000
afc.c: -160 0=0
afc.c: -160b 1<>0
afc.c: -161 0=0
afc.c: +162 1<>0
afc.c: -162b 0=0
afc.c: +182 0=0
afc.c: +191 0<>0
Path Prefix to cover :
afc.c
-140 -142 +146 -151 -158 -160 -160b -161 +162 -162b +182 +191
trivially infeasible

to explore negation deepest unexplored condition of predicate,
Path Predicate Prefix to solve :
afc.c: -140 input[0].x_arr[10]>-1.000000
afc.c: -142 ((unsigned char)input[0].float_state_arr[3])=0
afc.c: +146 (input[0].float_state_arr[0]+0.010000)>=10.000000
afc.c: -151 ((unsigned char)input[0].float_state_arr[4])=0
afc.c: -158 input[0].x_arr[8]<70.000000
afc.c: -160 0=0
afc.c: -160b 1<>0
afc.c: -161 0=0
afc.c: +162 1<>0
afc.c: -162b 0=0
afc.c: -182 0<>0
Path Prefix to cover :
afc.c
-140 -142 +146 -151 -158 -160 -160b -161 +162 -162b -182
trivially infeasible

to explore negation deepest unexplored condition of predicate,
Path Predicate Prefix to solve :
afc.c: -140 input[0].x_arr[10]>-1.000000
afc.c: -142 ((unsigned char)input[0].float_state_arr[3])=0
afc.c: +146 (input[0].float_state_arr[0]+0.010000)>=10.000000
afc.c: -151 ((unsigned char)input[0].float_state_arr[4])=0
afc.c: -158 input[0].x_arr[8]<70.000000
afc.c: -160 0=0
afc.c: -160b 1<>0
afc.c: -161 0=0
afc.c: +162 1<>0
afc.c: +162b 0<>0
Path Prefix to cover :
afc.c
-140 -142 +146 -151 -158 -160 -160b -161 +162 +162b
trivially infeasible

to explore negation deepest unexplored condition of predicate,
Path Predicate Prefix to solve :
afc.c: -140 input[0].x_arr[10]>-1.000000
afc.c: -142 ((unsigned char)input[0].float_state_arr[3])=0
afc.c: +146 (input[0].float_state_arr[0]+0.010000)>=10.000000
afc.c: -151 ((unsigned char)input[0].float_state_arr[4])=0
afc.c: -158 input[0].x_arr[8]<70.000000
afc.c: -160 0=0
afc.c: -160b 1<>0
afc.c: -161 0=0
afc.c: -162 1=0
Path Prefix to cover :
afc.c
-140 -142 +146 -151 -158 -160 -160b -161 -162
trivially infeasible

to explore negation deepest unexplored condition of predicate,
Path Predicate Prefix to solve :
afc.c: -140 input[0].x_arr[10]>-1.000000
afc.c: -142 ((unsigned char)input[0].float_state_arr[3])=0
afc.c: +146 (input[0].float_state_arr[0]+0.010000)>=10.000000
afc.c: -151 ((unsigned char)input[0].float_state_arr[4])=0
afc.c: -158 input[0].x_arr[8]<70.000000
afc.c: -160 0=0
afc.c: -160b 1<>0
afc.c: +161 0<>0
Path Prefix to cover :
afc.c
-140 -142 +146 -151 -158 -160 -160b +161
trivially infeasible

to explore negation deepest unexplored condition of predicate,
Path Predicate Prefix to solve :
afc.c: -140 input[0].x_arr[10]>-1.000000
afc.c: -142 ((unsigned char)input[0].float_state_arr[3])=0
afc.c: +146 (input[0].float_state_arr[0]+0.010000)>=10.000000
afc.c: -151 ((unsigned char)input[0].float_state_arr[4])=0
afc.c: -158 input[0].x_arr[8]<70.000000
afc.c: -160 0=0
afc.c: +160b 1=0
Path Prefix to cover :
afc.c
-140 -142 +146 -151 -158 -160 +160b
trivially infeasible

to explore negation deepest unexplored condition of predicate,
Path Predicate Prefix to solve :
afc.c: -140 input[0].x_arr[10]>-1.000000
afc.c: -142 ((unsigned char)input[0].float_state_arr[3])=0
afc.c: +146 (input[0].float_state_arr[0]+0.010000)>=10.000000
afc.c: -151 ((unsigned char)input[0].float_state_arr[4])=0
afc.c: -158 input[0].x_arr[8]<70.000000
afc.c: +160 0<>0
Path Prefix to cover :
afc.c
-140 -142 +146 -151 -158 +160
trivially infeasible

to explore negation deepest unexplored condition of predicate,
Path Predicate Prefix to solve :
afc.c: -140 input[0].x_arr[10]>-1.000000
afc.c: -142 ((unsigned char)input[0].float_state_arr[3])=0
afc.c: +146 (input[0].float_state_arr[0]+0.010000)>=10.000000
afc.c: -151 ((unsigned char)input[0].float_state_arr[4])=0
afc.c: +158 input[0].x_arr[8]>=70.000000
Path Prefix to cover :
afc.c
-140 -142 +146 -151 +158


TEST CASE 86

Dimensions:
input__controller = 1;
input__controller[0].input_arr = 1;
input__controller[0].int_state_arr = 0;
input__controller[0].float_state_arr = 7;
input__controller[0].x_arr = 13;
ret_val__controller = 1;
ret_val__controller[0].int_state_arr = 0;
ret_val__controller[0].float_state_arr = 7;
ret_val__controller[0].output_arr = 3;

Other input values:
input__controller[0].input_arr[0] = -423.000000;
input__controller[0].float_state_arr[0] = 768.990000;
input__controller[0].float_state_arr[1] = -78.000000;
input__controller[0].float_state_arr[2] = -292.000000;
input__controller[0].float_state_arr[3] = -0.400000;
input__controller[0].float_state_arr[4] = 0.600000;
input__controller[0].float_state_arr[5] = -384.000000;
input__controller[0].float_state_arr[6] = -73.000000;
input__controller[0].x_arr[0] = -493.000000;
input__controller[0].x_arr[1] = 170.000000;
input__controller[0].x_arr[2] = -8.000000;
input__controller[0].x_arr[3] = -463.000000;
input__controller[0].x_arr[4] = -387.000000;
input__controller[0].x_arr[5] = -245.000000;
input__controller[0].x_arr[6] = 150.000000;
input__controller[0].x_arr[7] = -475.000000;
input__controller[0].x_arr[8] = 484.000000;
input__controller[0].x_arr[9] = -156.000000;
input__controller[0].x_arr[10] = 417.000000;
input__controller[0].x_arr[11] = 173.000000;
input__controller[0].x_arr[12] = -343.000000;
ret_val__controller[0].float_state_arr[0] = 397.000000;
ret_val__controller[0].float_state_arr[1] = -241.000000;
ret_val__controller[0].float_state_arr[2] = -268.000000;
ret_val__controller[0].float_state_arr[3] = -365.000000;
ret_val__controller[0].float_state_arr[4] = -94.000000;
ret_val__controller[0].float_state_arr[5] = -68.000000;
ret_val__controller[0].float_state_arr[6] = -139.000000;
ret_val__controller[0].output_arr[0] = 438.000000;
ret_val__controller[0].output_arr[1] = -491.000000;
ret_val__controller[0].output_arr[2] = -16.000000;

Result:
unknown

Path Covered :
afc.c
-140 -142 +146 -151 +158 -160 -160b +161 +162 +162b -182 +191 +205


Path Predicate for case 86:
afc.c: -140 input[0].x_arr[10]>-1.000000
afc.c: -142 ((unsigned char)input[0].float_state_arr[3])=0
afc.c: +146 (input[0].float_state_arr[0]+0.010000)>=10.000000
afc.c: -151 ((unsigned char)input[0].float_state_arr[4])=0
afc.c: +158 input[0].x_arr[8]>=70.000000
afc.c: -160 0=0
afc.c: -160b 1<>0
afc.c: +161 1<>0
afc.c: +162 1<>0
afc.c: +162b 1<>0
afc.c: -182 1<>0
afc.c: +191 1<>0
afc.c: +205 ((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))/12.500000)>1.660000

Simplified Path Predicate for case 86:
input[0].x_arr[10]>-1.000000 AND
((unsigned char)input[0].float_state_arr[3])=0 AND
(input[0].float_state_arr[0]+0.010000)>=10.000000 AND
((unsigned char)input[0].float_state_arr[4])=0 AND
input[0].x_arr[8]>=70.000000 AND
((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))/12.500000)>1.660000

Output Values for case 86: (Symbolic,Concrete)
return value = 0, 0
ret_val[0].float_state_arr[0] = (input[0].float_state_arr[0]+0.010000), 769.000000
ret_val[0].float_state_arr[1] = input[0].float_state_arr[1], -78.000000
ret_val[0].float_state_arr[2] = (input[0].float_state_arr[2]+(((input[0].x_arr[9]+-((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))))*0.413280)*0.010000)), -5957.592441
ret_val[0].float_state_arr[3] = 0.000000, 0.000000
ret_val[0].float_state_arr[4] = 1.000000, 1.000000
ret_val[0].float_state_arr[5] = 1.000000, 1.000000
ret_val[0].float_state_arr[6] = input[0].float_state_arr[6], -73.000000
ret_val[0].output_arr[0] = 1.660000, 1.660000
ret_val[0].output_arr[1] = 1.000000, 1.000000
ret_val[0].output_arr[2] = 12.500000, 12.500000

to explore negation deepest unexplored condition of predicate,
Path Predicate Prefix to solve :
afc.c: -140 input[0].x_arr[10]>-1.000000
afc.c: -142 ((unsigned char)input[0].float_state_arr[3])=0
afc.c: +146 (input[0].float_state_arr[0]+0.010000)>=10.000000
afc.c: -151 ((unsigned char)input[0].float_state_arr[4])=0
afc.c: +158 input[0].x_arr[8]>=70.000000
afc.c: -160 0=0
afc.c: -160b 1<>0
afc.c: +161 1<>0
afc.c: +162 1<>0
afc.c: +162b 1<>0
afc.c: -182 1<>0
afc.c: +191 1<>0
afc.c: -205 ((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))/12.500000)=<1.660000
Path Prefix to cover :
afc.c
-140 -142 +146 -151 +158 -160 -160b +161 +162 +162b -182 +191 -205


TEST CASE 87

Dimensions:
input__controller = 1;
input__controller[0].input_arr = 1;
input__controller[0].int_state_arr = 0;
input__controller[0].float_state_arr = 7;
input__controller[0].x_arr = 13;
ret_val__controller = 1;
ret_val__controller[0].int_state_arr = 0;
ret_val__controller[0].float_state_arr = 7;
ret_val__controller[0].output_arr = 3;

Other input values:
input__controller[0].input_arr[0] = -423.000000;
input__controller[0].float_state_arr[0] = 768.990000;
input__controller[0].float_state_arr[1] = -78.000000;
input__controller[0].float_state_arr[2] = 342.000000;
input__controller[0].float_state_arr[3] = -0.400000;
input__controller[0].float_state_arr[4] = 0.600000;
input__controller[0].float_state_arr[5] = -384.000000;
input__controller[0].float_state_arr[6] = -73.000000;
input__controller[0].x_arr[0] = -493.000000;
input__controller[0].x_arr[1] = 170.000000;
input__controller[0].x_arr[2] = -8.000000;
input__controller[0].x_arr[3] = -463.000000;
input__controller[0].x_arr[4] = -387.000000;
input__controller[0].x_arr[5] = -245.000000;
input__controller[0].x_arr[6] = 150.000000;
input__controller[0].x_arr[7] = -0.000000;
input__controller[0].x_arr[8] = 484.000000;
input__controller[0].x_arr[9] = -0.366000;
input__controller[0].x_arr[10] = 417.000000;
input__controller[0].x_arr[11] = 173.000000;
input__controller[0].x_arr[12] = -343.000000;
ret_val__controller[0].float_state_arr[0] = 397.000000;
ret_val__controller[0].float_state_arr[1] = -241.000000;
ret_val__controller[0].float_state_arr[2] = -268.000000;
ret_val__controller[0].float_state_arr[3] = -365.000000;
ret_val__controller[0].float_state_arr[4] = -94.000000;
ret_val__controller[0].float_state_arr[5] = -68.000000;
ret_val__controller[0].float_state_arr[6] = -139.000000;
ret_val__controller[0].output_arr[0] = 438.000000;
ret_val__controller[0].output_arr[1] = -491.000000;
ret_val__controller[0].output_arr[2] = -16.000000;

Result:
unknown

Path Covered :
afc.c
-140 -142 +146 -151 +158 -160 -160b +161 +162 +162b -182 +191 -205 +207


Path Predicate for case 87:
afc.c: -140 input[0].x_arr[10]>-1.000000
afc.c: -142 ((unsigned char)input[0].float_state_arr[3])=0
afc.c: +146 (input[0].float_state_arr[0]+0.010000)>=10.000000
afc.c: -151 ((unsigned char)input[0].float_state_arr[4])=0
afc.c: +158 input[0].x_arr[8]>=70.000000
afc.c: -160 0=0
afc.c: -160b 1<>0
afc.c: +161 1<>0
afc.c: +162 1<>0
afc.c: +162b 1<>0
afc.c: -182 1<>0
afc.c: +191 1<>0
afc.c: -205 ((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))/12.500000)=<1.660000
afc.c: +207 ((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))/12.500000)<0.130000

Simplified Path Predicate for case 87:
input[0].x_arr[10]>-1.000000 AND
((unsigned char)input[0].float_state_arr[3])=0 AND
(input[0].float_state_arr[0]+0.010000)>=10.000000 AND
((unsigned char)input[0].float_state_arr[4])=0 AND
input[0].x_arr[8]>=70.000000 AND
((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))/12.500000)=<1.660000 AND
((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))/12.500000)<0.130000

Output Values for case 87: (Symbolic,Concrete)
return value = 0, 0
ret_val[0].float_state_arr[0] = (input[0].float_state_arr[0]+0.010000), 769.000000
ret_val[0].float_state_arr[1] = input[0].float_state_arr[1], -78.000000
ret_val[0].float_state_arr[2] = (input[0].float_state_arr[2]+(((input[0].x_arr[9]+-((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))))*0.413280)*0.010000)), 342.000000
ret_val[0].float_state_arr[3] = 0.000000, 0.000000
ret_val[0].float_state_arr[4] = 1.000000, 1.000000
ret_val[0].float_state_arr[5] = 1.000000, 1.000000
ret_val[0].float_state_arr[6] = input[0].float_state_arr[6], -73.000000
ret_val[0].output_arr[0] = 0.130000, 0.130000
ret_val[0].output_arr[1] = 1.000000, 1.000000
ret_val[0].output_arr[2] = 12.500000, 12.500000

to explore negation deepest unexplored condition of predicate,
Path Predicate Prefix to solve :
afc.c: -140 input[0].x_arr[10]>-1.000000
afc.c: -142 ((unsigned char)input[0].float_state_arr[3])=0
afc.c: +146 (input[0].float_state_arr[0]+0.010000)>=10.000000
afc.c: -151 ((unsigned char)input[0].float_state_arr[4])=0
afc.c: +158 input[0].x_arr[8]>=70.000000
afc.c: -160 0=0
afc.c: -160b 1<>0
afc.c: +161 1<>0
afc.c: +162 1<>0
afc.c: +162b 1<>0
afc.c: -182 1<>0
afc.c: +191 1<>0
afc.c: -205 ((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))/12.500000)=<1.660000
afc.c: -207 ((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))/12.500000)>=0.130000
Path Prefix to cover :
afc.c
-140 -142 +146 -151 +158 -160 -160b +161 +162 +162b -182 +191 -205 -207


TEST CASE 88

Dimensions:
input__controller = 1;
input__controller[0].input_arr = 1;
input__controller[0].int_state_arr = 0;
input__controller[0].float_state_arr = 7;
input__controller[0].x_arr = 13;
ret_val__controller = 1;
ret_val__controller[0].int_state_arr = 0;
ret_val__controller[0].float_state_arr = 7;
ret_val__controller[0].output_arr = 3;

Other input values:
input__controller[0].input_arr[0] = -423.000000;
input__controller[0].float_state_arr[0] = 768.990000;
input__controller[0].float_state_arr[1] = -78.000000;
input__controller[0].float_state_arr[2] = -148.000000;
input__controller[0].float_state_arr[3] = -0.400000;
input__controller[0].float_state_arr[4] = 0.600000;
input__controller[0].float_state_arr[5] = -384.000000;
input__controller[0].float_state_arr[6] = -73.000000;
input__controller[0].x_arr[0] = -493.000000;
input__controller[0].x_arr[1] = 170.000000;
input__controller[0].x_arr[2] = -8.000000;
input__controller[0].x_arr[3] = -463.000000;
input__controller[0].x_arr[4] = -387.000000;
input__controller[0].x_arr[5] = -245.000000;
input__controller[0].x_arr[6] = 150.000000;
input__controller[0].x_arr[7] = -50773.886205;
input__controller[0].x_arr[8] = 484.000000;
input__controller[0].x_arr[9] = 10.000000;
input__controller[0].x_arr[10] = 417.000000;
input__controller[0].x_arr[11] = 173.000000;
input__controller[0].x_arr[12] = -343.000000;
ret_val__controller[0].float_state_arr[0] = 397.000000;
ret_val__controller[0].float_state_arr[1] = -241.000000;
ret_val__controller[0].float_state_arr[2] = -268.000000;
ret_val__controller[0].float_state_arr[3] = -365.000000;
ret_val__controller[0].float_state_arr[4] = -94.000000;
ret_val__controller[0].float_state_arr[5] = -68.000000;
ret_val__controller[0].float_state_arr[6] = -139.000000;
ret_val__controller[0].output_arr[0] = 438.000000;
ret_val__controller[0].output_arr[1] = -491.000000;
ret_val__controller[0].output_arr[2] = -16.000000;

Result:
unknown

Path Covered :
afc.c
-140 -142 +146 -151 +158 -160 -160b +161 +162 +162b -182 +191 -205 -207


Path Predicate for case 88:
afc.c: -140 input[0].x_arr[10]>-1.000000
afc.c: -142 ((unsigned char)input[0].float_state_arr[3])=0
afc.c: +146 (input[0].float_state_arr[0]+0.010000)>=10.000000
afc.c: -151 ((unsigned char)input[0].float_state_arr[4])=0
afc.c: +158 input[0].x_arr[8]>=70.000000
afc.c: -160 0=0
afc.c: -160b 1<>0
afc.c: +161 1<>0
afc.c: +162 1<>0
afc.c: +162b 1<>0
afc.c: -182 1<>0
afc.c: +191 1<>0
afc.c: -205 ((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))/12.500000)=<1.660000
afc.c: -207 ((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))/12.500000)>=0.130000

Simplified Path Predicate for case 88:
input[0].x_arr[10]>-1.000000 AND
((unsigned char)input[0].float_state_arr[3])=0 AND
(input[0].float_state_arr[0]+0.010000)>=10.000000 AND
((unsigned char)input[0].float_state_arr[4])=0 AND
input[0].x_arr[8]>=70.000000 AND
((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))/12.500000)=<1.660000 AND
((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))/12.500000)>=0.130000

Output Values for case 88: (Symbolic,Concrete)
return value = 0, 0
ret_val[0].float_state_arr[0] = (input[0].float_state_arr[0]+0.010000), 769.000000
ret_val[0].float_state_arr[1] = input[0].float_state_arr[1], -78.000000
ret_val[0].float_state_arr[2] = (input[0].float_state_arr[2]+(((input[0].x_arr[9]+-((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))))*0.413280)*0.010000)), -148.000000
ret_val[0].float_state_arr[3] = 0.000000, 0.000000
ret_val[0].float_state_arr[4] = 1.000000, 1.000000
ret_val[0].float_state_arr[5] = 1.000000, 1.000000
ret_val[0].float_state_arr[6] = input[0].float_state_arr[6], -73.000000
ret_val[0].output_arr[0] = ((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))/12.500000), 0.800000
ret_val[0].output_arr[1] = 1.000000, 1.000000
ret_val[0].output_arr[2] = 12.500000, 12.500000

to explore negation deepest unexplored condition of predicate,
Path Predicate Prefix to solve :
afc.c: -140 input[0].x_arr[10]>-1.000000
afc.c: -142 ((unsigned char)input[0].float_state_arr[3])=0
afc.c: +146 (input[0].float_state_arr[0]+0.010000)>=10.000000
afc.c: -151 ((unsigned char)input[0].float_state_arr[4])=0
afc.c: +158 input[0].x_arr[8]>=70.000000
afc.c: -160 0=0
afc.c: -160b 1<>0
afc.c: +161 1<>0
afc.c: +162 1<>0
afc.c: +162b 1<>0
afc.c: -182 1<>0
afc.c: -191 1=0
Path Prefix to cover :
afc.c
-140 -142 +146 -151 +158 -160 -160b +161 +162 +162b -182 -191
trivially infeasible

to explore negation deepest unexplored condition of predicate,
Path Predicate Prefix to solve :
afc.c: -140 input[0].x_arr[10]>-1.000000
afc.c: -142 ((unsigned char)input[0].float_state_arr[3])=0
afc.c: +146 (input[0].float_state_arr[0]+0.010000)>=10.000000
afc.c: -151 ((unsigned char)input[0].float_state_arr[4])=0
afc.c: +158 input[0].x_arr[8]>=70.000000
afc.c: -160 0=0
afc.c: -160b 1<>0
afc.c: +161 1<>0
afc.c: +162 1<>0
afc.c: +162b 1<>0
afc.c: +182 1=0
Path Prefix to cover :
afc.c
-140 -142 +146 -151 +158 -160 -160b +161 +162 +162b +182
trivially infeasible

to explore negation deepest unexplored condition of predicate,
Path Predicate Prefix to solve :
afc.c: -140 input[0].x_arr[10]>-1.000000
afc.c: -142 ((unsigned char)input[0].float_state_arr[3])=0
afc.c: +146 (input[0].float_state_arr[0]+0.010000)>=10.000000
afc.c: -151 ((unsigned char)input[0].float_state_arr[4])=0
afc.c: +158 input[0].x_arr[8]>=70.000000
afc.c: -160 0=0
afc.c: -160b 1<>0
afc.c: +161 1<>0
afc.c: +162 1<>0
afc.c: -162b 1=0
Path Prefix to cover :
afc.c
-140 -142 +146 -151 +158 -160 -160b +161 +162 -162b
trivially infeasible

to explore negation deepest unexplored condition of predicate,
Path Predicate Prefix to solve :
afc.c: -140 input[0].x_arr[10]>-1.000000
afc.c: -142 ((unsigned char)input[0].float_state_arr[3])=0
afc.c: +146 (input[0].float_state_arr[0]+0.010000)>=10.000000
afc.c: -151 ((unsigned char)input[0].float_state_arr[4])=0
afc.c: +158 input[0].x_arr[8]>=70.000000
afc.c: -160 0=0
afc.c: -160b 1<>0
afc.c: +161 1<>0
afc.c: -162 1=0
Path Prefix to cover :
afc.c
-140 -142 +146 -151 +158 -160 -160b +161 -162
trivially infeasible

to explore negation deepest unexplored condition of predicate,
Path Predicate Prefix to solve :
afc.c: -140 input[0].x_arr[10]>-1.000000
afc.c: -142 ((unsigned char)input[0].float_state_arr[3])=0
afc.c: +146 (input[0].float_state_arr[0]+0.010000)>=10.000000
afc.c: -151 ((unsigned char)input[0].float_state_arr[4])=0
afc.c: +158 input[0].x_arr[8]>=70.000000
afc.c: -160 0=0
afc.c: -160b 1<>0
afc.c: -161 1=0
Path Prefix to cover :
afc.c
-140 -142 +146 -151 +158 -160 -160b -161
trivially infeasible

to explore negation deepest unexplored condition of predicate,
Path Predicate Prefix to solve :
afc.c: -140 input[0].x_arr[10]>-1.000000
afc.c: -142 ((unsigned char)input[0].float_state_arr[3])=0
afc.c: +146 (input[0].float_state_arr[0]+0.010000)>=10.000000
afc.c: -151 ((unsigned char)input[0].float_state_arr[4])=0
afc.c: +158 input[0].x_arr[8]>=70.000000
afc.c: -160 0=0
afc.c: +160b 1=0
Path Prefix to cover :
afc.c
-140 -142 +146 -151 +158 -160 +160b
trivially infeasible

to explore negation deepest unexplored condition of predicate,
Path Predicate Prefix to solve :
afc.c: -140 input[0].x_arr[10]>-1.000000
afc.c: -142 ((unsigned char)input[0].float_state_arr[3])=0
afc.c: +146 (input[0].float_state_arr[0]+0.010000)>=10.000000
afc.c: -151 ((unsigned char)input[0].float_state_arr[4])=0
afc.c: +158 input[0].x_arr[8]>=70.000000
afc.c: +160 0<>0
Path Prefix to cover :
afc.c
-140 -142 +146 -151 +158 +160
trivially infeasible

to explore negation deepest unexplored condition of predicate,
Path Predicate Prefix to solve :
afc.c: +140 input[0].x_arr[10]=<-1.000000
Path Prefix to cover :
afc.c
+140


TEST CASE 89

Dimensions:
input__controller = 1;
input__controller[0].input_arr = 1;
input__controller[0].int_state_arr = 0;
input__controller[0].float_state_arr = 7;
input__controller[0].x_arr = 13;
ret_val__controller = 1;
ret_val__controller[0].int_state_arr = 0;
ret_val__controller[0].float_state_arr = 7;
ret_val__controller[0].output_arr = 3;

Other input values:
input__controller[0].input_arr[0] = -423.000000;
input__controller[0].float_state_arr[0] = -371.000000;
input__controller[0].float_state_arr[1] = -78.000000;
input__controller[0].float_state_arr[2] = -292.000000;
input__controller[0].float_state_arr[3] = 272.000000;
input__controller[0].float_state_arr[4] = -193.000000;
input__controller[0].float_state_arr[5] = -384.000000;
input__controller[0].float_state_arr[6] = -73.000000;
input__controller[0].x_arr[0] = -493.000000;
input__controller[0].x_arr[1] = 170.000000;
input__controller[0].x_arr[2] = -8.000000;
input__controller[0].x_arr[3] = -463.000000;
input__controller[0].x_arr[4] = -387.000000;
input__controller[0].x_arr[5] = -245.000000;
input__controller[0].x_arr[6] = 150.000000;
input__controller[0].x_arr[7] = -475.000000;
input__controller[0].x_arr[8] = -478.000000;
input__controller[0].x_arr[9] = -156.000000;
input__controller[0].x_arr[10] = -793.000000;
input__controller[0].x_arr[11] = 173.000000;
input__controller[0].x_arr[12] = -343.000000;
ret_val__controller[0].float_state_arr[0] = 397.000000;
ret_val__controller[0].float_state_arr[1] = -241.000000;
ret_val__controller[0].float_state_arr[2] = -268.000000;
ret_val__controller[0].float_state_arr[3] = -365.000000;
ret_val__controller[0].float_state_arr[4] = -94.000000;
ret_val__controller[0].float_state_arr[5] = -68.000000;
ret_val__controller[0].float_state_arr[6] = -139.000000;
ret_val__controller[0].output_arr[0] = 438.000000;
ret_val__controller[0].output_arr[1] = -491.000000;
ret_val__controller[0].output_arr[2] = -16.000000;

Result:
unknown

Path Covered :
afc.c
+140 -146 +148 +151 -158 +160 +162 -162b -182 +191 +205


Path Predicate for case 89:
afc.c: +140 input[0].x_arr[10]=<-1.000000
afc.c: -146 (input[0].float_state_arr[0]+0.010000)<10.000000
afc.c: +148 ((unsigned char)input[0].float_state_arr[5])<>0
afc.c: +151 ((unsigned char)input[0].float_state_arr[4])<>0
afc.c: -158 input[0].x_arr[8]<50.000000
afc.c: +160 1<>0
afc.c: +162 1<>0
afc.c: -162b 0=0
afc.c: -182 1<>0
afc.c: +191 1<>0
afc.c: +205 ((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))/14.700000)>1.660000

Simplified Path Predicate for case 89:
input[0].x_arr[10]=<-1.000000 AND
(input[0].float_state_arr[0]+0.010000)<10.000000 AND
((unsigned char)input[0].float_state_arr[5])<>0 AND
((unsigned char)input[0].float_state_arr[4])<>0 AND
input[0].x_arr[8]<50.000000 AND
((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))/14.700000)>1.660000

Output Values for case 89: (Symbolic,Concrete)
return value = 0, 0
ret_val[0].float_state_arr[0] = (input[0].float_state_arr[0]+0.010000), -370.990000
ret_val[0].float_state_arr[1] = input[0].float_state_arr[1], -78.000000
ret_val[0].float_state_arr[2] = (input[0].float_state_arr[2]+(((input[0].x_arr[9]+-((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))))*0.413280)*0.010000)), -5957.592441
ret_val[0].float_state_arr[3] = 1.000000, 1.000000
ret_val[0].float_state_arr[4] = 0.000000, 0.000000
ret_val[0].float_state_arr[5] = 1.000000, 1.000000
ret_val[0].float_state_arr[6] = input[0].float_state_arr[6], -73.000000
ret_val[0].output_arr[0] = 1.660000, 1.660000
ret_val[0].output_arr[1] = 1.000000, 1.000000
ret_val[0].output_arr[2] = 14.700000, 14.700000

to explore negation deepest unexplored condition of predicate,
Path Predicate Prefix to solve :
afc.c: +140 input[0].x_arr[10]=<-1.000000
afc.c: -146 (input[0].float_state_arr[0]+0.010000)<10.000000
afc.c: +148 ((unsigned char)input[0].float_state_arr[5])<>0
afc.c: +151 ((unsigned char)input[0].float_state_arr[4])<>0
afc.c: -158 input[0].x_arr[8]<50.000000
afc.c: +160 1<>0
afc.c: +162 1<>0
afc.c: -162b 0=0
afc.c: -182 1<>0
afc.c: +191 1<>0
afc.c: -205 ((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))/14.700000)=<1.660000
Path Prefix to cover :
afc.c
+140 -146 +148 +151 -158 +160 +162 -162b -182 +191 -205


TEST CASE 90

Dimensions:
input__controller = 1;
input__controller[0].input_arr = 1;
input__controller[0].int_state_arr = 0;
input__controller[0].float_state_arr = 7;
input__controller[0].x_arr = 13;
ret_val__controller = 1;
ret_val__controller[0].int_state_arr = 0;
ret_val__controller[0].float_state_arr = 7;
ret_val__controller[0].output_arr = 3;

Other input values:
input__controller[0].input_arr[0] = -423.000000;
input__controller[0].float_state_arr[0] = -371.000000;
input__controller[0].float_state_arr[1] = -78.000000;
input__controller[0].float_state_arr[2] = 377.000000;
input__controller[0].float_state_arr[3] = 272.000000;
input__controller[0].float_state_arr[4] = -193.000000;
input__controller[0].float_state_arr[5] = -384.000000;
input__controller[0].float_state_arr[6] = -73.000000;
input__controller[0].x_arr[0] = -493.000000;
input__controller[0].x_arr[1] = 170.000000;
input__controller[0].x_arr[2] = -8.000000;
input__controller[0].x_arr[3] = -463.000000;
input__controller[0].x_arr[4] = -387.000000;
input__controller[0].x_arr[5] = -245.000000;
input__controller[0].x_arr[6] = 150.000000;
input__controller[0].x_arr[7] = -0.000000;
input__controller[0].x_arr[8] = -478.000000;
input__controller[0].x_arr[9] = -0.366000;
input__controller[0].x_arr[10] = -793.000000;
input__controller[0].x_arr[11] = 173.000000;
input__controller[0].x_arr[12] = -343.000000;
ret_val__controller[0].float_state_arr[0] = 397.000000;
ret_val__controller[0].float_state_arr[1] = -241.000000;
ret_val__controller[0].float_state_arr[2] = -268.000000;
ret_val__controller[0].float_state_arr[3] = -365.000000;
ret_val__controller[0].float_state_arr[4] = -94.000000;
ret_val__controller[0].float_state_arr[5] = -68.000000;
ret_val__controller[0].float_state_arr[6] = -139.000000;
ret_val__controller[0].output_arr[0] = 438.000000;
ret_val__controller[0].output_arr[1] = -491.000000;
ret_val__controller[0].output_arr[2] = -16.000000;

Result:
unknown

Path Covered :
afc.c
+140 -146 +148 +151 -158 +160 +162 -162b -182 +191 -205 +207


Path Predicate for case 90:
afc.c: +140 input[0].x_arr[10]=<-1.000000
afc.c: -146 (input[0].float_state_arr[0]+0.010000)<10.000000
afc.c: +148 ((unsigned char)input[0].float_state_arr[5])<>0
afc.c: +151 ((unsigned char)input[0].float_state_arr[4])<>0
afc.c: -158 input[0].x_arr[8]<50.000000
afc.c: +160 1<>0
afc.c: +162 1<>0
afc.c: -162b 0=0
afc.c: -182 1<>0
afc.c: +191 1<>0
afc.c: -205 ((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))/14.700000)=<1.660000
afc.c: +207 ((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))/14.700000)<0.130000

Simplified Path Predicate for case 90:
input[0].x_arr[10]=<-1.000000 AND
(input[0].float_state_arr[0]+0.010000)<10.000000 AND
((unsigned char)input[0].float_state_arr[5])<>0 AND
((unsigned char)input[0].float_state_arr[4])<>0 AND
input[0].x_arr[8]<50.000000 AND
((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))/14.700000)=<1.660000 AND
((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))/14.700000)<0.130000

Output Values for case 90: (Symbolic,Concrete)
return value = 0, 0
ret_val[0].float_state_arr[0] = (input[0].float_state_arr[0]+0.010000), -370.990000
ret_val[0].float_state_arr[1] = input[0].float_state_arr[1], -78.000000
ret_val[0].float_state_arr[2] = (input[0].float_state_arr[2]+(((input[0].x_arr[9]+-((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))))*0.413280)*0.010000)), 377.000000
ret_val[0].float_state_arr[3] = 1.000000, 1.000000
ret_val[0].float_state_arr[4] = 0.000000, 0.000000
ret_val[0].float_state_arr[5] = 1.000000, 1.000000
ret_val[0].float_state_arr[6] = input[0].float_state_arr[6], -73.000000
ret_val[0].output_arr[0] = 0.130000, 0.130000
ret_val[0].output_arr[1] = 1.000000, 1.000000
ret_val[0].output_arr[2] = 14.700000, 14.700000

to explore negation deepest unexplored condition of predicate,
Path Predicate Prefix to solve :
afc.c: +140 input[0].x_arr[10]=<-1.000000
afc.c: -146 (input[0].float_state_arr[0]+0.010000)<10.000000
afc.c: +148 ((unsigned char)input[0].float_state_arr[5])<>0
afc.c: +151 ((unsigned char)input[0].float_state_arr[4])<>0
afc.c: -158 input[0].x_arr[8]<50.000000
afc.c: +160 1<>0
afc.c: +162 1<>0
afc.c: -162b 0=0
afc.c: -182 1<>0
afc.c: +191 1<>0
afc.c: -205 ((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))/14.700000)=<1.660000
afc.c: -207 ((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))/14.700000)>=0.130000
Path Prefix to cover :
afc.c
+140 -146 +148 +151 -158 +160 +162 -162b -182 +191 -205 -207


TEST CASE 91

Dimensions:
input__controller = 1;
input__controller[0].input_arr = 1;
input__controller[0].int_state_arr = 0;
input__controller[0].float_state_arr = 7;
input__controller[0].x_arr = 13;
ret_val__controller = 1;
ret_val__controller[0].int_state_arr = 0;
ret_val__controller[0].float_state_arr = 7;
ret_val__controller[0].output_arr = 3;

Other input values:
input__controller[0].input_arr[0] = -423.000000;
input__controller[0].float_state_arr[0] = -371.000000;
input__controller[0].float_state_arr[1] = -78.000000;
input__controller[0].float_state_arr[2] = 136.000000;
input__controller[0].float_state_arr[3] = 272.000000;
input__controller[0].float_state_arr[4] = -193.000000;
input__controller[0].float_state_arr[5] = -384.000000;
input__controller[0].float_state_arr[6] = -73.000000;
input__controller[0].x_arr[0] = -493.000000;
input__controller[0].x_arr[1] = 170.000000;
input__controller[0].x_arr[2] = -8.000000;
input__controller[0].x_arr[3] = -463.000000;
input__controller[0].x_arr[4] = -387.000000;
input__controller[0].x_arr[5] = -245.000000;
input__controller[0].x_arr[6] = 150.000000;
input__controller[0].x_arr[7] = -0.005508;
input__controller[0].x_arr[8] = -478.000000;
input__controller[0].x_arr[9] = 3.000000;
input__controller[0].x_arr[10] = -793.000000;
input__controller[0].x_arr[11] = 173.000000;
input__controller[0].x_arr[12] = -343.000000;
ret_val__controller[0].float_state_arr[0] = 397.000000;
ret_val__controller[0].float_state_arr[1] = -241.000000;
ret_val__controller[0].float_state_arr[2] = -268.000000;
ret_val__controller[0].float_state_arr[3] = -365.000000;
ret_val__controller[0].float_state_arr[4] = -94.000000;
ret_val__controller[0].float_state_arr[5] = -68.000000;
ret_val__controller[0].float_state_arr[6] = -139.000000;
ret_val__controller[0].output_arr[0] = 438.000000;
ret_val__controller[0].output_arr[1] = -491.000000;
ret_val__controller[0].output_arr[2] = -16.000000;

Result:
unknown

Path Covered :
afc.c
+140 -146 +148 +151 -158 +160 +162 -162b -182 +191 -205 -207


Path Predicate for case 91:
afc.c: +140 input[0].x_arr[10]=<-1.000000
afc.c: -146 (input[0].float_state_arr[0]+0.010000)<10.000000
afc.c: +148 ((unsigned char)input[0].float_state_arr[5])<>0
afc.c: +151 ((unsigned char)input[0].float_state_arr[4])<>0
afc.c: -158 input[0].x_arr[8]<50.000000
afc.c: +160 1<>0
afc.c: +162 1<>0
afc.c: -162b 0=0
afc.c: -182 1<>0
afc.c: +191 1<>0
afc.c: -205 ((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))/14.700000)=<1.660000
afc.c: -207 ((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))/14.700000)>=0.130000

Simplified Path Predicate for case 91:
input[0].x_arr[10]=<-1.000000 AND
(input[0].float_state_arr[0]+0.010000)<10.000000 AND
((unsigned char)input[0].float_state_arr[5])<>0 AND
((unsigned char)input[0].float_state_arr[4])<>0 AND
input[0].x_arr[8]<50.000000 AND
((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))/14.700000)=<1.660000 AND
((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))/14.700000)>=0.130000

Output Values for case 91: (Symbolic,Concrete)
return value = 0, 0
ret_val[0].float_state_arr[0] = (input[0].float_state_arr[0]+0.010000), -370.990000
ret_val[0].float_state_arr[1] = input[0].float_state_arr[1], -78.000000
ret_val[0].float_state_arr[2] = (input[0].float_state_arr[2]+(((input[0].x_arr[9]+-((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))))*0.413280)*0.010000)), 136.000000
ret_val[0].float_state_arr[3] = 1.000000, 1.000000
ret_val[0].float_state_arr[4] = 0.000000, 0.000000
ret_val[0].float_state_arr[5] = 1.000000, 1.000000
ret_val[0].float_state_arr[6] = input[0].float_state_arr[6], -73.000000
ret_val[0].output_arr[0] = ((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))/14.700000), 0.204082
ret_val[0].output_arr[1] = 1.000000, 1.000000
ret_val[0].output_arr[2] = 14.700000, 14.700000

to explore negation deepest unexplored condition of predicate,
Path Predicate Prefix to solve :
afc.c: +140 input[0].x_arr[10]=<-1.000000
afc.c: -146 (input[0].float_state_arr[0]+0.010000)<10.000000
afc.c: +148 ((unsigned char)input[0].float_state_arr[5])<>0
afc.c: +151 ((unsigned char)input[0].float_state_arr[4])<>0
afc.c: -158 input[0].x_arr[8]<50.000000
afc.c: +160 1<>0
afc.c: +162 1<>0
afc.c: -162b 0=0
afc.c: -182 1<>0
afc.c: -191 1=0
Path Prefix to cover :
afc.c
+140 -146 +148 +151 -158 +160 +162 -162b -182 -191
trivially infeasible

to explore negation deepest unexplored condition of predicate,
Path Predicate Prefix to solve :
afc.c: +140 input[0].x_arr[10]=<-1.000000
afc.c: -146 (input[0].float_state_arr[0]+0.010000)<10.000000
afc.c: +148 ((unsigned char)input[0].float_state_arr[5])<>0
afc.c: +151 ((unsigned char)input[0].float_state_arr[4])<>0
afc.c: -158 input[0].x_arr[8]<50.000000
afc.c: +160 1<>0
afc.c: +162 1<>0
afc.c: -162b 0=0
afc.c: +182 1=0
Path Prefix to cover :
afc.c
+140 -146 +148 +151 -158 +160 +162 -162b +182
trivially infeasible

to explore negation deepest unexplored condition of predicate,
Path Predicate Prefix to solve :
afc.c: +140 input[0].x_arr[10]=<-1.000000
afc.c: -146 (input[0].float_state_arr[0]+0.010000)<10.000000
afc.c: +148 ((unsigned char)input[0].float_state_arr[5])<>0
afc.c: +151 ((unsigned char)input[0].float_state_arr[4])<>0
afc.c: -158 input[0].x_arr[8]<50.000000
afc.c: +160 1<>0
afc.c: +162 1<>0
afc.c: +162b 0<>0
Path Prefix to cover :
afc.c
+140 -146 +148 +151 -158 +160 +162 +162b
trivially infeasible

to explore negation deepest unexplored condition of predicate,
Path Predicate Prefix to solve :
afc.c: +140 input[0].x_arr[10]=<-1.000000
afc.c: -146 (input[0].float_state_arr[0]+0.010000)<10.000000
afc.c: +148 ((unsigned char)input[0].float_state_arr[5])<>0
afc.c: +151 ((unsigned char)input[0].float_state_arr[4])<>0
afc.c: -158 input[0].x_arr[8]<50.000000
afc.c: +160 1<>0
afc.c: -162 1=0
Path Prefix to cover :
afc.c
+140 -146 +148 +151 -158 +160 -162
trivially infeasible

to explore negation deepest unexplored condition of predicate,
Path Predicate Prefix to solve :
afc.c: +140 input[0].x_arr[10]=<-1.000000
afc.c: -146 (input[0].float_state_arr[0]+0.010000)<10.000000
afc.c: +148 ((unsigned char)input[0].float_state_arr[5])<>0
afc.c: +151 ((unsigned char)input[0].float_state_arr[4])<>0
afc.c: -158 input[0].x_arr[8]<50.000000
afc.c: -160 1=0
Path Prefix to cover :
afc.c
+140 -146 +148 +151 -158 -160
trivially infeasible

to explore negation deepest unexplored condition of predicate,
Path Predicate Prefix to solve :
afc.c: +140 input[0].x_arr[10]=<-1.000000
afc.c: -146 (input[0].float_state_arr[0]+0.010000)<10.000000
afc.c: +148 ((unsigned char)input[0].float_state_arr[5])<>0
afc.c: +151 ((unsigned char)input[0].float_state_arr[4])<>0
afc.c: +158 input[0].x_arr[8]>=50.000000
Path Prefix to cover :
afc.c
+140 -146 +148 +151 +158


TEST CASE 92

Dimensions:
input__controller = 1;
input__controller[0].input_arr = 1;
input__controller[0].int_state_arr = 0;
input__controller[0].float_state_arr = 7;
input__controller[0].x_arr = 13;
ret_val__controller = 1;
ret_val__controller[0].int_state_arr = 0;
ret_val__controller[0].float_state_arr = 7;
ret_val__controller[0].output_arr = 3;

Other input values:
input__controller[0].input_arr[0] = -423.000000;
input__controller[0].float_state_arr[0] = -371.000000;
input__controller[0].float_state_arr[1] = -78.000000;
input__controller[0].float_state_arr[2] = -292.000000;
input__controller[0].float_state_arr[3] = 272.000000;
input__controller[0].float_state_arr[4] = -193.000000;
input__controller[0].float_state_arr[5] = -384.000000;
input__controller[0].float_state_arr[6] = -73.000000;
input__controller[0].x_arr[0] = -493.000000;
input__controller[0].x_arr[1] = 170.000000;
input__controller[0].x_arr[2] = -8.000000;
input__controller[0].x_arr[3] = -463.000000;
input__controller[0].x_arr[4] = -387.000000;
input__controller[0].x_arr[5] = -245.000000;
input__controller[0].x_arr[6] = 150.000000;
input__controller[0].x_arr[7] = -475.000000;
input__controller[0].x_arr[8] = 211.000000;
input__controller[0].x_arr[9] = -156.000000;
input__controller[0].x_arr[10] = -793.000000;
input__controller[0].x_arr[11] = 173.000000;
input__controller[0].x_arr[12] = -343.000000;
ret_val__controller[0].float_state_arr[0] = 397.000000;
ret_val__controller[0].float_state_arr[1] = -241.000000;
ret_val__controller[0].float_state_arr[2] = -268.000000;
ret_val__controller[0].float_state_arr[3] = -365.000000;
ret_val__controller[0].float_state_arr[4] = -94.000000;
ret_val__controller[0].float_state_arr[5] = -68.000000;
ret_val__controller[0].float_state_arr[6] = -139.000000;
ret_val__controller[0].output_arr[0] = 438.000000;
ret_val__controller[0].output_arr[1] = -491.000000;
ret_val__controller[0].output_arr[2] = -16.000000;

Result:
unknown

Path Covered :
afc.c
+140 -146 +148 +151 +158 +160 +162 +162b -182 +191 +205


Path Predicate for case 92:
afc.c: +140 input[0].x_arr[10]=<-1.000000
afc.c: -146 (input[0].float_state_arr[0]+0.010000)<10.000000
afc.c: +148 ((unsigned char)input[0].float_state_arr[5])<>0
afc.c: +151 ((unsigned char)input[0].float_state_arr[4])<>0
afc.c: +158 input[0].x_arr[8]>=50.000000
afc.c: +160 1<>0
afc.c: +162 1<>0
afc.c: +162b 1<>0
afc.c: -182 1<>0
afc.c: +191 1<>0
afc.c: +205 ((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))/12.500000)>1.660000

Simplified Path Predicate for case 92:
input[0].x_arr[10]=<-1.000000 AND
(input[0].float_state_arr[0]+0.010000)<10.000000 AND
((unsigned char)input[0].float_state_arr[5])<>0 AND
((unsigned char)input[0].float_state_arr[4])<>0 AND
input[0].x_arr[8]>=50.000000 AND
((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))/12.500000)>1.660000

Output Values for case 92: (Symbolic,Concrete)
return value = 0, 0
ret_val[0].float_state_arr[0] = (input[0].float_state_arr[0]+0.010000), -370.990000
ret_val[0].float_state_arr[1] = input[0].float_state_arr[1], -78.000000
ret_val[0].float_state_arr[2] = (input[0].float_state_arr[2]+(((input[0].x_arr[9]+-((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))))*0.413280)*0.010000)), -5957.592441
ret_val[0].float_state_arr[3] = 1.000000, 1.000000
ret_val[0].float_state_arr[4] = 1.000000, 1.000000
ret_val[0].float_state_arr[5] = 1.000000, 1.000000
ret_val[0].float_state_arr[6] = input[0].float_state_arr[6], -73.000000
ret_val[0].output_arr[0] = 1.660000, 1.660000
ret_val[0].output_arr[1] = 1.000000, 1.000000
ret_val[0].output_arr[2] = 12.500000, 12.500000

to explore negation deepest unexplored condition of predicate,
Path Predicate Prefix to solve :
afc.c: +140 input[0].x_arr[10]=<-1.000000
afc.c: -146 (input[0].float_state_arr[0]+0.010000)<10.000000
afc.c: +148 ((unsigned char)input[0].float_state_arr[5])<>0
afc.c: +151 ((unsigned char)input[0].float_state_arr[4])<>0
afc.c: +158 input[0].x_arr[8]>=50.000000
afc.c: +160 1<>0
afc.c: +162 1<>0
afc.c: +162b 1<>0
afc.c: -182 1<>0
afc.c: +191 1<>0
afc.c: -205 ((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))/12.500000)=<1.660000
Path Prefix to cover :
afc.c
+140 -146 +148 +151 +158 +160 +162 +162b -182 +191 -205


TEST CASE 93

Dimensions:
input__controller = 1;
input__controller[0].input_arr = 1;
input__controller[0].int_state_arr = 0;
input__controller[0].float_state_arr = 7;
input__controller[0].x_arr = 13;
ret_val__controller = 1;
ret_val__controller[0].int_state_arr = 0;
ret_val__controller[0].float_state_arr = 7;
ret_val__controller[0].output_arr = 3;

Other input values:
input__controller[0].input_arr[0] = -423.000000;
input__controller[0].float_state_arr[0] = -371.000000;
input__controller[0].float_state_arr[1] = -78.000000;
input__controller[0].float_state_arr[2] = 489.000000;
input__controller[0].float_state_arr[3] = 272.000000;
input__controller[0].float_state_arr[4] = -193.000000;
input__controller[0].float_state_arr[5] = -384.000000;
input__controller[0].float_state_arr[6] = -73.000000;
input__controller[0].x_arr[0] = -493.000000;
input__controller[0].x_arr[1] = 170.000000;
input__controller[0].x_arr[2] = -8.000000;
input__controller[0].x_arr[3] = -463.000000;
input__controller[0].x_arr[4] = -387.000000;
input__controller[0].x_arr[5] = -245.000000;
input__controller[0].x_arr[6] = 150.000000;
input__controller[0].x_arr[7] = 0.000000;
input__controller[0].x_arr[8] = 211.000000;
input__controller[0].x_arr[9] = -0.366000;
input__controller[0].x_arr[10] = -793.000000;
input__controller[0].x_arr[11] = 173.000000;
input__controller[0].x_arr[12] = -343.000000;
ret_val__controller[0].float_state_arr[0] = 397.000000;
ret_val__controller[0].float_state_arr[1] = -241.000000;
ret_val__controller[0].float_state_arr[2] = -268.000000;
ret_val__controller[0].float_state_arr[3] = -365.000000;
ret_val__controller[0].float_state_arr[4] = -94.000000;
ret_val__controller[0].float_state_arr[5] = -68.000000;
ret_val__controller[0].float_state_arr[6] = -139.000000;
ret_val__controller[0].output_arr[0] = 438.000000;
ret_val__controller[0].output_arr[1] = -491.000000;
ret_val__controller[0].output_arr[2] = -16.000000;

Result:
unknown

Path Covered :
afc.c
+140 -146 +148 +151 +158 +160 +162 +162b -182 +191 -205 +207


Path Predicate for case 93:
afc.c: +140 input[0].x_arr[10]=<-1.000000
afc.c: -146 (input[0].float_state_arr[0]+0.010000)<10.000000
afc.c: +148 ((unsigned char)input[0].float_state_arr[5])<>0
afc.c: +151 ((unsigned char)input[0].float_state_arr[4])<>0
afc.c: +158 input[0].x_arr[8]>=50.000000
afc.c: +160 1<>0
afc.c: +162 1<>0
afc.c: +162b 1<>0
afc.c: -182 1<>0
afc.c: +191 1<>0
afc.c: -205 ((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))/12.500000)=<1.660000
afc.c: +207 ((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))/12.500000)<0.130000

Simplified Path Predicate for case 93:
input[0].x_arr[10]=<-1.000000 AND
(input[0].float_state_arr[0]+0.010000)<10.000000 AND
((unsigned char)input[0].float_state_arr[5])<>0 AND
((unsigned char)input[0].float_state_arr[4])<>0 AND
input[0].x_arr[8]>=50.000000 AND
((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))/12.500000)=<1.660000 AND
((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))/12.500000)<0.130000

Output Values for case 93: (Symbolic,Concrete)
return value = 0, 0
ret_val[0].float_state_arr[0] = (input[0].float_state_arr[0]+0.010000), -370.990000
ret_val[0].float_state_arr[1] = input[0].float_state_arr[1], -78.000000
ret_val[0].float_state_arr[2] = (input[0].float_state_arr[2]+(((input[0].x_arr[9]+-((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))))*0.413280)*0.010000)), 489.000000
ret_val[0].float_state_arr[3] = 1.000000, 1.000000
ret_val[0].float_state_arr[4] = 1.000000, 1.000000
ret_val[0].float_state_arr[5] = 1.000000, 1.000000
ret_val[0].float_state_arr[6] = input[0].float_state_arr[6], -73.000000
ret_val[0].output_arr[0] = 0.130000, 0.130000
ret_val[0].output_arr[1] = 1.000000, 1.000000
ret_val[0].output_arr[2] = 12.500000, 12.500000

to explore negation deepest unexplored condition of predicate,
Path Predicate Prefix to solve :
afc.c: +140 input[0].x_arr[10]=<-1.000000
afc.c: -146 (input[0].float_state_arr[0]+0.010000)<10.000000
afc.c: +148 ((unsigned char)input[0].float_state_arr[5])<>0
afc.c: +151 ((unsigned char)input[0].float_state_arr[4])<>0
afc.c: +158 input[0].x_arr[8]>=50.000000
afc.c: +160 1<>0
afc.c: +162 1<>0
afc.c: +162b 1<>0
afc.c: -182 1<>0
afc.c: +191 1<>0
afc.c: -205 ((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))/12.500000)=<1.660000
afc.c: -207 ((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))/12.500000)>=0.130000
Path Prefix to cover :
afc.c
+140 -146 +148 +151 +158 +160 +162 +162b -182 +191 -205 -207


TEST CASE 94

Dimensions:
input__controller = 1;
input__controller[0].input_arr = 1;
input__controller[0].int_state_arr = 0;
input__controller[0].float_state_arr = 7;
input__controller[0].x_arr = 13;
ret_val__controller = 1;
ret_val__controller[0].int_state_arr = 0;
ret_val__controller[0].float_state_arr = 7;
ret_val__controller[0].output_arr = 3;

Other input values:
input__controller[0].input_arr[0] = -423.000000;
input__controller[0].float_state_arr[0] = -371.000000;
input__controller[0].float_state_arr[1] = -78.000000;
input__controller[0].float_state_arr[2] = 45.000000;
input__controller[0].float_state_arr[3] = 272.000000;
input__controller[0].float_state_arr[4] = -193.000000;
input__controller[0].float_state_arr[5] = -384.000000;
input__controller[0].float_state_arr[6] = -73.000000;
input__controller[0].x_arr[0] = -493.000000;
input__controller[0].x_arr[1] = 170.000000;
input__controller[0].x_arr[2] = -8.000000;
input__controller[0].x_arr[3] = -463.000000;
input__controller[0].x_arr[4] = -387.000000;
input__controller[0].x_arr[5] = -245.000000;
input__controller[0].x_arr[6] = 150.000000;
input__controller[0].x_arr[7] = 14267.277033;
input__controller[0].x_arr[8] = 211.000000;
input__controller[0].x_arr[9] = 11.000000;
input__controller[0].x_arr[10] = -793.000000;
input__controller[0].x_arr[11] = 173.000000;
input__controller[0].x_arr[12] = -343.000000;
ret_val__controller[0].float_state_arr[0] = 397.000000;
ret_val__controller[0].float_state_arr[1] = -241.000000;
ret_val__controller[0].float_state_arr[2] = -268.000000;
ret_val__controller[0].float_state_arr[3] = -365.000000;
ret_val__controller[0].float_state_arr[4] = -94.000000;
ret_val__controller[0].float_state_arr[5] = -68.000000;
ret_val__controller[0].float_state_arr[6] = -139.000000;
ret_val__controller[0].output_arr[0] = 438.000000;
ret_val__controller[0].output_arr[1] = -491.000000;
ret_val__controller[0].output_arr[2] = -16.000000;

Result:
unknown

Path Covered :
afc.c
+140 -146 +148 +151 +158 +160 +162 +162b -182 +191 -205 -207


Path Predicate for case 94:
afc.c: +140 input[0].x_arr[10]=<-1.000000
afc.c: -146 (input[0].float_state_arr[0]+0.010000)<10.000000
afc.c: +148 ((unsigned char)input[0].float_state_arr[5])<>0
afc.c: +151 ((unsigned char)input[0].float_state_arr[4])<>0
afc.c: +158 input[0].x_arr[8]>=50.000000
afc.c: +160 1<>0
afc.c: +162 1<>0
afc.c: +162b 1<>0
afc.c: -182 1<>0
afc.c: +191 1<>0
afc.c: -205 ((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))/12.500000)=<1.660000
afc.c: -207 ((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))/12.500000)>=0.130000

Simplified Path Predicate for case 94:
input[0].x_arr[10]=<-1.000000 AND
(input[0].float_state_arr[0]+0.010000)<10.000000 AND
((unsigned char)input[0].float_state_arr[5])<>0 AND
((unsigned char)input[0].float_state_arr[4])<>0 AND
input[0].x_arr[8]>=50.000000 AND
((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))/12.500000)=<1.660000 AND
((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))/12.500000)>=0.130000

Output Values for case 94: (Symbolic,Concrete)
return value = 0, 0
ret_val[0].float_state_arr[0] = (input[0].float_state_arr[0]+0.010000), -370.990000
ret_val[0].float_state_arr[1] = input[0].float_state_arr[1], -78.000000
ret_val[0].float_state_arr[2] = (input[0].float_state_arr[2]+(((input[0].x_arr[9]+-((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))))*0.413280)*0.010000)), 45.000000
ret_val[0].float_state_arr[3] = 1.000000, 1.000000
ret_val[0].float_state_arr[4] = 1.000000, 1.000000
ret_val[0].float_state_arr[5] = 1.000000, 1.000000
ret_val[0].float_state_arr[6] = input[0].float_state_arr[6], -73.000000
ret_val[0].output_arr[0] = ((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))/12.500000), 0.880000
ret_val[0].output_arr[1] = 1.000000, 1.000000
ret_val[0].output_arr[2] = 12.500000, 12.500000

to explore negation deepest unexplored condition of predicate,
Path Predicate Prefix to solve :
afc.c: +140 input[0].x_arr[10]=<-1.000000
afc.c: -146 (input[0].float_state_arr[0]+0.010000)<10.000000
afc.c: +148 ((unsigned char)input[0].float_state_arr[5])<>0
afc.c: +151 ((unsigned char)input[0].float_state_arr[4])<>0
afc.c: +158 input[0].x_arr[8]>=50.000000
afc.c: +160 1<>0
afc.c: +162 1<>0
afc.c: +162b 1<>0
afc.c: -182 1<>0
afc.c: -191 1=0
Path Prefix to cover :
afc.c
+140 -146 +148 +151 +158 +160 +162 +162b -182 -191
trivially infeasible

to explore negation deepest unexplored condition of predicate,
Path Predicate Prefix to solve :
afc.c: +140 input[0].x_arr[10]=<-1.000000
afc.c: -146 (input[0].float_state_arr[0]+0.010000)<10.000000
afc.c: +148 ((unsigned char)input[0].float_state_arr[5])<>0
afc.c: +151 ((unsigned char)input[0].float_state_arr[4])<>0
afc.c: +158 input[0].x_arr[8]>=50.000000
afc.c: +160 1<>0
afc.c: +162 1<>0
afc.c: +162b 1<>0
afc.c: +182 1=0
Path Prefix to cover :
afc.c
+140 -146 +148 +151 +158 +160 +162 +162b +182
trivially infeasible

to explore negation deepest unexplored condition of predicate,
Path Predicate Prefix to solve :
afc.c: +140 input[0].x_arr[10]=<-1.000000
afc.c: -146 (input[0].float_state_arr[0]+0.010000)<10.000000
afc.c: +148 ((unsigned char)input[0].float_state_arr[5])<>0
afc.c: +151 ((unsigned char)input[0].float_state_arr[4])<>0
afc.c: +158 input[0].x_arr[8]>=50.000000
afc.c: +160 1<>0
afc.c: +162 1<>0
afc.c: -162b 1=0
Path Prefix to cover :
afc.c
+140 -146 +148 +151 +158 +160 +162 -162b
trivially infeasible

to explore negation deepest unexplored condition of predicate,
Path Predicate Prefix to solve :
afc.c: +140 input[0].x_arr[10]=<-1.000000
afc.c: -146 (input[0].float_state_arr[0]+0.010000)<10.000000
afc.c: +148 ((unsigned char)input[0].float_state_arr[5])<>0
afc.c: +151 ((unsigned char)input[0].float_state_arr[4])<>0
afc.c: +158 input[0].x_arr[8]>=50.000000
afc.c: +160 1<>0
afc.c: -162 1=0
Path Prefix to cover :
afc.c
+140 -146 +148 +151 +158 +160 -162
trivially infeasible

to explore negation deepest unexplored condition of predicate,
Path Predicate Prefix to solve :
afc.c: +140 input[0].x_arr[10]=<-1.000000
afc.c: -146 (input[0].float_state_arr[0]+0.010000)<10.000000
afc.c: +148 ((unsigned char)input[0].float_state_arr[5])<>0
afc.c: +151 ((unsigned char)input[0].float_state_arr[4])<>0
afc.c: +158 input[0].x_arr[8]>=50.000000
afc.c: -160 1=0
Path Prefix to cover :
afc.c
+140 -146 +148 +151 +158 -160
trivially infeasible

to explore negation deepest unexplored condition of predicate,
Path Predicate Prefix to solve :
afc.c: +140 input[0].x_arr[10]=<-1.000000
afc.c: -146 (input[0].float_state_arr[0]+0.010000)<10.000000
afc.c: +148 ((unsigned char)input[0].float_state_arr[5])<>0
afc.c: -151 ((unsigned char)input[0].float_state_arr[4])=0
Path Prefix to cover :
afc.c
+140 -146 +148 -151


TEST CASE 95

Dimensions:
input__controller = 1;
input__controller[0].input_arr = 1;
input__controller[0].int_state_arr = 0;
input__controller[0].float_state_arr = 7;
input__controller[0].x_arr = 13;
ret_val__controller = 1;
ret_val__controller[0].int_state_arr = 0;
ret_val__controller[0].float_state_arr = 7;
ret_val__controller[0].output_arr = 3;

Other input values:
input__controller[0].input_arr[0] = -423.000000;
input__controller[0].float_state_arr[0] = -371.000000;
input__controller[0].float_state_arr[1] = -78.000000;
input__controller[0].float_state_arr[2] = -292.000000;
input__controller[0].float_state_arr[3] = 272.000000;
input__controller[0].float_state_arr[4] = 0.400000;
input__controller[0].float_state_arr[5] = -384.000000;
input__controller[0].float_state_arr[6] = -73.000000;
input__controller[0].x_arr[0] = -493.000000;
input__controller[0].x_arr[1] = 170.000000;
input__controller[0].x_arr[2] = -8.000000;
input__controller[0].x_arr[3] = -463.000000;
input__controller[0].x_arr[4] = -387.000000;
input__controller[0].x_arr[5] = -245.000000;
input__controller[0].x_arr[6] = 150.000000;
input__controller[0].x_arr[7] = -475.000000;
input__controller[0].x_arr[8] = -478.000000;
input__controller[0].x_arr[9] = -156.000000;
input__controller[0].x_arr[10] = -793.000000;
input__controller[0].x_arr[11] = 173.000000;
input__controller[0].x_arr[12] = -343.000000;
ret_val__controller[0].float_state_arr[0] = 397.000000;
ret_val__controller[0].float_state_arr[1] = -241.000000;
ret_val__controller[0].float_state_arr[2] = -268.000000;
ret_val__controller[0].float_state_arr[3] = -365.000000;
ret_val__controller[0].float_state_arr[4] = -94.000000;
ret_val__controller[0].float_state_arr[5] = -68.000000;
ret_val__controller[0].float_state_arr[6] = -139.000000;
ret_val__controller[0].output_arr[0] = 438.000000;
ret_val__controller[0].output_arr[1] = -491.000000;
ret_val__controller[0].output_arr[2] = -16.000000;

Result:
unknown

Path Covered :
afc.c
+140 -146 +148 -151 -158 +160 +162 -162b -182 +191 +205


Path Predicate for case 95:
afc.c: +140 input[0].x_arr[10]=<-1.000000
afc.c: -146 (input[0].float_state_arr[0]+0.010000)<10.000000
afc.c: +148 ((unsigned char)input[0].float_state_arr[5])<>0
afc.c: -151 ((unsigned char)input[0].float_state_arr[4])=0
afc.c: -158 input[0].x_arr[8]<70.000000
afc.c: +160 1<>0
afc.c: +162 1<>0
afc.c: -162b 0=0
afc.c: -182 1<>0
afc.c: +191 1<>0
afc.c: +205 ((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))/14.700000)>1.660000

Simplified Path Predicate for case 95:
input[0].x_arr[10]=<-1.000000 AND
(input[0].float_state_arr[0]+0.010000)<10.000000 AND
((unsigned char)input[0].float_state_arr[5])<>0 AND
((unsigned char)input[0].float_state_arr[4])=0 AND
input[0].x_arr[8]<70.000000 AND
((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))/14.700000)>1.660000

Output Values for case 95: (Symbolic,Concrete)
return value = 0, 0
ret_val[0].float_state_arr[0] = (input[0].float_state_arr[0]+0.010000), -370.990000
ret_val[0].float_state_arr[1] = input[0].float_state_arr[1], -78.000000
ret_val[0].float_state_arr[2] = (input[0].float_state_arr[2]+(((input[0].x_arr[9]+-((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))))*0.413280)*0.010000)), -5957.592441
ret_val[0].float_state_arr[3] = 1.000000, 1.000000
ret_val[0].float_state_arr[4] = 0.000000, 0.000000
ret_val[0].float_state_arr[5] = 1.000000, 1.000000
ret_val[0].float_state_arr[6] = input[0].float_state_arr[6], -73.000000
ret_val[0].output_arr[0] = 1.660000, 1.660000
ret_val[0].output_arr[1] = 1.000000, 1.000000
ret_val[0].output_arr[2] = 14.700000, 14.700000

to explore negation deepest unexplored condition of predicate,
Path Predicate Prefix to solve :
afc.c: +140 input[0].x_arr[10]=<-1.000000
afc.c: -146 (input[0].float_state_arr[0]+0.010000)<10.000000
afc.c: +148 ((unsigned char)input[0].float_state_arr[5])<>0
afc.c: -151 ((unsigned char)input[0].float_state_arr[4])=0
afc.c: -158 input[0].x_arr[8]<70.000000
afc.c: +160 1<>0
afc.c: +162 1<>0
afc.c: -162b 0=0
afc.c: -182 1<>0
afc.c: +191 1<>0
afc.c: -205 ((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))/14.700000)=<1.660000
Path Prefix to cover :
afc.c
+140 -146 +148 -151 -158 +160 +162 -162b -182 +191 -205


TEST CASE 96

Dimensions:
input__controller = 1;
input__controller[0].input_arr = 1;
input__controller[0].int_state_arr = 0;
input__controller[0].float_state_arr = 7;
input__controller[0].x_arr = 13;
ret_val__controller = 1;
ret_val__controller[0].int_state_arr = 0;
ret_val__controller[0].float_state_arr = 7;
ret_val__controller[0].output_arr = 3;

Other input values:
input__controller[0].input_arr[0] = -423.000000;
input__controller[0].float_state_arr[0] = -371.000000;
input__controller[0].float_state_arr[1] = -78.000000;
input__controller[0].float_state_arr[2] = -330.000000;
input__controller[0].float_state_arr[3] = 272.000000;
input__controller[0].float_state_arr[4] = 0.400000;
input__controller[0].float_state_arr[5] = -384.000000;
input__controller[0].float_state_arr[6] = -73.000000;
input__controller[0].x_arr[0] = -493.000000;
input__controller[0].x_arr[1] = 170.000000;
input__controller[0].x_arr[2] = -8.000000;
input__controller[0].x_arr[3] = -463.000000;
input__controller[0].x_arr[4] = -387.000000;
input__controller[0].x_arr[5] = -245.000000;
input__controller[0].x_arr[6] = 150.000000;
input__controller[0].x_arr[7] = 0.000000;
input__controller[0].x_arr[8] = -478.000000;
input__controller[0].x_arr[9] = -0.366000;
input__controller[0].x_arr[10] = -793.000000;
input__controller[0].x_arr[11] = 173.000000;
input__controller[0].x_arr[12] = -343.000000;
ret_val__controller[0].float_state_arr[0] = 397.000000;
ret_val__controller[0].float_state_arr[1] = -241.000000;
ret_val__controller[0].float_state_arr[2] = -268.000000;
ret_val__controller[0].float_state_arr[3] = -365.000000;
ret_val__controller[0].float_state_arr[4] = -94.000000;
ret_val__controller[0].float_state_arr[5] = -68.000000;
ret_val__controller[0].float_state_arr[6] = -139.000000;
ret_val__controller[0].output_arr[0] = 438.000000;
ret_val__controller[0].output_arr[1] = -491.000000;
ret_val__controller[0].output_arr[2] = -16.000000;

Result:
unknown

Path Covered :
afc.c
+140 -146 +148 -151 -158 +160 +162 -162b -182 +191 -205 +207


Path Predicate for case 96:
afc.c: +140 input[0].x_arr[10]=<-1.000000
afc.c: -146 (input[0].float_state_arr[0]+0.010000)<10.000000
afc.c: +148 ((unsigned char)input[0].float_state_arr[5])<>0
afc.c: -151 ((unsigned char)input[0].float_state_arr[4])=0
afc.c: -158 input[0].x_arr[8]<70.000000
afc.c: +160 1<>0
afc.c: +162 1<>0
afc.c: -162b 0=0
afc.c: -182 1<>0
afc.c: +191 1<>0
afc.c: -205 ((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))/14.700000)=<1.660000
afc.c: +207 ((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))/14.700000)<0.130000

Simplified Path Predicate for case 96:
input[0].x_arr[10]=<-1.000000 AND
(input[0].float_state_arr[0]+0.010000)<10.000000 AND
((unsigned char)input[0].float_state_arr[5])<>0 AND
((unsigned char)input[0].float_state_arr[4])=0 AND
input[0].x_arr[8]<70.000000 AND
((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))/14.700000)=<1.660000 AND
((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))/14.700000)<0.130000

Output Values for case 96: (Symbolic,Concrete)
return value = 0, 0
ret_val[0].float_state_arr[0] = (input[0].float_state_arr[0]+0.010000), -370.990000
ret_val[0].float_state_arr[1] = input[0].float_state_arr[1], -78.000000
ret_val[0].float_state_arr[2] = (input[0].float_state_arr[2]+(((input[0].x_arr[9]+-((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))))*0.413280)*0.010000)), -330.000000
ret_val[0].float_state_arr[3] = 1.000000, 1.000000
ret_val[0].float_state_arr[4] = 0.000000, 0.000000
ret_val[0].float_state_arr[5] = 1.000000, 1.000000
ret_val[0].float_state_arr[6] = input[0].float_state_arr[6], -73.000000
ret_val[0].output_arr[0] = 0.130000, 0.130000
ret_val[0].output_arr[1] = 1.000000, 1.000000
ret_val[0].output_arr[2] = 14.700000, 14.700000

to explore negation deepest unexplored condition of predicate,
Path Predicate Prefix to solve :
afc.c: +140 input[0].x_arr[10]=<-1.000000
afc.c: -146 (input[0].float_state_arr[0]+0.010000)<10.000000
afc.c: +148 ((unsigned char)input[0].float_state_arr[5])<>0
afc.c: -151 ((unsigned char)input[0].float_state_arr[4])=0
afc.c: -158 input[0].x_arr[8]<70.000000
afc.c: +160 1<>0
afc.c: +162 1<>0
afc.c: -162b 0=0
afc.c: -182 1<>0
afc.c: +191 1<>0
afc.c: -205 ((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))/14.700000)=<1.660000
afc.c: -207 ((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))/14.700000)>=0.130000
Path Prefix to cover :
afc.c
+140 -146 +148 -151 -158 +160 +162 -162b -182 +191 -205 -207


TEST CASE 97

Dimensions:
input__controller = 1;
input__controller[0].input_arr = 1;
input__controller[0].int_state_arr = 0;
input__controller[0].float_state_arr = 7;
input__controller[0].x_arr = 13;
ret_val__controller = 1;
ret_val__controller[0].int_state_arr = 0;
ret_val__controller[0].float_state_arr = 7;
ret_val__controller[0].output_arr = 3;

Other input values:
input__controller[0].input_arr[0] = -423.000000;
input__controller[0].float_state_arr[0] = -371.000000;
input__controller[0].float_state_arr[1] = -78.000000;
input__controller[0].float_state_arr[2] = 126.000000;
input__controller[0].float_state_arr[3] = 272.000000;
input__controller[0].float_state_arr[4] = 0.400000;
input__controller[0].float_state_arr[5] = -384.000000;
input__controller[0].float_state_arr[6] = -73.000000;
input__controller[0].x_arr[0] = -493.000000;
input__controller[0].x_arr[1] = 170.000000;
input__controller[0].x_arr[2] = -8.000000;
input__controller[0].x_arr[3] = -463.000000;
input__controller[0].x_arr[4] = -387.000000;
input__controller[0].x_arr[5] = -245.000000;
input__controller[0].x_arr[6] = 150.000000;
input__controller[0].x_arr[7] = 41564.117884;
input__controller[0].x_arr[8] = -478.000000;
input__controller[0].x_arr[9] = 9.000000;
input__controller[0].x_arr[10] = -793.000000;
input__controller[0].x_arr[11] = 173.000000;
input__controller[0].x_arr[12] = -343.000000;
ret_val__controller[0].float_state_arr[0] = 397.000000;
ret_val__controller[0].float_state_arr[1] = -241.000000;
ret_val__controller[0].float_state_arr[2] = -268.000000;
ret_val__controller[0].float_state_arr[3] = -365.000000;
ret_val__controller[0].float_state_arr[4] = -94.000000;
ret_val__controller[0].float_state_arr[5] = -68.000000;
ret_val__controller[0].float_state_arr[6] = -139.000000;
ret_val__controller[0].output_arr[0] = 438.000000;
ret_val__controller[0].output_arr[1] = -491.000000;
ret_val__controller[0].output_arr[2] = -16.000000;

Result:
unknown

Path Covered :
afc.c
+140 -146 +148 -151 -158 +160 +162 -162b -182 +191 -205 -207


Path Predicate for case 97:
afc.c: +140 input[0].x_arr[10]=<-1.000000
afc.c: -146 (input[0].float_state_arr[0]+0.010000)<10.000000
afc.c: +148 ((unsigned char)input[0].float_state_arr[5])<>0
afc.c: -151 ((unsigned char)input[0].float_state_arr[4])=0
afc.c: -158 input[0].x_arr[8]<70.000000
afc.c: +160 1<>0
afc.c: +162 1<>0
afc.c: -162b 0=0
afc.c: -182 1<>0
afc.c: +191 1<>0
afc.c: -205 ((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))/14.700000)=<1.660000
afc.c: -207 ((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))/14.700000)>=0.130000

Simplified Path Predicate for case 97:
input[0].x_arr[10]=<-1.000000 AND
(input[0].float_state_arr[0]+0.010000)<10.000000 AND
((unsigned char)input[0].float_state_arr[5])<>0 AND
((unsigned char)input[0].float_state_arr[4])=0 AND
input[0].x_arr[8]<70.000000 AND
((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))/14.700000)=<1.660000 AND
((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))/14.700000)>=0.130000

Output Values for case 97: (Symbolic,Concrete)
return value = 0, 0
ret_val[0].float_state_arr[0] = (input[0].float_state_arr[0]+0.010000), -370.990000
ret_val[0].float_state_arr[1] = input[0].float_state_arr[1], -78.000000
ret_val[0].float_state_arr[2] = (input[0].float_state_arr[2]+(((input[0].x_arr[9]+-((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))))*0.413280)*0.010000)), 126.000000
ret_val[0].float_state_arr[3] = 1.000000, 1.000000
ret_val[0].float_state_arr[4] = 0.000000, 0.000000
ret_val[0].float_state_arr[5] = 1.000000, 1.000000
ret_val[0].float_state_arr[6] = input[0].float_state_arr[6], -73.000000
ret_val[0].output_arr[0] = ((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))/14.700000), 0.612245
ret_val[0].output_arr[1] = 1.000000, 1.000000
ret_val[0].output_arr[2] = 14.700000, 14.700000

to explore negation deepest unexplored condition of predicate,
Path Predicate Prefix to solve :
afc.c: +140 input[0].x_arr[10]=<-1.000000
afc.c: -146 (input[0].float_state_arr[0]+0.010000)<10.000000
afc.c: +148 ((unsigned char)input[0].float_state_arr[5])<>0
afc.c: -151 ((unsigned char)input[0].float_state_arr[4])=0
afc.c: -158 input[0].x_arr[8]<70.000000
afc.c: +160 1<>0
afc.c: +162 1<>0
afc.c: -162b 0=0
afc.c: -182 1<>0
afc.c: -191 1=0
Path Prefix to cover :
afc.c
+140 -146 +148 -151 -158 +160 +162 -162b -182 -191
trivially infeasible

to explore negation deepest unexplored condition of predicate,
Path Predicate Prefix to solve :
afc.c: +140 input[0].x_arr[10]=<-1.000000
afc.c: -146 (input[0].float_state_arr[0]+0.010000)<10.000000
afc.c: +148 ((unsigned char)input[0].float_state_arr[5])<>0
afc.c: -151 ((unsigned char)input[0].float_state_arr[4])=0
afc.c: -158 input[0].x_arr[8]<70.000000
afc.c: +160 1<>0
afc.c: +162 1<>0
afc.c: -162b 0=0
afc.c: +182 1=0
Path Prefix to cover :
afc.c
+140 -146 +148 -151 -158 +160 +162 -162b +182
trivially infeasible

to explore negation deepest unexplored condition of predicate,
Path Predicate Prefix to solve :
afc.c: +140 input[0].x_arr[10]=<-1.000000
afc.c: -146 (input[0].float_state_arr[0]+0.010000)<10.000000
afc.c: +148 ((unsigned char)input[0].float_state_arr[5])<>0
afc.c: -151 ((unsigned char)input[0].float_state_arr[4])=0
afc.c: -158 input[0].x_arr[8]<70.000000
afc.c: +160 1<>0
afc.c: +162 1<>0
afc.c: +162b 0<>0
Path Prefix to cover :
afc.c
+140 -146 +148 -151 -158 +160 +162 +162b
trivially infeasible

to explore negation deepest unexplored condition of predicate,
Path Predicate Prefix to solve :
afc.c: +140 input[0].x_arr[10]=<-1.000000
afc.c: -146 (input[0].float_state_arr[0]+0.010000)<10.000000
afc.c: +148 ((unsigned char)input[0].float_state_arr[5])<>0
afc.c: -151 ((unsigned char)input[0].float_state_arr[4])=0
afc.c: -158 input[0].x_arr[8]<70.000000
afc.c: +160 1<>0
afc.c: -162 1=0
Path Prefix to cover :
afc.c
+140 -146 +148 -151 -158 +160 -162
trivially infeasible

to explore negation deepest unexplored condition of predicate,
Path Predicate Prefix to solve :
afc.c: +140 input[0].x_arr[10]=<-1.000000
afc.c: -146 (input[0].float_state_arr[0]+0.010000)<10.000000
afc.c: +148 ((unsigned char)input[0].float_state_arr[5])<>0
afc.c: -151 ((unsigned char)input[0].float_state_arr[4])=0
afc.c: -158 input[0].x_arr[8]<70.000000
afc.c: -160 1=0
Path Prefix to cover :
afc.c
+140 -146 +148 -151 -158 -160
trivially infeasible

to explore negation deepest unexplored condition of predicate,
Path Predicate Prefix to solve :
afc.c: +140 input[0].x_arr[10]=<-1.000000
afc.c: -146 (input[0].float_state_arr[0]+0.010000)<10.000000
afc.c: +148 ((unsigned char)input[0].float_state_arr[5])<>0
afc.c: -151 ((unsigned char)input[0].float_state_arr[4])=0
afc.c: +158 input[0].x_arr[8]>=70.000000
Path Prefix to cover :
afc.c
+140 -146 +148 -151 +158


TEST CASE 98

Dimensions:
input__controller = 1;
input__controller[0].input_arr = 1;
input__controller[0].int_state_arr = 0;
input__controller[0].float_state_arr = 7;
input__controller[0].x_arr = 13;
ret_val__controller = 1;
ret_val__controller[0].int_state_arr = 0;
ret_val__controller[0].float_state_arr = 7;
ret_val__controller[0].output_arr = 3;

Other input values:
input__controller[0].input_arr[0] = -423.000000;
input__controller[0].float_state_arr[0] = -371.000000;
input__controller[0].float_state_arr[1] = -78.000000;
input__controller[0].float_state_arr[2] = -292.000000;
input__controller[0].float_state_arr[3] = 272.000000;
input__controller[0].float_state_arr[4] = 0.400000;
input__controller[0].float_state_arr[5] = -384.000000;
input__controller[0].float_state_arr[6] = -73.000000;
input__controller[0].x_arr[0] = -493.000000;
input__controller[0].x_arr[1] = 170.000000;
input__controller[0].x_arr[2] = -8.000000;
input__controller[0].x_arr[3] = -463.000000;
input__controller[0].x_arr[4] = -387.000000;
input__controller[0].x_arr[5] = -245.000000;
input__controller[0].x_arr[6] = 150.000000;
input__controller[0].x_arr[7] = -475.000000;
input__controller[0].x_arr[8] = 707.000000;
input__controller[0].x_arr[9] = -156.000000;
input__controller[0].x_arr[10] = -793.000000;
input__controller[0].x_arr[11] = 173.000000;
input__controller[0].x_arr[12] = -343.000000;
ret_val__controller[0].float_state_arr[0] = 397.000000;
ret_val__controller[0].float_state_arr[1] = -241.000000;
ret_val__controller[0].float_state_arr[2] = -268.000000;
ret_val__controller[0].float_state_arr[3] = -365.000000;
ret_val__controller[0].float_state_arr[4] = -94.000000;
ret_val__controller[0].float_state_arr[5] = -68.000000;
ret_val__controller[0].float_state_arr[6] = -139.000000;
ret_val__controller[0].output_arr[0] = 438.000000;
ret_val__controller[0].output_arr[1] = -491.000000;
ret_val__controller[0].output_arr[2] = -16.000000;

Result:
unknown

Path Covered :
afc.c
+140 -146 +148 -151 +158 +160 +162 +162b -182 +191 +205


Path Predicate for case 98:
afc.c: +140 input[0].x_arr[10]=<-1.000000
afc.c: -146 (input[0].float_state_arr[0]+0.010000)<10.000000
afc.c: +148 ((unsigned char)input[0].float_state_arr[5])<>0
afc.c: -151 ((unsigned char)input[0].float_state_arr[4])=0
afc.c: +158 input[0].x_arr[8]>=70.000000
afc.c: +160 1<>0
afc.c: +162 1<>0
afc.c: +162b 1<>0
afc.c: -182 1<>0
afc.c: +191 1<>0
afc.c: +205 ((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))/12.500000)>1.660000

Simplified Path Predicate for case 98:
input[0].x_arr[10]=<-1.000000 AND
(input[0].float_state_arr[0]+0.010000)<10.000000 AND
((unsigned char)input[0].float_state_arr[5])<>0 AND
((unsigned char)input[0].float_state_arr[4])=0 AND
input[0].x_arr[8]>=70.000000 AND
((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))/12.500000)>1.660000

Output Values for case 98: (Symbolic,Concrete)
return value = 0, 0
ret_val[0].float_state_arr[0] = (input[0].float_state_arr[0]+0.010000), -370.990000
ret_val[0].float_state_arr[1] = input[0].float_state_arr[1], -78.000000
ret_val[0].float_state_arr[2] = (input[0].float_state_arr[2]+(((input[0].x_arr[9]+-((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))))*0.413280)*0.010000)), -5957.592441
ret_val[0].float_state_arr[3] = 1.000000, 1.000000
ret_val[0].float_state_arr[4] = 1.000000, 1.000000
ret_val[0].float_state_arr[5] = 1.000000, 1.000000
ret_val[0].float_state_arr[6] = input[0].float_state_arr[6], -73.000000
ret_val[0].output_arr[0] = 1.660000, 1.660000
ret_val[0].output_arr[1] = 1.000000, 1.000000
ret_val[0].output_arr[2] = 12.500000, 12.500000

to explore negation deepest unexplored condition of predicate,
Path Predicate Prefix to solve :
afc.c: +140 input[0].x_arr[10]=<-1.000000
afc.c: -146 (input[0].float_state_arr[0]+0.010000)<10.000000
afc.c: +148 ((unsigned char)input[0].float_state_arr[5])<>0
afc.c: -151 ((unsigned char)input[0].float_state_arr[4])=0
afc.c: +158 input[0].x_arr[8]>=70.000000
afc.c: +160 1<>0
afc.c: +162 1<>0
afc.c: +162b 1<>0
afc.c: -182 1<>0
afc.c: +191 1<>0
afc.c: -205 ((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))/12.500000)=<1.660000
Path Prefix to cover :
afc.c
+140 -146 +148 -151 +158 +160 +162 +162b -182 +191 -205


TEST CASE 99

Dimensions:
input__controller = 1;
input__controller[0].input_arr = 1;
input__controller[0].int_state_arr = 0;
input__controller[0].float_state_arr = 7;
input__controller[0].x_arr = 13;
ret_val__controller = 1;
ret_val__controller[0].int_state_arr = 0;
ret_val__controller[0].float_state_arr = 7;
ret_val__controller[0].output_arr = 3;

Other input values:
input__controller[0].input_arr[0] = -423.000000;
input__controller[0].float_state_arr[0] = -371.000000;
input__controller[0].float_state_arr[1] = -78.000000;
input__controller[0].float_state_arr[2] = 368.000000;
input__controller[0].float_state_arr[3] = 272.000000;
input__controller[0].float_state_arr[4] = 0.400000;
input__controller[0].float_state_arr[5] = -384.000000;
input__controller[0].float_state_arr[6] = -73.000000;
input__controller[0].x_arr[0] = -493.000000;
input__controller[0].x_arr[1] = 170.000000;
input__controller[0].x_arr[2] = -8.000000;
input__controller[0].x_arr[3] = -463.000000;
input__controller[0].x_arr[4] = -387.000000;
input__controller[0].x_arr[5] = -245.000000;
input__controller[0].x_arr[6] = 150.000000;
input__controller[0].x_arr[7] = 0.000000;
input__controller[0].x_arr[8] = 707.000000;
input__controller[0].x_arr[9] = -0.366000;
input__controller[0].x_arr[10] = -793.000000;
input__controller[0].x_arr[11] = 173.000000;
input__controller[0].x_arr[12] = -343.000000;
ret_val__controller[0].float_state_arr[0] = 397.000000;
ret_val__controller[0].float_state_arr[1] = -241.000000;
ret_val__controller[0].float_state_arr[2] = -268.000000;
ret_val__controller[0].float_state_arr[3] = -365.000000;
ret_val__controller[0].float_state_arr[4] = -94.000000;
ret_val__controller[0].float_state_arr[5] = -68.000000;
ret_val__controller[0].float_state_arr[6] = -139.000000;
ret_val__controller[0].output_arr[0] = 438.000000;
ret_val__controller[0].output_arr[1] = -491.000000;
ret_val__controller[0].output_arr[2] = -16.000000;

Result:
unknown

Path Covered :
afc.c
+140 -146 +148 -151 +158 +160 +162 +162b -182 +191 -205 +207


Path Predicate for case 99:
afc.c: +140 input[0].x_arr[10]=<-1.000000
afc.c: -146 (input[0].float_state_arr[0]+0.010000)<10.000000
afc.c: +148 ((unsigned char)input[0].float_state_arr[5])<>0
afc.c: -151 ((unsigned char)input[0].float_state_arr[4])=0
afc.c: +158 input[0].x_arr[8]>=70.000000
afc.c: +160 1<>0
afc.c: +162 1<>0
afc.c: +162b 1<>0
afc.c: -182 1<>0
afc.c: +191 1<>0
afc.c: -205 ((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))/12.500000)=<1.660000
afc.c: +207 ((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))/12.500000)<0.130000

Simplified Path Predicate for case 99:
input[0].x_arr[10]=<-1.000000 AND
(input[0].float_state_arr[0]+0.010000)<10.000000 AND
((unsigned char)input[0].float_state_arr[5])<>0 AND
((unsigned char)input[0].float_state_arr[4])=0 AND
input[0].x_arr[8]>=70.000000 AND
((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))/12.500000)=<1.660000 AND
((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))/12.500000)<0.130000

Output Values for case 99: (Symbolic,Concrete)
return value = 0, 0
ret_val[0].float_state_arr[0] = (input[0].float_state_arr[0]+0.010000), -370.990000
ret_val[0].float_state_arr[1] = input[0].float_state_arr[1], -78.000000
ret_val[0].float_state_arr[2] = (input[0].float_state_arr[2]+(((input[0].x_arr[9]+-((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))))*0.413280)*0.010000)), 368.000000
ret_val[0].float_state_arr[3] = 1.000000, 1.000000
ret_val[0].float_state_arr[4] = 1.000000, 1.000000
ret_val[0].float_state_arr[5] = 1.000000, 1.000000
ret_val[0].float_state_arr[6] = input[0].float_state_arr[6], -73.000000
ret_val[0].output_arr[0] = 0.130000, 0.130000
ret_val[0].output_arr[1] = 1.000000, 1.000000
ret_val[0].output_arr[2] = 12.500000, 12.500000

to explore negation deepest unexplored condition of predicate,
Path Predicate Prefix to solve :
afc.c: +140 input[0].x_arr[10]=<-1.000000
afc.c: -146 (input[0].float_state_arr[0]+0.010000)<10.000000
afc.c: +148 ((unsigned char)input[0].float_state_arr[5])<>0
afc.c: -151 ((unsigned char)input[0].float_state_arr[4])=0
afc.c: +158 input[0].x_arr[8]>=70.000000
afc.c: +160 1<>0
afc.c: +162 1<>0
afc.c: +162b 1<>0
afc.c: -182 1<>0
afc.c: +191 1<>0
afc.c: -205 ((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))/12.500000)=<1.660000
afc.c: -207 ((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))/12.500000)>=0.130000
Path Prefix to cover :
afc.c
+140 -146 +148 -151 +158 +160 +162 +162b -182 +191 -205 -207


TEST CASE 100

Dimensions:
input__controller = 1;
input__controller[0].input_arr = 1;
input__controller[0].int_state_arr = 0;
input__controller[0].float_state_arr = 7;
input__controller[0].x_arr = 13;
ret_val__controller = 1;
ret_val__controller[0].int_state_arr = 0;
ret_val__controller[0].float_state_arr = 7;
ret_val__controller[0].output_arr = 3;

Other input values:
input__controller[0].input_arr[0] = -423.000000;
input__controller[0].float_state_arr[0] = -371.000000;
input__controller[0].float_state_arr[1] = -78.000000;
input__controller[0].float_state_arr[2] = -326.000000;
input__controller[0].float_state_arr[3] = 272.000000;
input__controller[0].float_state_arr[4] = 0.400000;
input__controller[0].float_state_arr[5] = -384.000000;
input__controller[0].float_state_arr[6] = -73.000000;
input__controller[0].x_arr[0] = -493.000000;
input__controller[0].x_arr[1] = 170.000000;
input__controller[0].x_arr[2] = -8.000000;
input__controller[0].x_arr[3] = -463.000000;
input__controller[0].x_arr[4] = -387.000000;
input__controller[0].x_arr[5] = -245.000000;
input__controller[0].x_arr[6] = 150.000000;
input__controller[0].x_arr[7] = -0.005640;
input__controller[0].x_arr[8] = 707.000000;
input__controller[0].x_arr[9] = 20.000000;
input__controller[0].x_arr[10] = -793.000000;
input__controller[0].x_arr[11] = 173.000000;
input__controller[0].x_arr[12] = -343.000000;
ret_val__controller[0].float_state_arr[0] = 397.000000;
ret_val__controller[0].float_state_arr[1] = -241.000000;
ret_val__controller[0].float_state_arr[2] = -268.000000;
ret_val__controller[0].float_state_arr[3] = -365.000000;
ret_val__controller[0].float_state_arr[4] = -94.000000;
ret_val__controller[0].float_state_arr[5] = -68.000000;
ret_val__controller[0].float_state_arr[6] = -139.000000;
ret_val__controller[0].output_arr[0] = 438.000000;
ret_val__controller[0].output_arr[1] = -491.000000;
ret_val__controller[0].output_arr[2] = -16.000000;

Result:
unknown

Path Covered :
afc.c
+140 -146 +148 -151 +158 +160 +162 +162b -182 +191 -205 -207


Path Predicate for case 100:
afc.c: +140 input[0].x_arr[10]=<-1.000000
afc.c: -146 (input[0].float_state_arr[0]+0.010000)<10.000000
afc.c: +148 ((unsigned char)input[0].float_state_arr[5])<>0
afc.c: -151 ((unsigned char)input[0].float_state_arr[4])=0
afc.c: +158 input[0].x_arr[8]>=70.000000
afc.c: +160 1<>0
afc.c: +162 1<>0
afc.c: +162b 1<>0
afc.c: -182 1<>0
afc.c: +191 1<>0
afc.c: -205 ((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))/12.500000)=<1.660000
afc.c: -207 ((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))/12.500000)>=0.130000

Simplified Path Predicate for case 100:
input[0].x_arr[10]=<-1.000000 AND
(input[0].float_state_arr[0]+0.010000)<10.000000 AND
((unsigned char)input[0].float_state_arr[5])<>0 AND
((unsigned char)input[0].float_state_arr[4])=0 AND
input[0].x_arr[8]>=70.000000 AND
((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))/12.500000)=<1.660000 AND
((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))/12.500000)>=0.130000

Output Values for case 100: (Symbolic,Concrete)
return value = 0, 0
ret_val[0].float_state_arr[0] = (input[0].float_state_arr[0]+0.010000), -370.990000
ret_val[0].float_state_arr[1] = input[0].float_state_arr[1], -78.000000
ret_val[0].float_state_arr[2] = (input[0].float_state_arr[2]+(((input[0].x_arr[9]+-((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))))*0.413280)*0.010000)), -326.000000
ret_val[0].float_state_arr[3] = 1.000000, 1.000000
ret_val[0].float_state_arr[4] = 1.000000, 1.000000
ret_val[0].float_state_arr[5] = 1.000000, 1.000000
ret_val[0].float_state_arr[6] = input[0].float_state_arr[6], -73.000000
ret_val[0].output_arr[0] = ((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))/12.500000), 1.600000
ret_val[0].output_arr[1] = 1.000000, 1.000000
ret_val[0].output_arr[2] = 12.500000, 12.500000

to explore negation deepest unexplored condition of predicate,
Path Predicate Prefix to solve :
afc.c: +140 input[0].x_arr[10]=<-1.000000
afc.c: -146 (input[0].float_state_arr[0]+0.010000)<10.000000
afc.c: +148 ((unsigned char)input[0].float_state_arr[5])<>0
afc.c: -151 ((unsigned char)input[0].float_state_arr[4])=0
afc.c: +158 input[0].x_arr[8]>=70.000000
afc.c: +160 1<>0
afc.c: +162 1<>0
afc.c: +162b 1<>0
afc.c: -182 1<>0
afc.c: -191 1=0
Path Prefix to cover :
afc.c
+140 -146 +148 -151 +158 +160 +162 +162b -182 -191
trivially infeasible

to explore negation deepest unexplored condition of predicate,
Path Predicate Prefix to solve :
afc.c: +140 input[0].x_arr[10]=<-1.000000
afc.c: -146 (input[0].float_state_arr[0]+0.010000)<10.000000
afc.c: +148 ((unsigned char)input[0].float_state_arr[5])<>0
afc.c: -151 ((unsigned char)input[0].float_state_arr[4])=0
afc.c: +158 input[0].x_arr[8]>=70.000000
afc.c: +160 1<>0
afc.c: +162 1<>0
afc.c: +162b 1<>0
afc.c: +182 1=0
Path Prefix to cover :
afc.c
+140 -146 +148 -151 +158 +160 +162 +162b +182
trivially infeasible

to explore negation deepest unexplored condition of predicate,
Path Predicate Prefix to solve :
afc.c: +140 input[0].x_arr[10]=<-1.000000
afc.c: -146 (input[0].float_state_arr[0]+0.010000)<10.000000
afc.c: +148 ((unsigned char)input[0].float_state_arr[5])<>0
afc.c: -151 ((unsigned char)input[0].float_state_arr[4])=0
afc.c: +158 input[0].x_arr[8]>=70.000000
afc.c: +160 1<>0
afc.c: +162 1<>0
afc.c: -162b 1=0
Path Prefix to cover :
afc.c
+140 -146 +148 -151 +158 +160 +162 -162b
trivially infeasible

to explore negation deepest unexplored condition of predicate,
Path Predicate Prefix to solve :
afc.c: +140 input[0].x_arr[10]=<-1.000000
afc.c: -146 (input[0].float_state_arr[0]+0.010000)<10.000000
afc.c: +148 ((unsigned char)input[0].float_state_arr[5])<>0
afc.c: -151 ((unsigned char)input[0].float_state_arr[4])=0
afc.c: +158 input[0].x_arr[8]>=70.000000
afc.c: +160 1<>0
afc.c: -162 1=0
Path Prefix to cover :
afc.c
+140 -146 +148 -151 +158 +160 -162
trivially infeasible

to explore negation deepest unexplored condition of predicate,
Path Predicate Prefix to solve :
afc.c: +140 input[0].x_arr[10]=<-1.000000
afc.c: -146 (input[0].float_state_arr[0]+0.010000)<10.000000
afc.c: +148 ((unsigned char)input[0].float_state_arr[5])<>0
afc.c: -151 ((unsigned char)input[0].float_state_arr[4])=0
afc.c: +158 input[0].x_arr[8]>=70.000000
afc.c: -160 1=0
Path Prefix to cover :
afc.c
+140 -146 +148 -151 +158 -160
trivially infeasible

to explore negation deepest unexplored condition of predicate,
Path Predicate Prefix to solve :
afc.c: +140 input[0].x_arr[10]=<-1.000000
afc.c: -146 (input[0].float_state_arr[0]+0.010000)<10.000000
afc.c: -148 ((unsigned char)input[0].float_state_arr[5])=0
Path Prefix to cover :
afc.c
+140 -146 -148


TEST CASE 101

Dimensions:
input__controller = 1;
input__controller[0].input_arr = 1;
input__controller[0].int_state_arr = 0;
input__controller[0].float_state_arr = 7;
input__controller[0].x_arr = 13;
ret_val__controller = 1;
ret_val__controller[0].int_state_arr = 0;
ret_val__controller[0].float_state_arr = 7;
ret_val__controller[0].output_arr = 3;

Other input values:
input__controller[0].input_arr[0] = -423.000000;
input__controller[0].float_state_arr[0] = -371.000000;
input__controller[0].float_state_arr[1] = -78.000000;
input__controller[0].float_state_arr[2] = -292.000000;
input__controller[0].float_state_arr[3] = 272.000000;
input__controller[0].float_state_arr[4] = -193.000000;
input__controller[0].float_state_arr[5] = -0.200000;
input__controller[0].float_state_arr[6] = -73.000000;
input__controller[0].x_arr[0] = -493.000000;
input__controller[0].x_arr[1] = 170.000000;
input__controller[0].x_arr[2] = -8.000000;
input__controller[0].x_arr[3] = -463.000000;
input__controller[0].x_arr[4] = -387.000000;
input__controller[0].x_arr[5] = -245.000000;
input__controller[0].x_arr[6] = 150.000000;
input__controller[0].x_arr[7] = -475.000000;
input__controller[0].x_arr[8] = -478.000000;
input__controller[0].x_arr[9] = -156.000000;
input__controller[0].x_arr[10] = -793.000000;
input__controller[0].x_arr[11] = 173.000000;
input__controller[0].x_arr[12] = -343.000000;
ret_val__controller[0].float_state_arr[0] = 397.000000;
ret_val__controller[0].float_state_arr[1] = -241.000000;
ret_val__controller[0].float_state_arr[2] = -268.000000;
ret_val__controller[0].float_state_arr[3] = -365.000000;
ret_val__controller[0].float_state_arr[4] = -94.000000;
ret_val__controller[0].float_state_arr[5] = -68.000000;
ret_val__controller[0].float_state_arr[6] = -139.000000;
ret_val__controller[0].output_arr[0] = 438.000000;
ret_val__controller[0].output_arr[1] = -491.000000;
ret_val__controller[0].output_arr[2] = -16.000000;

Result:
unknown

Path Covered :
afc.c
+140 -146 -148 +151 -158 +160 -162 -182 +191 +205


Path Predicate for case 101:
afc.c: +140 input[0].x_arr[10]=<-1.000000
afc.c: -146 (input[0].float_state_arr[0]+0.010000)<10.000000
afc.c: -148 ((unsigned char)input[0].float_state_arr[5])=0
afc.c: +151 ((unsigned char)input[0].float_state_arr[4])<>0
afc.c: -158 input[0].x_arr[8]<50.000000
afc.c: +160 1<>0
afc.c: -162 0=0
afc.c: -182 1<>0
afc.c: +191 1<>0
afc.c: +205 ((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))/14.700000)>1.660000

Simplified Path Predicate for case 101:
input[0].x_arr[10]=<-1.000000 AND
(input[0].float_state_arr[0]+0.010000)<10.000000 AND
((unsigned char)input[0].float_state_arr[5])=0 AND
((unsigned char)input[0].float_state_arr[4])<>0 AND
input[0].x_arr[8]<50.000000 AND
((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))/14.700000)>1.660000

Output Values for case 101: (Symbolic,Concrete)
return value = 0, 0
ret_val[0].float_state_arr[0] = (input[0].float_state_arr[0]+0.010000), -370.990000
ret_val[0].float_state_arr[1] = input[0].float_state_arr[1], -78.000000
ret_val[0].float_state_arr[2] = (input[0].float_state_arr[2]+(((input[0].x_arr[9]+-((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))))*0.413280)*0.010000)), -5957.592441
ret_val[0].float_state_arr[3] = 1.000000, 1.000000
ret_val[0].float_state_arr[4] = 0.000000, 0.000000
ret_val[0].float_state_arr[5] = 0.000000, 0.000000
ret_val[0].float_state_arr[6] = input[0].float_state_arr[6], -73.000000
ret_val[0].output_arr[0] = 1.660000, 1.660000
ret_val[0].output_arr[1] = 1.000000, 1.000000
ret_val[0].output_arr[2] = 14.700000, 14.700000

to explore negation deepest unexplored condition of predicate,
Path Predicate Prefix to solve :
afc.c: +140 input[0].x_arr[10]=<-1.000000
afc.c: -146 (input[0].float_state_arr[0]+0.010000)<10.000000
afc.c: -148 ((unsigned char)input[0].float_state_arr[5])=0
afc.c: +151 ((unsigned char)input[0].float_state_arr[4])<>0
afc.c: -158 input[0].x_arr[8]<50.000000
afc.c: +160 1<>0
afc.c: -162 0=0
afc.c: -182 1<>0
afc.c: +191 1<>0
afc.c: -205 ((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))/14.700000)=<1.660000
Path Prefix to cover :
afc.c
+140 -146 -148 +151 -158 +160 -162 -182 +191 -205


TEST CASE 102

Dimensions:
input__controller = 1;
input__controller[0].input_arr = 1;
input__controller[0].int_state_arr = 0;
input__controller[0].float_state_arr = 7;
input__controller[0].x_arr = 13;
ret_val__controller = 1;
ret_val__controller[0].int_state_arr = 0;
ret_val__controller[0].float_state_arr = 7;
ret_val__controller[0].output_arr = 3;

Other input values:
input__controller[0].input_arr[0] = -423.000000;
input__controller[0].float_state_arr[0] = -371.000000;
input__controller[0].float_state_arr[1] = -78.000000;
input__controller[0].float_state_arr[2] = 210.000000;
input__controller[0].float_state_arr[3] = 272.000000;
input__controller[0].float_state_arr[4] = -193.000000;
input__controller[0].float_state_arr[5] = -0.200000;
input__controller[0].float_state_arr[6] = -73.000000;
input__controller[0].x_arr[0] = -493.000000;
input__controller[0].x_arr[1] = 170.000000;
input__controller[0].x_arr[2] = -8.000000;
input__controller[0].x_arr[3] = -463.000000;
input__controller[0].x_arr[4] = -387.000000;
input__controller[0].x_arr[5] = -245.000000;
input__controller[0].x_arr[6] = 150.000000;
input__controller[0].x_arr[7] = 0.000000;
input__controller[0].x_arr[8] = -478.000000;
input__controller[0].x_arr[9] = -0.366000;
input__controller[0].x_arr[10] = -793.000000;
input__controller[0].x_arr[11] = 173.000000;
input__controller[0].x_arr[12] = -343.000000;
ret_val__controller[0].float_state_arr[0] = 397.000000;
ret_val__controller[0].float_state_arr[1] = -241.000000;
ret_val__controller[0].float_state_arr[2] = -268.000000;
ret_val__controller[0].float_state_arr[3] = -365.000000;
ret_val__controller[0].float_state_arr[4] = -94.000000;
ret_val__controller[0].float_state_arr[5] = -68.000000;
ret_val__controller[0].float_state_arr[6] = -139.000000;
ret_val__controller[0].output_arr[0] = 438.000000;
ret_val__controller[0].output_arr[1] = -491.000000;
ret_val__controller[0].output_arr[2] = -16.000000;

Result:
unknown

Path Covered :
afc.c
+140 -146 -148 +151 -158 +160 -162 -182 +191 -205 +207


Path Predicate for case 102:
afc.c: +140 input[0].x_arr[10]=<-1.000000
afc.c: -146 (input[0].float_state_arr[0]+0.010000)<10.000000
afc.c: -148 ((unsigned char)input[0].float_state_arr[5])=0
afc.c: +151 ((unsigned char)input[0].float_state_arr[4])<>0
afc.c: -158 input[0].x_arr[8]<50.000000
afc.c: +160 1<>0
afc.c: -162 0=0
afc.c: -182 1<>0
afc.c: +191 1<>0
afc.c: -205 ((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))/14.700000)=<1.660000
afc.c: +207 ((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))/14.700000)<0.130000

Simplified Path Predicate for case 102:
input[0].x_arr[10]=<-1.000000 AND
(input[0].float_state_arr[0]+0.010000)<10.000000 AND
((unsigned char)input[0].float_state_arr[5])=0 AND
((unsigned char)input[0].float_state_arr[4])<>0 AND
input[0].x_arr[8]<50.000000 AND
((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))/14.700000)=<1.660000 AND
((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))/14.700000)<0.130000

Output Values for case 102: (Symbolic,Concrete)
return value = 0, 0
ret_val[0].float_state_arr[0] = (input[0].float_state_arr[0]+0.010000), -370.990000
ret_val[0].float_state_arr[1] = input[0].float_state_arr[1], -78.000000
ret_val[0].float_state_arr[2] = (input[0].float_state_arr[2]+(((input[0].x_arr[9]+-((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))))*0.413280)*0.010000)), 210.000000
ret_val[0].float_state_arr[3] = 1.000000, 1.000000
ret_val[0].float_state_arr[4] = 0.000000, 0.000000
ret_val[0].float_state_arr[5] = 0.000000, 0.000000
ret_val[0].float_state_arr[6] = input[0].float_state_arr[6], -73.000000
ret_val[0].output_arr[0] = 0.130000, 0.130000
ret_val[0].output_arr[1] = 1.000000, 1.000000
ret_val[0].output_arr[2] = 14.700000, 14.700000

to explore negation deepest unexplored condition of predicate,
Path Predicate Prefix to solve :
afc.c: +140 input[0].x_arr[10]=<-1.000000
afc.c: -146 (input[0].float_state_arr[0]+0.010000)<10.000000
afc.c: -148 ((unsigned char)input[0].float_state_arr[5])=0
afc.c: +151 ((unsigned char)input[0].float_state_arr[4])<>0
afc.c: -158 input[0].x_arr[8]<50.000000
afc.c: +160 1<>0
afc.c: -162 0=0
afc.c: -182 1<>0
afc.c: +191 1<>0
afc.c: -205 ((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))/14.700000)=<1.660000
afc.c: -207 ((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))/14.700000)>=0.130000
Path Prefix to cover :
afc.c
+140 -146 -148 +151 -158 +160 -162 -182 +191 -205 -207


TEST CASE 103

Dimensions:
input__controller = 1;
input__controller[0].input_arr = 1;
input__controller[0].int_state_arr = 0;
input__controller[0].float_state_arr = 7;
input__controller[0].x_arr = 13;
ret_val__controller = 1;
ret_val__controller[0].int_state_arr = 0;
ret_val__controller[0].float_state_arr = 7;
ret_val__controller[0].output_arr = 3;

Other input values:
input__controller[0].input_arr[0] = -423.000000;
input__controller[0].float_state_arr[0] = -371.000000;
input__controller[0].float_state_arr[1] = -78.000000;
input__controller[0].float_state_arr[2] = -7.000000;
input__controller[0].float_state_arr[3] = 272.000000;
input__controller[0].float_state_arr[4] = -193.000000;
input__controller[0].float_state_arr[5] = -0.200000;
input__controller[0].float_state_arr[6] = -73.000000;
input__controller[0].x_arr[0] = -493.000000;
input__controller[0].x_arr[1] = 170.000000;
input__controller[0].x_arr[2] = -8.000000;
input__controller[0].x_arr[3] = -463.000000;
input__controller[0].x_arr[4] = -387.000000;
input__controller[0].x_arr[5] = -245.000000;
input__controller[0].x_arr[6] = 150.000000;
input__controller[0].x_arr[7] = -3246.177057;
input__controller[0].x_arr[8] = -478.000000;
input__controller[0].x_arr[9] = 24.000000;
input__controller[0].x_arr[10] = -793.000000;
input__controller[0].x_arr[11] = 173.000000;
input__controller[0].x_arr[12] = -343.000000;
ret_val__controller[0].float_state_arr[0] = 397.000000;
ret_val__controller[0].float_state_arr[1] = -241.000000;
ret_val__controller[0].float_state_arr[2] = -268.000000;
ret_val__controller[0].float_state_arr[3] = -365.000000;
ret_val__controller[0].float_state_arr[4] = -94.000000;
ret_val__controller[0].float_state_arr[5] = -68.000000;
ret_val__controller[0].float_state_arr[6] = -139.000000;
ret_val__controller[0].output_arr[0] = 438.000000;
ret_val__controller[0].output_arr[1] = -491.000000;
ret_val__controller[0].output_arr[2] = -16.000000;

Result:
unknown

Path Covered :
afc.c
+140 -146 -148 +151 -158 +160 -162 -182 +191 -205 -207


Path Predicate for case 103:
afc.c: +140 input[0].x_arr[10]=<-1.000000
afc.c: -146 (input[0].float_state_arr[0]+0.010000)<10.000000
afc.c: -148 ((unsigned char)input[0].float_state_arr[5])=0
afc.c: +151 ((unsigned char)input[0].float_state_arr[4])<>0
afc.c: -158 input[0].x_arr[8]<50.000000
afc.c: +160 1<>0
afc.c: -162 0=0
afc.c: -182 1<>0
afc.c: +191 1<>0
afc.c: -205 ((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))/14.700000)=<1.660000
afc.c: -207 ((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))/14.700000)>=0.130000

Simplified Path Predicate for case 103:
input[0].x_arr[10]=<-1.000000 AND
(input[0].float_state_arr[0]+0.010000)<10.000000 AND
((unsigned char)input[0].float_state_arr[5])=0 AND
((unsigned char)input[0].float_state_arr[4])<>0 AND
input[0].x_arr[8]<50.000000 AND
((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))/14.700000)=<1.660000 AND
((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))/14.700000)>=0.130000

Output Values for case 103: (Symbolic,Concrete)
return value = 0, 0
ret_val[0].float_state_arr[0] = (input[0].float_state_arr[0]+0.010000), -370.990000
ret_val[0].float_state_arr[1] = input[0].float_state_arr[1], -78.000000
ret_val[0].float_state_arr[2] = (input[0].float_state_arr[2]+(((input[0].x_arr[9]+-((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))))*0.413280)*0.010000)), -7.000000
ret_val[0].float_state_arr[3] = 1.000000, 1.000000
ret_val[0].float_state_arr[4] = 0.000000, 0.000000
ret_val[0].float_state_arr[5] = 0.000000, 0.000000
ret_val[0].float_state_arr[6] = input[0].float_state_arr[6], -73.000000
ret_val[0].output_arr[0] = ((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))/14.700000), 1.632653
ret_val[0].output_arr[1] = 1.000000, 1.000000
ret_val[0].output_arr[2] = 14.700000, 14.700000

to explore negation deepest unexplored condition of predicate,
Path Predicate Prefix to solve :
afc.c: +140 input[0].x_arr[10]=<-1.000000
afc.c: -146 (input[0].float_state_arr[0]+0.010000)<10.000000
afc.c: -148 ((unsigned char)input[0].float_state_arr[5])=0
afc.c: +151 ((unsigned char)input[0].float_state_arr[4])<>0
afc.c: -158 input[0].x_arr[8]<50.000000
afc.c: +160 1<>0
afc.c: -162 0=0
afc.c: -182 1<>0
afc.c: -191 1=0
Path Prefix to cover :
afc.c
+140 -146 -148 +151 -158 +160 -162 -182 -191
trivially infeasible

to explore negation deepest unexplored condition of predicate,
Path Predicate Prefix to solve :
afc.c: +140 input[0].x_arr[10]=<-1.000000
afc.c: -146 (input[0].float_state_arr[0]+0.010000)<10.000000
afc.c: -148 ((unsigned char)input[0].float_state_arr[5])=0
afc.c: +151 ((unsigned char)input[0].float_state_arr[4])<>0
afc.c: -158 input[0].x_arr[8]<50.000000
afc.c: +160 1<>0
afc.c: -162 0=0
afc.c: +182 1=0
Path Prefix to cover :
afc.c
+140 -146 -148 +151 -158 +160 -162 +182
trivially infeasible

to explore negation deepest unexplored condition of predicate,
Path Predicate Prefix to solve :
afc.c: +140 input[0].x_arr[10]=<-1.000000
afc.c: -146 (input[0].float_state_arr[0]+0.010000)<10.000000
afc.c: -148 ((unsigned char)input[0].float_state_arr[5])=0
afc.c: +151 ((unsigned char)input[0].float_state_arr[4])<>0
afc.c: -158 input[0].x_arr[8]<50.000000
afc.c: +160 1<>0
afc.c: +162 0<>0
Path Prefix to cover :
afc.c
+140 -146 -148 +151 -158 +160 +162
trivially infeasible

to explore negation deepest unexplored condition of predicate,
Path Predicate Prefix to solve :
afc.c: +140 input[0].x_arr[10]=<-1.000000
afc.c: -146 (input[0].float_state_arr[0]+0.010000)<10.000000
afc.c: -148 ((unsigned char)input[0].float_state_arr[5])=0
afc.c: +151 ((unsigned char)input[0].float_state_arr[4])<>0
afc.c: -158 input[0].x_arr[8]<50.000000
afc.c: -160 1=0
Path Prefix to cover :
afc.c
+140 -146 -148 +151 -158 -160
trivially infeasible

to explore negation deepest unexplored condition of predicate,
Path Predicate Prefix to solve :
afc.c: +140 input[0].x_arr[10]=<-1.000000
afc.c: -146 (input[0].float_state_arr[0]+0.010000)<10.000000
afc.c: -148 ((unsigned char)input[0].float_state_arr[5])=0
afc.c: +151 ((unsigned char)input[0].float_state_arr[4])<>0
afc.c: +158 input[0].x_arr[8]>=50.000000
Path Prefix to cover :
afc.c
+140 -146 -148 +151 +158


TEST CASE 104

Dimensions:
input__controller = 1;
input__controller[0].input_arr = 1;
input__controller[0].int_state_arr = 0;
input__controller[0].float_state_arr = 7;
input__controller[0].x_arr = 13;
ret_val__controller = 1;
ret_val__controller[0].int_state_arr = 0;
ret_val__controller[0].float_state_arr = 7;
ret_val__controller[0].output_arr = 3;

Other input values:
input__controller[0].input_arr[0] = -423.000000;
input__controller[0].float_state_arr[0] = -371.000000;
input__controller[0].float_state_arr[1] = -78.000000;
input__controller[0].float_state_arr[2] = -292.000000;
input__controller[0].float_state_arr[3] = 272.000000;
input__controller[0].float_state_arr[4] = -193.000000;
input__controller[0].float_state_arr[5] = -0.200000;
input__controller[0].float_state_arr[6] = -73.000000;
input__controller[0].x_arr[0] = -493.000000;
input__controller[0].x_arr[1] = 170.000000;
input__controller[0].x_arr[2] = -8.000000;
input__controller[0].x_arr[3] = -463.000000;
input__controller[0].x_arr[4] = -387.000000;
input__controller[0].x_arr[5] = -245.000000;
input__controller[0].x_arr[6] = 150.000000;
input__controller[0].x_arr[7] = -475.000000;
input__controller[0].x_arr[8] = 140.000000;
input__controller[0].x_arr[9] = -156.000000;
input__controller[0].x_arr[10] = -793.000000;
input__controller[0].x_arr[11] = 173.000000;
input__controller[0].x_arr[12] = -343.000000;
ret_val__controller[0].float_state_arr[0] = 397.000000;
ret_val__controller[0].float_state_arr[1] = -241.000000;
ret_val__controller[0].float_state_arr[2] = -268.000000;
ret_val__controller[0].float_state_arr[3] = -365.000000;
ret_val__controller[0].float_state_arr[4] = -94.000000;
ret_val__controller[0].float_state_arr[5] = -68.000000;
ret_val__controller[0].float_state_arr[6] = -139.000000;
ret_val__controller[0].output_arr[0] = 438.000000;
ret_val__controller[0].output_arr[1] = -491.000000;
ret_val__controller[0].output_arr[2] = -16.000000;

Result:
unknown

Path Covered :
afc.c
+140 -146 -148 +151 +158 +160 -162 -182 +191 +205


Path Predicate for case 104:
afc.c: +140 input[0].x_arr[10]=<-1.000000
afc.c: -146 (input[0].float_state_arr[0]+0.010000)<10.000000
afc.c: -148 ((unsigned char)input[0].float_state_arr[5])=0
afc.c: +151 ((unsigned char)input[0].float_state_arr[4])<>0
afc.c: +158 input[0].x_arr[8]>=50.000000
afc.c: +160 1<>0
afc.c: -162 0=0
afc.c: -182 1<>0
afc.c: +191 1<>0
afc.c: +205 ((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))/14.700000)>1.660000

Simplified Path Predicate for case 104:
input[0].x_arr[10]=<-1.000000 AND
(input[0].float_state_arr[0]+0.010000)<10.000000 AND
((unsigned char)input[0].float_state_arr[5])=0 AND
((unsigned char)input[0].float_state_arr[4])<>0 AND
input[0].x_arr[8]>=50.000000 AND
((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))/14.700000)>1.660000

Output Values for case 104: (Symbolic,Concrete)
return value = 0, 0
ret_val[0].float_state_arr[0] = (input[0].float_state_arr[0]+0.010000), -370.990000
ret_val[0].float_state_arr[1] = input[0].float_state_arr[1], -78.000000
ret_val[0].float_state_arr[2] = (input[0].float_state_arr[2]+(((input[0].x_arr[9]+-((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))))*0.413280)*0.010000)), -5957.592441
ret_val[0].float_state_arr[3] = 1.000000, 1.000000
ret_val[0].float_state_arr[4] = 1.000000, 1.000000
ret_val[0].float_state_arr[5] = 0.000000, 0.000000
ret_val[0].float_state_arr[6] = input[0].float_state_arr[6], -73.000000
ret_val[0].output_arr[0] = 1.660000, 1.660000
ret_val[0].output_arr[1] = 1.000000, 1.000000
ret_val[0].output_arr[2] = 14.700000, 14.700000

to explore negation deepest unexplored condition of predicate,
Path Predicate Prefix to solve :
afc.c: +140 input[0].x_arr[10]=<-1.000000
afc.c: -146 (input[0].float_state_arr[0]+0.010000)<10.000000
afc.c: -148 ((unsigned char)input[0].float_state_arr[5])=0
afc.c: +151 ((unsigned char)input[0].float_state_arr[4])<>0
afc.c: +158 input[0].x_arr[8]>=50.000000
afc.c: +160 1<>0
afc.c: -162 0=0
afc.c: -182 1<>0
afc.c: +191 1<>0
afc.c: -205 ((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))/14.700000)=<1.660000
Path Prefix to cover :
afc.c
+140 -146 -148 +151 +158 +160 -162 -182 +191 -205


TEST CASE 105

Dimensions:
input__controller = 1;
input__controller[0].input_arr = 1;
input__controller[0].int_state_arr = 0;
input__controller[0].float_state_arr = 7;
input__controller[0].x_arr = 13;
ret_val__controller = 1;
ret_val__controller[0].int_state_arr = 0;
ret_val__controller[0].float_state_arr = 7;
ret_val__controller[0].output_arr = 3;

Other input values:
input__controller[0].input_arr[0] = -423.000000;
input__controller[0].float_state_arr[0] = -371.000000;
input__controller[0].float_state_arr[1] = -78.000000;
input__controller[0].float_state_arr[2] = 106.000000;
input__controller[0].float_state_arr[3] = 272.000000;
input__controller[0].float_state_arr[4] = -193.000000;
input__controller[0].float_state_arr[5] = -0.200000;
input__controller[0].float_state_arr[6] = -73.000000;
input__controller[0].x_arr[0] = -493.000000;
input__controller[0].x_arr[1] = 170.000000;
input__controller[0].x_arr[2] = -8.000000;
input__controller[0].x_arr[3] = -463.000000;
input__controller[0].x_arr[4] = -387.000000;
input__controller[0].x_arr[5] = -245.000000;
input__controller[0].x_arr[6] = 150.000000;
input__controller[0].x_arr[7] = 0.000000;
input__controller[0].x_arr[8] = 140.000000;
input__controller[0].x_arr[9] = -0.366000;
input__controller[0].x_arr[10] = -793.000000;
input__controller[0].x_arr[11] = 173.000000;
input__controller[0].x_arr[12] = -343.000000;
ret_val__controller[0].float_state_arr[0] = 397.000000;
ret_val__controller[0].float_state_arr[1] = -241.000000;
ret_val__controller[0].float_state_arr[2] = -268.000000;
ret_val__controller[0].float_state_arr[3] = -365.000000;
ret_val__controller[0].float_state_arr[4] = -94.000000;
ret_val__controller[0].float_state_arr[5] = -68.000000;
ret_val__controller[0].float_state_arr[6] = -139.000000;
ret_val__controller[0].output_arr[0] = 438.000000;
ret_val__controller[0].output_arr[1] = -491.000000;
ret_val__controller[0].output_arr[2] = -16.000000;

Result:
unknown

Path Covered :
afc.c
+140 -146 -148 +151 +158 +160 -162 -182 +191 -205 +207


Path Predicate for case 105:
afc.c: +140 input[0].x_arr[10]=<-1.000000
afc.c: -146 (input[0].float_state_arr[0]+0.010000)<10.000000
afc.c: -148 ((unsigned char)input[0].float_state_arr[5])=0
afc.c: +151 ((unsigned char)input[0].float_state_arr[4])<>0
afc.c: +158 input[0].x_arr[8]>=50.000000
afc.c: +160 1<>0
afc.c: -162 0=0
afc.c: -182 1<>0
afc.c: +191 1<>0
afc.c: -205 ((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))/14.700000)=<1.660000
afc.c: +207 ((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))/14.700000)<0.130000

Simplified Path Predicate for case 105:
input[0].x_arr[10]=<-1.000000 AND
(input[0].float_state_arr[0]+0.010000)<10.000000 AND
((unsigned char)input[0].float_state_arr[5])=0 AND
((unsigned char)input[0].float_state_arr[4])<>0 AND
input[0].x_arr[8]>=50.000000 AND
((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))/14.700000)=<1.660000 AND
((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))/14.700000)<0.130000

Output Values for case 105: (Symbolic,Concrete)
return value = 0, 0
ret_val[0].float_state_arr[0] = (input[0].float_state_arr[0]+0.010000), -370.990000
ret_val[0].float_state_arr[1] = input[0].float_state_arr[1], -78.000000
ret_val[0].float_state_arr[2] = (input[0].float_state_arr[2]+(((input[0].x_arr[9]+-((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))))*0.413280)*0.010000)), 106.000000
ret_val[0].float_state_arr[3] = 1.000000, 1.000000
ret_val[0].float_state_arr[4] = 1.000000, 1.000000
ret_val[0].float_state_arr[5] = 0.000000, 0.000000
ret_val[0].float_state_arr[6] = input[0].float_state_arr[6], -73.000000
ret_val[0].output_arr[0] = 0.130000, 0.130000
ret_val[0].output_arr[1] = 1.000000, 1.000000
ret_val[0].output_arr[2] = 14.700000, 14.700000

to explore negation deepest unexplored condition of predicate,
Path Predicate Prefix to solve :
afc.c: +140 input[0].x_arr[10]=<-1.000000
afc.c: -146 (input[0].float_state_arr[0]+0.010000)<10.000000
afc.c: -148 ((unsigned char)input[0].float_state_arr[5])=0
afc.c: +151 ((unsigned char)input[0].float_state_arr[4])<>0
afc.c: +158 input[0].x_arr[8]>=50.000000
afc.c: +160 1<>0
afc.c: -162 0=0
afc.c: -182 1<>0
afc.c: +191 1<>0
afc.c: -205 ((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))/14.700000)=<1.660000
afc.c: -207 ((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))/14.700000)>=0.130000
Path Prefix to cover :
afc.c
+140 -146 -148 +151 +158 +160 -162 -182 +191 -205 -207


TEST CASE 106

Dimensions:
input__controller = 1;
input__controller[0].input_arr = 1;
input__controller[0].int_state_arr = 0;
input__controller[0].float_state_arr = 7;
input__controller[0].x_arr = 13;
ret_val__controller = 1;
ret_val__controller[0].int_state_arr = 0;
ret_val__controller[0].float_state_arr = 7;
ret_val__controller[0].output_arr = 3;

Other input values:
input__controller[0].input_arr[0] = -423.000000;
input__controller[0].float_state_arr[0] = -371.000000;
input__controller[0].float_state_arr[1] = -78.000000;
input__controller[0].float_state_arr[2] = 470.000000;
input__controller[0].float_state_arr[3] = 272.000000;
input__controller[0].float_state_arr[4] = -193.000000;
input__controller[0].float_state_arr[5] = -0.200000;
input__controller[0].float_state_arr[6] = -73.000000;
input__controller[0].x_arr[0] = -493.000000;
input__controller[0].x_arr[1] = 170.000000;
input__controller[0].x_arr[2] = -8.000000;
input__controller[0].x_arr[3] = -463.000000;
input__controller[0].x_arr[4] = -387.000000;
input__controller[0].x_arr[5] = -245.000000;
input__controller[0].x_arr[6] = 150.000000;
input__controller[0].x_arr[7] = -0.001671;
input__controller[0].x_arr[8] = 140.000000;
input__controller[0].x_arr[9] = 12.000000;
input__controller[0].x_arr[10] = -793.000000;
input__controller[0].x_arr[11] = 173.000000;
input__controller[0].x_arr[12] = -343.000000;
ret_val__controller[0].float_state_arr[0] = 397.000000;
ret_val__controller[0].float_state_arr[1] = -241.000000;
ret_val__controller[0].float_state_arr[2] = -268.000000;
ret_val__controller[0].float_state_arr[3] = -365.000000;
ret_val__controller[0].float_state_arr[4] = -94.000000;
ret_val__controller[0].float_state_arr[5] = -68.000000;
ret_val__controller[0].float_state_arr[6] = -139.000000;
ret_val__controller[0].output_arr[0] = 438.000000;
ret_val__controller[0].output_arr[1] = -491.000000;
ret_val__controller[0].output_arr[2] = -16.000000;

Result:
unknown

Path Covered :
afc.c
+140 -146 -148 +151 +158 +160 -162 -182 +191 -205 -207


Path Predicate for case 106:
afc.c: +140 input[0].x_arr[10]=<-1.000000
afc.c: -146 (input[0].float_state_arr[0]+0.010000)<10.000000
afc.c: -148 ((unsigned char)input[0].float_state_arr[5])=0
afc.c: +151 ((unsigned char)input[0].float_state_arr[4])<>0
afc.c: +158 input[0].x_arr[8]>=50.000000
afc.c: +160 1<>0
afc.c: -162 0=0
afc.c: -182 1<>0
afc.c: +191 1<>0
afc.c: -205 ((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))/14.700000)=<1.660000
afc.c: -207 ((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))/14.700000)>=0.130000

Simplified Path Predicate for case 106:
input[0].x_arr[10]=<-1.000000 AND
(input[0].float_state_arr[0]+0.010000)<10.000000 AND
((unsigned char)input[0].float_state_arr[5])=0 AND
((unsigned char)input[0].float_state_arr[4])<>0 AND
input[0].x_arr[8]>=50.000000 AND
((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))/14.700000)=<1.660000 AND
((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))/14.700000)>=0.130000

Output Values for case 106: (Symbolic,Concrete)
return value = 0, 0
ret_val[0].float_state_arr[0] = (input[0].float_state_arr[0]+0.010000), -370.990000
ret_val[0].float_state_arr[1] = input[0].float_state_arr[1], -78.000000
ret_val[0].float_state_arr[2] = (input[0].float_state_arr[2]+(((input[0].x_arr[9]+-((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))))*0.413280)*0.010000)), 470.000000
ret_val[0].float_state_arr[3] = 1.000000, 1.000000
ret_val[0].float_state_arr[4] = 1.000000, 1.000000
ret_val[0].float_state_arr[5] = 0.000000, 0.000000
ret_val[0].float_state_arr[6] = input[0].float_state_arr[6], -73.000000
ret_val[0].output_arr[0] = ((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))/14.700000), 0.816327
ret_val[0].output_arr[1] = 1.000000, 1.000000
ret_val[0].output_arr[2] = 14.700000, 14.700000

to explore negation deepest unexplored condition of predicate,
Path Predicate Prefix to solve :
afc.c: +140 input[0].x_arr[10]=<-1.000000
afc.c: -146 (input[0].float_state_arr[0]+0.010000)<10.000000
afc.c: -148 ((unsigned char)input[0].float_state_arr[5])=0
afc.c: +151 ((unsigned char)input[0].float_state_arr[4])<>0
afc.c: +158 input[0].x_arr[8]>=50.000000
afc.c: +160 1<>0
afc.c: -162 0=0
afc.c: -182 1<>0
afc.c: -191 1=0
Path Prefix to cover :
afc.c
+140 -146 -148 +151 +158 +160 -162 -182 -191
trivially infeasible

to explore negation deepest unexplored condition of predicate,
Path Predicate Prefix to solve :
afc.c: +140 input[0].x_arr[10]=<-1.000000
afc.c: -146 (input[0].float_state_arr[0]+0.010000)<10.000000
afc.c: -148 ((unsigned char)input[0].float_state_arr[5])=0
afc.c: +151 ((unsigned char)input[0].float_state_arr[4])<>0
afc.c: +158 input[0].x_arr[8]>=50.000000
afc.c: +160 1<>0
afc.c: -162 0=0
afc.c: +182 1=0
Path Prefix to cover :
afc.c
+140 -146 -148 +151 +158 +160 -162 +182
trivially infeasible

to explore negation deepest unexplored condition of predicate,
Path Predicate Prefix to solve :
afc.c: +140 input[0].x_arr[10]=<-1.000000
afc.c: -146 (input[0].float_state_arr[0]+0.010000)<10.000000
afc.c: -148 ((unsigned char)input[0].float_state_arr[5])=0
afc.c: +151 ((unsigned char)input[0].float_state_arr[4])<>0
afc.c: +158 input[0].x_arr[8]>=50.000000
afc.c: +160 1<>0
afc.c: +162 0<>0
Path Prefix to cover :
afc.c
+140 -146 -148 +151 +158 +160 +162
trivially infeasible

to explore negation deepest unexplored condition of predicate,
Path Predicate Prefix to solve :
afc.c: +140 input[0].x_arr[10]=<-1.000000
afc.c: -146 (input[0].float_state_arr[0]+0.010000)<10.000000
afc.c: -148 ((unsigned char)input[0].float_state_arr[5])=0
afc.c: +151 ((unsigned char)input[0].float_state_arr[4])<>0
afc.c: +158 input[0].x_arr[8]>=50.000000
afc.c: -160 1=0
Path Prefix to cover :
afc.c
+140 -146 -148 +151 +158 -160
trivially infeasible

to explore negation deepest unexplored condition of predicate,
Path Predicate Prefix to solve :
afc.c: +140 input[0].x_arr[10]=<-1.000000
afc.c: -146 (input[0].float_state_arr[0]+0.010000)<10.000000
afc.c: -148 ((unsigned char)input[0].float_state_arr[5])=0
afc.c: -151 ((unsigned char)input[0].float_state_arr[4])=0
Path Prefix to cover :
afc.c
+140 -146 -148 -151


TEST CASE 107

Dimensions:
input__controller = 1;
input__controller[0].input_arr = 1;
input__controller[0].int_state_arr = 0;
input__controller[0].float_state_arr = 7;
input__controller[0].x_arr = 13;
ret_val__controller = 1;
ret_val__controller[0].int_state_arr = 0;
ret_val__controller[0].float_state_arr = 7;
ret_val__controller[0].output_arr = 3;

Other input values:
input__controller[0].input_arr[0] = -423.000000;
input__controller[0].float_state_arr[0] = -371.000000;
input__controller[0].float_state_arr[1] = -78.000000;
input__controller[0].float_state_arr[2] = -292.000000;
input__controller[0].float_state_arr[3] = 272.000000;
input__controller[0].float_state_arr[4] = 0.900000;
input__controller[0].float_state_arr[5] = -0.200000;
input__controller[0].float_state_arr[6] = -73.000000;
input__controller[0].x_arr[0] = -493.000000;
input__controller[0].x_arr[1] = 170.000000;
input__controller[0].x_arr[2] = -8.000000;
input__controller[0].x_arr[3] = -463.000000;
input__controller[0].x_arr[4] = -387.000000;
input__controller[0].x_arr[5] = -245.000000;
input__controller[0].x_arr[6] = 150.000000;
input__controller[0].x_arr[7] = -475.000000;
input__controller[0].x_arr[8] = -478.000000;
input__controller[0].x_arr[9] = -156.000000;
input__controller[0].x_arr[10] = -793.000000;
input__controller[0].x_arr[11] = 173.000000;
input__controller[0].x_arr[12] = -343.000000;
ret_val__controller[0].float_state_arr[0] = 397.000000;
ret_val__controller[0].float_state_arr[1] = -241.000000;
ret_val__controller[0].float_state_arr[2] = -268.000000;
ret_val__controller[0].float_state_arr[3] = -365.000000;
ret_val__controller[0].float_state_arr[4] = -94.000000;
ret_val__controller[0].float_state_arr[5] = -68.000000;
ret_val__controller[0].float_state_arr[6] = -139.000000;
ret_val__controller[0].output_arr[0] = 438.000000;
ret_val__controller[0].output_arr[1] = -491.000000;
ret_val__controller[0].output_arr[2] = -16.000000;

Result:
unknown

Path Covered :
afc.c
+140 -146 -148 -151 -158 +160 -162 -182 +191 +205


Path Predicate for case 107:
afc.c: +140 input[0].x_arr[10]=<-1.000000
afc.c: -146 (input[0].float_state_arr[0]+0.010000)<10.000000
afc.c: -148 ((unsigned char)input[0].float_state_arr[5])=0
afc.c: -151 ((unsigned char)input[0].float_state_arr[4])=0
afc.c: -158 input[0].x_arr[8]<70.000000
afc.c: +160 1<>0
afc.c: -162 0=0
afc.c: -182 1<>0
afc.c: +191 1<>0
afc.c: +205 ((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))/14.700000)>1.660000

Simplified Path Predicate for case 107:
input[0].x_arr[10]=<-1.000000 AND
(input[0].float_state_arr[0]+0.010000)<10.000000 AND
((unsigned char)input[0].float_state_arr[5])=0 AND
((unsigned char)input[0].float_state_arr[4])=0 AND
input[0].x_arr[8]<70.000000 AND
((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))/14.700000)>1.660000

Output Values for case 107: (Symbolic,Concrete)
return value = 0, 0
ret_val[0].float_state_arr[0] = (input[0].float_state_arr[0]+0.010000), -370.990000
ret_val[0].float_state_arr[1] = input[0].float_state_arr[1], -78.000000
ret_val[0].float_state_arr[2] = (input[0].float_state_arr[2]+(((input[0].x_arr[9]+-((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))))*0.413280)*0.010000)), -5957.592441
ret_val[0].float_state_arr[3] = 1.000000, 1.000000
ret_val[0].float_state_arr[4] = 0.000000, 0.000000
ret_val[0].float_state_arr[5] = 0.000000, 0.000000
ret_val[0].float_state_arr[6] = input[0].float_state_arr[6], -73.000000
ret_val[0].output_arr[0] = 1.660000, 1.660000
ret_val[0].output_arr[1] = 1.000000, 1.000000
ret_val[0].output_arr[2] = 14.700000, 14.700000

to explore negation deepest unexplored condition of predicate,
Path Predicate Prefix to solve :
afc.c: +140 input[0].x_arr[10]=<-1.000000
afc.c: -146 (input[0].float_state_arr[0]+0.010000)<10.000000
afc.c: -148 ((unsigned char)input[0].float_state_arr[5])=0
afc.c: -151 ((unsigned char)input[0].float_state_arr[4])=0
afc.c: -158 input[0].x_arr[8]<70.000000
afc.c: +160 1<>0
afc.c: -162 0=0
afc.c: -182 1<>0
afc.c: +191 1<>0
afc.c: -205 ((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))/14.700000)=<1.660000
Path Prefix to cover :
afc.c
+140 -146 -148 -151 -158 +160 -162 -182 +191 -205


TEST CASE 108

Dimensions:
input__controller = 1;
input__controller[0].input_arr = 1;
input__controller[0].int_state_arr = 0;
input__controller[0].float_state_arr = 7;
input__controller[0].x_arr = 13;
ret_val__controller = 1;
ret_val__controller[0].int_state_arr = 0;
ret_val__controller[0].float_state_arr = 7;
ret_val__controller[0].output_arr = 3;

Other input values:
input__controller[0].input_arr[0] = -423.000000;
input__controller[0].float_state_arr[0] = -371.000000;
input__controller[0].float_state_arr[1] = -78.000000;
input__controller[0].float_state_arr[2] = 441.000000;
input__controller[0].float_state_arr[3] = 272.000000;
input__controller[0].float_state_arr[4] = 0.900000;
input__controller[0].float_state_arr[5] = -0.200000;
input__controller[0].float_state_arr[6] = -73.000000;
input__controller[0].x_arr[0] = -493.000000;
input__controller[0].x_arr[1] = 170.000000;
input__controller[0].x_arr[2] = -8.000000;
input__controller[0].x_arr[3] = -463.000000;
input__controller[0].x_arr[4] = -387.000000;
input__controller[0].x_arr[5] = -245.000000;
input__controller[0].x_arr[6] = 150.000000;
input__controller[0].x_arr[7] = -0.000000;
input__controller[0].x_arr[8] = -478.000000;
input__controller[0].x_arr[9] = -0.366000;
input__controller[0].x_arr[10] = -793.000000;
input__controller[0].x_arr[11] = 173.000000;
input__controller[0].x_arr[12] = -343.000000;
ret_val__controller[0].float_state_arr[0] = 397.000000;
ret_val__controller[0].float_state_arr[1] = -241.000000;
ret_val__controller[0].float_state_arr[2] = -268.000000;
ret_val__controller[0].float_state_arr[3] = -365.000000;
ret_val__controller[0].float_state_arr[4] = -94.000000;
ret_val__controller[0].float_state_arr[5] = -68.000000;
ret_val__controller[0].float_state_arr[6] = -139.000000;
ret_val__controller[0].output_arr[0] = 438.000000;
ret_val__controller[0].output_arr[1] = -491.000000;
ret_val__controller[0].output_arr[2] = -16.000000;

Result:
unknown

Path Covered :
afc.c
+140 -146 -148 -151 -158 +160 -162 -182 +191 -205 +207


Path Predicate for case 108:
afc.c: +140 input[0].x_arr[10]=<-1.000000
afc.c: -146 (input[0].float_state_arr[0]+0.010000)<10.000000
afc.c: -148 ((unsigned char)input[0].float_state_arr[5])=0
afc.c: -151 ((unsigned char)input[0].float_state_arr[4])=0
afc.c: -158 input[0].x_arr[8]<70.000000
afc.c: +160 1<>0
afc.c: -162 0=0
afc.c: -182 1<>0
afc.c: +191 1<>0
afc.c: -205 ((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))/14.700000)=<1.660000
afc.c: +207 ((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))/14.700000)<0.130000

Simplified Path Predicate for case 108:
input[0].x_arr[10]=<-1.000000 AND
(input[0].float_state_arr[0]+0.010000)<10.000000 AND
((unsigned char)input[0].float_state_arr[5])=0 AND
((unsigned char)input[0].float_state_arr[4])=0 AND
input[0].x_arr[8]<70.000000 AND
((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))/14.700000)=<1.660000 AND
((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))/14.700000)<0.130000

Output Values for case 108: (Symbolic,Concrete)
return value = 0, 0
ret_val[0].float_state_arr[0] = (input[0].float_state_arr[0]+0.010000), -370.990000
ret_val[0].float_state_arr[1] = input[0].float_state_arr[1], -78.000000
ret_val[0].float_state_arr[2] = (input[0].float_state_arr[2]+(((input[0].x_arr[9]+-((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))))*0.413280)*0.010000)), 441.000000
ret_val[0].float_state_arr[3] = 1.000000, 1.000000
ret_val[0].float_state_arr[4] = 0.000000, 0.000000
ret_val[0].float_state_arr[5] = 0.000000, 0.000000
ret_val[0].float_state_arr[6] = input[0].float_state_arr[6], -73.000000
ret_val[0].output_arr[0] = 0.130000, 0.130000
ret_val[0].output_arr[1] = 1.000000, 1.000000
ret_val[0].output_arr[2] = 14.700000, 14.700000

to explore negation deepest unexplored condition of predicate,
Path Predicate Prefix to solve :
afc.c: +140 input[0].x_arr[10]=<-1.000000
afc.c: -146 (input[0].float_state_arr[0]+0.010000)<10.000000
afc.c: -148 ((unsigned char)input[0].float_state_arr[5])=0
afc.c: -151 ((unsigned char)input[0].float_state_arr[4])=0
afc.c: -158 input[0].x_arr[8]<70.000000
afc.c: +160 1<>0
afc.c: -162 0=0
afc.c: -182 1<>0
afc.c: +191 1<>0
afc.c: -205 ((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))/14.700000)=<1.660000
afc.c: -207 ((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))/14.700000)>=0.130000
Path Prefix to cover :
afc.c
+140 -146 -148 -151 -158 +160 -162 -182 +191 -205 -207


TEST CASE 109

Dimensions:
input__controller = 1;
input__controller[0].input_arr = 1;
input__controller[0].int_state_arr = 0;
input__controller[0].float_state_arr = 7;
input__controller[0].x_arr = 13;
ret_val__controller = 1;
ret_val__controller[0].int_state_arr = 0;
ret_val__controller[0].float_state_arr = 7;
ret_val__controller[0].output_arr = 3;

Other input values:
input__controller[0].input_arr[0] = -423.000000;
input__controller[0].float_state_arr[0] = -371.000000;
input__controller[0].float_state_arr[1] = -78.000000;
input__controller[0].float_state_arr[2] = -486.000000;
input__controller[0].float_state_arr[3] = 272.000000;
input__controller[0].float_state_arr[4] = 0.900000;
input__controller[0].float_state_arr[5] = -0.200000;
input__controller[0].float_state_arr[6] = -73.000000;
input__controller[0].x_arr[0] = -493.000000;
input__controller[0].x_arr[1] = 170.000000;
input__controller[0].x_arr[2] = -8.000000;
input__controller[0].x_arr[3] = -463.000000;
input__controller[0].x_arr[4] = -387.000000;
input__controller[0].x_arr[5] = -245.000000;
input__controller[0].x_arr[6] = 150.000000;
input__controller[0].x_arr[7] = -0.000795;
input__controller[0].x_arr[8] = -478.000000;
input__controller[0].x_arr[9] = 6.000000;
input__controller[0].x_arr[10] = -793.000000;
input__controller[0].x_arr[11] = 173.000000;
input__controller[0].x_arr[12] = -343.000000;
ret_val__controller[0].float_state_arr[0] = 397.000000;
ret_val__controller[0].float_state_arr[1] = -241.000000;
ret_val__controller[0].float_state_arr[2] = -268.000000;
ret_val__controller[0].float_state_arr[3] = -365.000000;
ret_val__controller[0].float_state_arr[4] = -94.000000;
ret_val__controller[0].float_state_arr[5] = -68.000000;
ret_val__controller[0].float_state_arr[6] = -139.000000;
ret_val__controller[0].output_arr[0] = 438.000000;
ret_val__controller[0].output_arr[1] = -491.000000;
ret_val__controller[0].output_arr[2] = -16.000000;

Result:
unknown

Path Covered :
afc.c
+140 -146 -148 -151 -158 +160 -162 -182 +191 -205 -207


Path Predicate for case 109:
afc.c: +140 input[0].x_arr[10]=<-1.000000
afc.c: -146 (input[0].float_state_arr[0]+0.010000)<10.000000
afc.c: -148 ((unsigned char)input[0].float_state_arr[5])=0
afc.c: -151 ((unsigned char)input[0].float_state_arr[4])=0
afc.c: -158 input[0].x_arr[8]<70.000000
afc.c: +160 1<>0
afc.c: -162 0=0
afc.c: -182 1<>0
afc.c: +191 1<>0
afc.c: -205 ((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))/14.700000)=<1.660000
afc.c: -207 ((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))/14.700000)>=0.130000

Simplified Path Predicate for case 109:
input[0].x_arr[10]=<-1.000000 AND
(input[0].float_state_arr[0]+0.010000)<10.000000 AND
((unsigned char)input[0].float_state_arr[5])=0 AND
((unsigned char)input[0].float_state_arr[4])=0 AND
input[0].x_arr[8]<70.000000 AND
((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))/14.700000)=<1.660000 AND
((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))/14.700000)>=0.130000

Output Values for case 109: (Symbolic,Concrete)
return value = 0, 0
ret_val[0].float_state_arr[0] = (input[0].float_state_arr[0]+0.010000), -370.990000
ret_val[0].float_state_arr[1] = input[0].float_state_arr[1], -78.000000
ret_val[0].float_state_arr[2] = (input[0].float_state_arr[2]+(((input[0].x_arr[9]+-((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))))*0.413280)*0.010000)), -486.000000
ret_val[0].float_state_arr[3] = 1.000000, 1.000000
ret_val[0].float_state_arr[4] = 0.000000, 0.000000
ret_val[0].float_state_arr[5] = 0.000000, 0.000000
ret_val[0].float_state_arr[6] = input[0].float_state_arr[6], -73.000000
ret_val[0].output_arr[0] = ((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))/14.700000), 0.408163
ret_val[0].output_arr[1] = 1.000000, 1.000000
ret_val[0].output_arr[2] = 14.700000, 14.700000

to explore negation deepest unexplored condition of predicate,
Path Predicate Prefix to solve :
afc.c: +140 input[0].x_arr[10]=<-1.000000
afc.c: -146 (input[0].float_state_arr[0]+0.010000)<10.000000
afc.c: -148 ((unsigned char)input[0].float_state_arr[5])=0
afc.c: -151 ((unsigned char)input[0].float_state_arr[4])=0
afc.c: -158 input[0].x_arr[8]<70.000000
afc.c: +160 1<>0
afc.c: -162 0=0
afc.c: -182 1<>0
afc.c: -191 1=0
Path Prefix to cover :
afc.c
+140 -146 -148 -151 -158 +160 -162 -182 -191
trivially infeasible

to explore negation deepest unexplored condition of predicate,
Path Predicate Prefix to solve :
afc.c: +140 input[0].x_arr[10]=<-1.000000
afc.c: -146 (input[0].float_state_arr[0]+0.010000)<10.000000
afc.c: -148 ((unsigned char)input[0].float_state_arr[5])=0
afc.c: -151 ((unsigned char)input[0].float_state_arr[4])=0
afc.c: -158 input[0].x_arr[8]<70.000000
afc.c: +160 1<>0
afc.c: -162 0=0
afc.c: +182 1=0
Path Prefix to cover :
afc.c
+140 -146 -148 -151 -158 +160 -162 +182
trivially infeasible

to explore negation deepest unexplored condition of predicate,
Path Predicate Prefix to solve :
afc.c: +140 input[0].x_arr[10]=<-1.000000
afc.c: -146 (input[0].float_state_arr[0]+0.010000)<10.000000
afc.c: -148 ((unsigned char)input[0].float_state_arr[5])=0
afc.c: -151 ((unsigned char)input[0].float_state_arr[4])=0
afc.c: -158 input[0].x_arr[8]<70.000000
afc.c: +160 1<>0
afc.c: +162 0<>0
Path Prefix to cover :
afc.c
+140 -146 -148 -151 -158 +160 +162
trivially infeasible

to explore negation deepest unexplored condition of predicate,
Path Predicate Prefix to solve :
afc.c: +140 input[0].x_arr[10]=<-1.000000
afc.c: -146 (input[0].float_state_arr[0]+0.010000)<10.000000
afc.c: -148 ((unsigned char)input[0].float_state_arr[5])=0
afc.c: -151 ((unsigned char)input[0].float_state_arr[4])=0
afc.c: -158 input[0].x_arr[8]<70.000000
afc.c: -160 1=0
Path Prefix to cover :
afc.c
+140 -146 -148 -151 -158 -160
trivially infeasible

to explore negation deepest unexplored condition of predicate,
Path Predicate Prefix to solve :
afc.c: +140 input[0].x_arr[10]=<-1.000000
afc.c: -146 (input[0].float_state_arr[0]+0.010000)<10.000000
afc.c: -148 ((unsigned char)input[0].float_state_arr[5])=0
afc.c: -151 ((unsigned char)input[0].float_state_arr[4])=0
afc.c: +158 input[0].x_arr[8]>=70.000000
Path Prefix to cover :
afc.c
+140 -146 -148 -151 +158


TEST CASE 110

Dimensions:
input__controller = 1;
input__controller[0].input_arr = 1;
input__controller[0].int_state_arr = 0;
input__controller[0].float_state_arr = 7;
input__controller[0].x_arr = 13;
ret_val__controller = 1;
ret_val__controller[0].int_state_arr = 0;
ret_val__controller[0].float_state_arr = 7;
ret_val__controller[0].output_arr = 3;

Other input values:
input__controller[0].input_arr[0] = -423.000000;
input__controller[0].float_state_arr[0] = -371.000000;
input__controller[0].float_state_arr[1] = -78.000000;
input__controller[0].float_state_arr[2] = -292.000000;
input__controller[0].float_state_arr[3] = 272.000000;
input__controller[0].float_state_arr[4] = 0.900000;
input__controller[0].float_state_arr[5] = -0.200000;
input__controller[0].float_state_arr[6] = -73.000000;
input__controller[0].x_arr[0] = -493.000000;
input__controller[0].x_arr[1] = 170.000000;
input__controller[0].x_arr[2] = -8.000000;
input__controller[0].x_arr[3] = -463.000000;
input__controller[0].x_arr[4] = -387.000000;
input__controller[0].x_arr[5] = -245.000000;
input__controller[0].x_arr[6] = 150.000000;
input__controller[0].x_arr[7] = -475.000000;
input__controller[0].x_arr[8] = 166.000000;
input__controller[0].x_arr[9] = -156.000000;
input__controller[0].x_arr[10] = -793.000000;
input__controller[0].x_arr[11] = 173.000000;
input__controller[0].x_arr[12] = -343.000000;
ret_val__controller[0].float_state_arr[0] = 397.000000;
ret_val__controller[0].float_state_arr[1] = -241.000000;
ret_val__controller[0].float_state_arr[2] = -268.000000;
ret_val__controller[0].float_state_arr[3] = -365.000000;
ret_val__controller[0].float_state_arr[4] = -94.000000;
ret_val__controller[0].float_state_arr[5] = -68.000000;
ret_val__controller[0].float_state_arr[6] = -139.000000;
ret_val__controller[0].output_arr[0] = 438.000000;
ret_val__controller[0].output_arr[1] = -491.000000;
ret_val__controller[0].output_arr[2] = -16.000000;

Result:
unknown

Path Covered :
afc.c
+140 -146 -148 -151 +158 +160 -162 -182 +191 +205


Path Predicate for case 110:
afc.c: +140 input[0].x_arr[10]=<-1.000000
afc.c: -146 (input[0].float_state_arr[0]+0.010000)<10.000000
afc.c: -148 ((unsigned char)input[0].float_state_arr[5])=0
afc.c: -151 ((unsigned char)input[0].float_state_arr[4])=0
afc.c: +158 input[0].x_arr[8]>=70.000000
afc.c: +160 1<>0
afc.c: -162 0=0
afc.c: -182 1<>0
afc.c: +191 1<>0
afc.c: +205 ((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))/14.700000)>1.660000

Simplified Path Predicate for case 110:
input[0].x_arr[10]=<-1.000000 AND
(input[0].float_state_arr[0]+0.010000)<10.000000 AND
((unsigned char)input[0].float_state_arr[5])=0 AND
((unsigned char)input[0].float_state_arr[4])=0 AND
input[0].x_arr[8]>=70.000000 AND
((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))/14.700000)>1.660000

Output Values for case 110: (Symbolic,Concrete)
return value = 0, 0
ret_val[0].float_state_arr[0] = (input[0].float_state_arr[0]+0.010000), -370.990000
ret_val[0].float_state_arr[1] = input[0].float_state_arr[1], -78.000000
ret_val[0].float_state_arr[2] = (input[0].float_state_arr[2]+(((input[0].x_arr[9]+-((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))))*0.413280)*0.010000)), -5957.592441
ret_val[0].float_state_arr[3] = 1.000000, 1.000000
ret_val[0].float_state_arr[4] = 1.000000, 1.000000
ret_val[0].float_state_arr[5] = 0.000000, 0.000000
ret_val[0].float_state_arr[6] = input[0].float_state_arr[6], -73.000000
ret_val[0].output_arr[0] = 1.660000, 1.660000
ret_val[0].output_arr[1] = 1.000000, 1.000000
ret_val[0].output_arr[2] = 14.700000, 14.700000

to explore negation deepest unexplored condition of predicate,
Path Predicate Prefix to solve :
afc.c: +140 input[0].x_arr[10]=<-1.000000
afc.c: -146 (input[0].float_state_arr[0]+0.010000)<10.000000
afc.c: -148 ((unsigned char)input[0].float_state_arr[5])=0
afc.c: -151 ((unsigned char)input[0].float_state_arr[4])=0
afc.c: +158 input[0].x_arr[8]>=70.000000
afc.c: +160 1<>0
afc.c: -162 0=0
afc.c: -182 1<>0
afc.c: +191 1<>0
afc.c: -205 ((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))/14.700000)=<1.660000
Path Prefix to cover :
afc.c
+140 -146 -148 -151 +158 +160 -162 -182 +191 -205


TEST CASE 111

Dimensions:
input__controller = 1;
input__controller[0].input_arr = 1;
input__controller[0].int_state_arr = 0;
input__controller[0].float_state_arr = 7;
input__controller[0].x_arr = 13;
ret_val__controller = 1;
ret_val__controller[0].int_state_arr = 0;
ret_val__controller[0].float_state_arr = 7;
ret_val__controller[0].output_arr = 3;

Other input values:
input__controller[0].input_arr[0] = -423.000000;
input__controller[0].float_state_arr[0] = -371.000000;
input__controller[0].float_state_arr[1] = -78.000000;
input__controller[0].float_state_arr[2] = 401.000000;
input__controller[0].float_state_arr[3] = 272.000000;
input__controller[0].float_state_arr[4] = 0.900000;
input__controller[0].float_state_arr[5] = -0.200000;
input__controller[0].float_state_arr[6] = -73.000000;
input__controller[0].x_arr[0] = -493.000000;
input__controller[0].x_arr[1] = 170.000000;
input__controller[0].x_arr[2] = -8.000000;
input__controller[0].x_arr[3] = -463.000000;
input__controller[0].x_arr[4] = -387.000000;
input__controller[0].x_arr[5] = -245.000000;
input__controller[0].x_arr[6] = 150.000000;
input__controller[0].x_arr[7] = 0.000000;
input__controller[0].x_arr[8] = 166.000000;
input__controller[0].x_arr[9] = -0.366000;
input__controller[0].x_arr[10] = -793.000000;
input__controller[0].x_arr[11] = 173.000000;
input__controller[0].x_arr[12] = -343.000000;
ret_val__controller[0].float_state_arr[0] = 397.000000;
ret_val__controller[0].float_state_arr[1] = -241.000000;
ret_val__controller[0].float_state_arr[2] = -268.000000;
ret_val__controller[0].float_state_arr[3] = -365.000000;
ret_val__controller[0].float_state_arr[4] = -94.000000;
ret_val__controller[0].float_state_arr[5] = -68.000000;
ret_val__controller[0].float_state_arr[6] = -139.000000;
ret_val__controller[0].output_arr[0] = 438.000000;
ret_val__controller[0].output_arr[1] = -491.000000;
ret_val__controller[0].output_arr[2] = -16.000000;

Result:
unknown

Path Covered :
afc.c
+140 -146 -148 -151 +158 +160 -162 -182 +191 -205 +207


Path Predicate for case 111:
afc.c: +140 input[0].x_arr[10]=<-1.000000
afc.c: -146 (input[0].float_state_arr[0]+0.010000)<10.000000
afc.c: -148 ((unsigned char)input[0].float_state_arr[5])=0
afc.c: -151 ((unsigned char)input[0].float_state_arr[4])=0
afc.c: +158 input[0].x_arr[8]>=70.000000
afc.c: +160 1<>0
afc.c: -162 0=0
afc.c: -182 1<>0
afc.c: +191 1<>0
afc.c: -205 ((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))/14.700000)=<1.660000
afc.c: +207 ((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))/14.700000)<0.130000

Simplified Path Predicate for case 111:
input[0].x_arr[10]=<-1.000000 AND
(input[0].float_state_arr[0]+0.010000)<10.000000 AND
((unsigned char)input[0].float_state_arr[5])=0 AND
((unsigned char)input[0].float_state_arr[4])=0 AND
input[0].x_arr[8]>=70.000000 AND
((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))/14.700000)=<1.660000 AND
((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))/14.700000)<0.130000

Output Values for case 111: (Symbolic,Concrete)
return value = 0, 0
ret_val[0].float_state_arr[0] = (input[0].float_state_arr[0]+0.010000), -370.990000
ret_val[0].float_state_arr[1] = input[0].float_state_arr[1], -78.000000
ret_val[0].float_state_arr[2] = (input[0].float_state_arr[2]+(((input[0].x_arr[9]+-((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))))*0.413280)*0.010000)), 401.000000
ret_val[0].float_state_arr[3] = 1.000000, 1.000000
ret_val[0].float_state_arr[4] = 1.000000, 1.000000
ret_val[0].float_state_arr[5] = 0.000000, 0.000000
ret_val[0].float_state_arr[6] = input[0].float_state_arr[6], -73.000000
ret_val[0].output_arr[0] = 0.130000, 0.130000
ret_val[0].output_arr[1] = 1.000000, 1.000000
ret_val[0].output_arr[2] = 14.700000, 14.700000

to explore negation deepest unexplored condition of predicate,
Path Predicate Prefix to solve :
afc.c: +140 input[0].x_arr[10]=<-1.000000
afc.c: -146 (input[0].float_state_arr[0]+0.010000)<10.000000
afc.c: -148 ((unsigned char)input[0].float_state_arr[5])=0
afc.c: -151 ((unsigned char)input[0].float_state_arr[4])=0
afc.c: +158 input[0].x_arr[8]>=70.000000
afc.c: +160 1<>0
afc.c: -162 0=0
afc.c: -182 1<>0
afc.c: +191 1<>0
afc.c: -205 ((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))/14.700000)=<1.660000
afc.c: -207 ((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))/14.700000)>=0.130000
Path Prefix to cover :
afc.c
+140 -146 -148 -151 +158 +160 -162 -182 +191 -205 -207


TEST CASE 112

Dimensions:
input__controller = 1;
input__controller[0].input_arr = 1;
input__controller[0].int_state_arr = 0;
input__controller[0].float_state_arr = 7;
input__controller[0].x_arr = 13;
ret_val__controller = 1;
ret_val__controller[0].int_state_arr = 0;
ret_val__controller[0].float_state_arr = 7;
ret_val__controller[0].output_arr = 3;

Other input values:
input__controller[0].input_arr[0] = -423.000000;
input__controller[0].float_state_arr[0] = -371.000000;
input__controller[0].float_state_arr[1] = -78.000000;
input__controller[0].float_state_arr[2] = -285.000000;
input__controller[0].float_state_arr[3] = 272.000000;
input__controller[0].float_state_arr[4] = 0.900000;
input__controller[0].float_state_arr[5] = -0.200000;
input__controller[0].float_state_arr[6] = -73.000000;
input__controller[0].x_arr[0] = -493.000000;
input__controller[0].x_arr[1] = 170.000000;
input__controller[0].x_arr[2] = -8.000000;
input__controller[0].x_arr[3] = -463.000000;
input__controller[0].x_arr[4] = -387.000000;
input__controller[0].x_arr[5] = -245.000000;
input__controller[0].x_arr[6] = 150.000000;
input__controller[0].x_arr[7] = -96942.899144;
input__controller[0].x_arr[8] = 166.000000;
input__controller[0].x_arr[9] = 2.000000;
input__controller[0].x_arr[10] = -793.000000;
input__controller[0].x_arr[11] = 173.000000;
input__controller[0].x_arr[12] = -343.000000;
ret_val__controller[0].float_state_arr[0] = 397.000000;
ret_val__controller[0].float_state_arr[1] = -241.000000;
ret_val__controller[0].float_state_arr[2] = -268.000000;
ret_val__controller[0].float_state_arr[3] = -365.000000;
ret_val__controller[0].float_state_arr[4] = -94.000000;
ret_val__controller[0].float_state_arr[5] = -68.000000;
ret_val__controller[0].float_state_arr[6] = -139.000000;
ret_val__controller[0].output_arr[0] = 438.000000;
ret_val__controller[0].output_arr[1] = -491.000000;
ret_val__controller[0].output_arr[2] = -16.000000;

Result:
unknown

Path Covered :
afc.c
+140 -146 -148 -151 +158 +160 -162 -182 +191 -205 -207


Path Predicate for case 112:
afc.c: +140 input[0].x_arr[10]=<-1.000000
afc.c: -146 (input[0].float_state_arr[0]+0.010000)<10.000000
afc.c: -148 ((unsigned char)input[0].float_state_arr[5])=0
afc.c: -151 ((unsigned char)input[0].float_state_arr[4])=0
afc.c: +158 input[0].x_arr[8]>=70.000000
afc.c: +160 1<>0
afc.c: -162 0=0
afc.c: -182 1<>0
afc.c: +191 1<>0
afc.c: -205 ((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))/14.700000)=<1.660000
afc.c: -207 ((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))/14.700000)>=0.130000

Simplified Path Predicate for case 112:
input[0].x_arr[10]=<-1.000000 AND
(input[0].float_state_arr[0]+0.010000)<10.000000 AND
((unsigned char)input[0].float_state_arr[5])=0 AND
((unsigned char)input[0].float_state_arr[4])=0 AND
input[0].x_arr[8]>=70.000000 AND
((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))/14.700000)=<1.660000 AND
((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))/14.700000)>=0.130000

Output Values for case 112: (Symbolic,Concrete)
return value = 0, 0
ret_val[0].float_state_arr[0] = (input[0].float_state_arr[0]+0.010000), -370.990000
ret_val[0].float_state_arr[1] = input[0].float_state_arr[1], -78.000000
ret_val[0].float_state_arr[2] = (input[0].float_state_arr[2]+(((input[0].x_arr[9]+-((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))))*0.413280)*0.010000)), -285.000000
ret_val[0].float_state_arr[3] = 1.000000, 1.000000
ret_val[0].float_state_arr[4] = 1.000000, 1.000000
ret_val[0].float_state_arr[5] = 0.000000, 0.000000
ret_val[0].float_state_arr[6] = input[0].float_state_arr[6], -73.000000
ret_val[0].output_arr[0] = ((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))/14.700000), 0.136054
ret_val[0].output_arr[1] = 1.000000, 1.000000
ret_val[0].output_arr[2] = 14.700000, 14.700000

to explore negation deepest unexplored condition of predicate,
Path Predicate Prefix to solve :
afc.c: +140 input[0].x_arr[10]=<-1.000000
afc.c: -146 (input[0].float_state_arr[0]+0.010000)<10.000000
afc.c: -148 ((unsigned char)input[0].float_state_arr[5])=0
afc.c: -151 ((unsigned char)input[0].float_state_arr[4])=0
afc.c: +158 input[0].x_arr[8]>=70.000000
afc.c: +160 1<>0
afc.c: -162 0=0
afc.c: -182 1<>0
afc.c: -191 1=0
Path Prefix to cover :
afc.c
+140 -146 -148 -151 +158 +160 -162 -182 -191
trivially infeasible

to explore negation deepest unexplored condition of predicate,
Path Predicate Prefix to solve :
afc.c: +140 input[0].x_arr[10]=<-1.000000
afc.c: -146 (input[0].float_state_arr[0]+0.010000)<10.000000
afc.c: -148 ((unsigned char)input[0].float_state_arr[5])=0
afc.c: -151 ((unsigned char)input[0].float_state_arr[4])=0
afc.c: +158 input[0].x_arr[8]>=70.000000
afc.c: +160 1<>0
afc.c: -162 0=0
afc.c: +182 1=0
Path Prefix to cover :
afc.c
+140 -146 -148 -151 +158 +160 -162 +182
trivially infeasible

to explore negation deepest unexplored condition of predicate,
Path Predicate Prefix to solve :
afc.c: +140 input[0].x_arr[10]=<-1.000000
afc.c: -146 (input[0].float_state_arr[0]+0.010000)<10.000000
afc.c: -148 ((unsigned char)input[0].float_state_arr[5])=0
afc.c: -151 ((unsigned char)input[0].float_state_arr[4])=0
afc.c: +158 input[0].x_arr[8]>=70.000000
afc.c: +160 1<>0
afc.c: +162 0<>0
Path Prefix to cover :
afc.c
+140 -146 -148 -151 +158 +160 +162
trivially infeasible

to explore negation deepest unexplored condition of predicate,
Path Predicate Prefix to solve :
afc.c: +140 input[0].x_arr[10]=<-1.000000
afc.c: -146 (input[0].float_state_arr[0]+0.010000)<10.000000
afc.c: -148 ((unsigned char)input[0].float_state_arr[5])=0
afc.c: -151 ((unsigned char)input[0].float_state_arr[4])=0
afc.c: +158 input[0].x_arr[8]>=70.000000
afc.c: -160 1=0
Path Prefix to cover :
afc.c
+140 -146 -148 -151 +158 -160
trivially infeasible

to explore negation deepest unexplored condition of predicate,
Path Predicate Prefix to solve :
afc.c: +140 input[0].x_arr[10]=<-1.000000
afc.c: +146 (input[0].float_state_arr[0]+0.010000)>=10.000000
Path Prefix to cover :
afc.c
+140 +146


TEST CASE 113

Dimensions:
input__controller = 1;
input__controller[0].input_arr = 1;
input__controller[0].int_state_arr = 0;
input__controller[0].float_state_arr = 7;
input__controller[0].x_arr = 13;
ret_val__controller = 1;
ret_val__controller[0].int_state_arr = 0;
ret_val__controller[0].float_state_arr = 7;
ret_val__controller[0].output_arr = 3;

Other input values:
input__controller[0].input_arr[0] = -423.000000;
input__controller[0].float_state_arr[0] = 208.990000;
input__controller[0].float_state_arr[1] = -78.000000;
input__controller[0].float_state_arr[2] = -292.000000;
input__controller[0].float_state_arr[3] = 272.000000;
input__controller[0].float_state_arr[4] = -193.000000;
input__controller[0].float_state_arr[5] = -384.000000;
input__controller[0].float_state_arr[6] = -73.000000;
input__controller[0].x_arr[0] = -493.000000;
input__controller[0].x_arr[1] = 170.000000;
input__controller[0].x_arr[2] = -8.000000;
input__controller[0].x_arr[3] = -463.000000;
input__controller[0].x_arr[4] = -387.000000;
input__controller[0].x_arr[5] = -245.000000;
input__controller[0].x_arr[6] = 150.000000;
input__controller[0].x_arr[7] = -475.000000;
input__controller[0].x_arr[8] = -478.000000;
input__controller[0].x_arr[9] = -156.000000;
input__controller[0].x_arr[10] = -793.000000;
input__controller[0].x_arr[11] = 173.000000;
input__controller[0].x_arr[12] = -343.000000;
ret_val__controller[0].float_state_arr[0] = 397.000000;
ret_val__controller[0].float_state_arr[1] = -241.000000;
ret_val__controller[0].float_state_arr[2] = -268.000000;
ret_val__controller[0].float_state_arr[3] = -365.000000;
ret_val__controller[0].float_state_arr[4] = -94.000000;
ret_val__controller[0].float_state_arr[5] = -68.000000;
ret_val__controller[0].float_state_arr[6] = -139.000000;
ret_val__controller[0].output_arr[0] = 438.000000;
ret_val__controller[0].output_arr[1] = -491.000000;
ret_val__controller[0].output_arr[2] = -16.000000;

Result:
unknown

Path Covered :
afc.c
+140 +146 +151 -158 +160 +162 -162b -182 +191 +205


Path Predicate for case 113:
afc.c: +140 input[0].x_arr[10]=<-1.000000
afc.c: +146 (input[0].float_state_arr[0]+0.010000)>=10.000000
afc.c: +151 ((unsigned char)input[0].float_state_arr[4])<>0
afc.c: -158 input[0].x_arr[8]<50.000000
afc.c: +160 1<>0
afc.c: +162 1<>0
afc.c: -162b 0=0
afc.c: -182 1<>0
afc.c: +191 1<>0
afc.c: +205 ((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))/14.700000)>1.660000

Simplified Path Predicate for case 113:
input[0].x_arr[10]=<-1.000000 AND
(input[0].float_state_arr[0]+0.010000)>=10.000000 AND
((unsigned char)input[0].float_state_arr[4])<>0 AND
input[0].x_arr[8]<50.000000 AND
((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))/14.700000)>1.660000

Output Values for case 113: (Symbolic,Concrete)
return value = 0, 0
ret_val[0].float_state_arr[0] = (input[0].float_state_arr[0]+0.010000), 209.000000
ret_val[0].float_state_arr[1] = input[0].float_state_arr[1], -78.000000
ret_val[0].float_state_arr[2] = (input[0].float_state_arr[2]+(((input[0].x_arr[9]+-((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))))*0.413280)*0.010000)), -5957.592441
ret_val[0].float_state_arr[3] = 1.000000, 1.000000
ret_val[0].float_state_arr[4] = 0.000000, 0.000000
ret_val[0].float_state_arr[5] = 1.000000, 1.000000
ret_val[0].float_state_arr[6] = input[0].float_state_arr[6], -73.000000
ret_val[0].output_arr[0] = 1.660000, 1.660000
ret_val[0].output_arr[1] = 1.000000, 1.000000
ret_val[0].output_arr[2] = 14.700000, 14.700000

to explore negation deepest unexplored condition of predicate,
Path Predicate Prefix to solve :
afc.c: +140 input[0].x_arr[10]=<-1.000000
afc.c: +146 (input[0].float_state_arr[0]+0.010000)>=10.000000
afc.c: +151 ((unsigned char)input[0].float_state_arr[4])<>0
afc.c: -158 input[0].x_arr[8]<50.000000
afc.c: +160 1<>0
afc.c: +162 1<>0
afc.c: -162b 0=0
afc.c: -182 1<>0
afc.c: +191 1<>0
afc.c: -205 ((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))/14.700000)=<1.660000
Path Prefix to cover :
afc.c
+140 +146 +151 -158 +160 +162 -162b -182 +191 -205


TEST CASE 114

Dimensions:
input__controller = 1;
input__controller[0].input_arr = 1;
input__controller[0].int_state_arr = 0;
input__controller[0].float_state_arr = 7;
input__controller[0].x_arr = 13;
ret_val__controller = 1;
ret_val__controller[0].int_state_arr = 0;
ret_val__controller[0].float_state_arr = 7;
ret_val__controller[0].output_arr = 3;

Other input values:
input__controller[0].input_arr[0] = -423.000000;
input__controller[0].float_state_arr[0] = 208.990000;
input__controller[0].float_state_arr[1] = -78.000000;
input__controller[0].float_state_arr[2] = 70.000000;
input__controller[0].float_state_arr[3] = 272.000000;
input__controller[0].float_state_arr[4] = -193.000000;
input__controller[0].float_state_arr[5] = -384.000000;
input__controller[0].float_state_arr[6] = -73.000000;
input__controller[0].x_arr[0] = -493.000000;
input__controller[0].x_arr[1] = 170.000000;
input__controller[0].x_arr[2] = -8.000000;
input__controller[0].x_arr[3] = -463.000000;
input__controller[0].x_arr[4] = -387.000000;
input__controller[0].x_arr[5] = -245.000000;
input__controller[0].x_arr[6] = 150.000000;
input__controller[0].x_arr[7] = 0.000000;
input__controller[0].x_arr[8] = -478.000000;
input__controller[0].x_arr[9] = -0.366000;
input__controller[0].x_arr[10] = -793.000000;
input__controller[0].x_arr[11] = 173.000000;
input__controller[0].x_arr[12] = -343.000000;
ret_val__controller[0].float_state_arr[0] = 397.000000;
ret_val__controller[0].float_state_arr[1] = -241.000000;
ret_val__controller[0].float_state_arr[2] = -268.000000;
ret_val__controller[0].float_state_arr[3] = -365.000000;
ret_val__controller[0].float_state_arr[4] = -94.000000;
ret_val__controller[0].float_state_arr[5] = -68.000000;
ret_val__controller[0].float_state_arr[6] = -139.000000;
ret_val__controller[0].output_arr[0] = 438.000000;
ret_val__controller[0].output_arr[1] = -491.000000;
ret_val__controller[0].output_arr[2] = -16.000000;

Result:
unknown

Path Covered :
afc.c
+140 +146 +151 -158 +160 +162 -162b -182 +191 -205 +207


Path Predicate for case 114:
afc.c: +140 input[0].x_arr[10]=<-1.000000
afc.c: +146 (input[0].float_state_arr[0]+0.010000)>=10.000000
afc.c: +151 ((unsigned char)input[0].float_state_arr[4])<>0
afc.c: -158 input[0].x_arr[8]<50.000000
afc.c: +160 1<>0
afc.c: +162 1<>0
afc.c: -162b 0=0
afc.c: -182 1<>0
afc.c: +191 1<>0
afc.c: -205 ((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))/14.700000)=<1.660000
afc.c: +207 ((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))/14.700000)<0.130000

Simplified Path Predicate for case 114:
input[0].x_arr[10]=<-1.000000 AND
(input[0].float_state_arr[0]+0.010000)>=10.000000 AND
((unsigned char)input[0].float_state_arr[4])<>0 AND
input[0].x_arr[8]<50.000000 AND
((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))/14.700000)=<1.660000 AND
((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))/14.700000)<0.130000

Output Values for case 114: (Symbolic,Concrete)
return value = 0, 0
ret_val[0].float_state_arr[0] = (input[0].float_state_arr[0]+0.010000), 209.000000
ret_val[0].float_state_arr[1] = input[0].float_state_arr[1], -78.000000
ret_val[0].float_state_arr[2] = (input[0].float_state_arr[2]+(((input[0].x_arr[9]+-((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))))*0.413280)*0.010000)), 70.000000
ret_val[0].float_state_arr[3] = 1.000000, 1.000000
ret_val[0].float_state_arr[4] = 0.000000, 0.000000
ret_val[0].float_state_arr[5] = 1.000000, 1.000000
ret_val[0].float_state_arr[6] = input[0].float_state_arr[6], -73.000000
ret_val[0].output_arr[0] = 0.130000, 0.130000
ret_val[0].output_arr[1] = 1.000000, 1.000000
ret_val[0].output_arr[2] = 14.700000, 14.700000

to explore negation deepest unexplored condition of predicate,
Path Predicate Prefix to solve :
afc.c: +140 input[0].x_arr[10]=<-1.000000
afc.c: +146 (input[0].float_state_arr[0]+0.010000)>=10.000000
afc.c: +151 ((unsigned char)input[0].float_state_arr[4])<>0
afc.c: -158 input[0].x_arr[8]<50.000000
afc.c: +160 1<>0
afc.c: +162 1<>0
afc.c: -162b 0=0
afc.c: -182 1<>0
afc.c: +191 1<>0
afc.c: -205 ((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))/14.700000)=<1.660000
afc.c: -207 ((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))/14.700000)>=0.130000
Path Prefix to cover :
afc.c
+140 +146 +151 -158 +160 +162 -162b -182 +191 -205 -207


TEST CASE 115

Dimensions:
input__controller = 1;
input__controller[0].input_arr = 1;
input__controller[0].int_state_arr = 0;
input__controller[0].float_state_arr = 7;
input__controller[0].x_arr = 13;
ret_val__controller = 1;
ret_val__controller[0].int_state_arr = 0;
ret_val__controller[0].float_state_arr = 7;
ret_val__controller[0].output_arr = 3;

Other input values:
input__controller[0].input_arr[0] = -423.000000;
input__controller[0].float_state_arr[0] = 208.990000;
input__controller[0].float_state_arr[1] = -78.000000;
input__controller[0].float_state_arr[2] = -478.000000;
input__controller[0].float_state_arr[3] = 272.000000;
input__controller[0].float_state_arr[4] = -193.000000;
input__controller[0].float_state_arr[5] = -384.000000;
input__controller[0].float_state_arr[6] = -73.000000;
input__controller[0].x_arr[0] = -493.000000;
input__controller[0].x_arr[1] = 170.000000;
input__controller[0].x_arr[2] = -8.000000;
input__controller[0].x_arr[3] = -463.000000;
input__controller[0].x_arr[4] = -387.000000;
input__controller[0].x_arr[5] = -245.000000;
input__controller[0].x_arr[6] = 150.000000;
input__controller[0].x_arr[7] = -161983.898015;
input__controller[0].x_arr[8] = -478.000000;
input__controller[0].x_arr[9] = 15.000000;
input__controller[0].x_arr[10] = -793.000000;
input__controller[0].x_arr[11] = 173.000000;
input__controller[0].x_arr[12] = -343.000000;
ret_val__controller[0].float_state_arr[0] = 397.000000;
ret_val__controller[0].float_state_arr[1] = -241.000000;
ret_val__controller[0].float_state_arr[2] = -268.000000;
ret_val__controller[0].float_state_arr[3] = -365.000000;
ret_val__controller[0].float_state_arr[4] = -94.000000;
ret_val__controller[0].float_state_arr[5] = -68.000000;
ret_val__controller[0].float_state_arr[6] = -139.000000;
ret_val__controller[0].output_arr[0] = 438.000000;
ret_val__controller[0].output_arr[1] = -491.000000;
ret_val__controller[0].output_arr[2] = -16.000000;

Result:
unknown

Path Covered :
afc.c
+140 +146 +151 -158 +160 +162 -162b -182 +191 -205 -207


Path Predicate for case 115:
afc.c: +140 input[0].x_arr[10]=<-1.000000
afc.c: +146 (input[0].float_state_arr[0]+0.010000)>=10.000000
afc.c: +151 ((unsigned char)input[0].float_state_arr[4])<>0
afc.c: -158 input[0].x_arr[8]<50.000000
afc.c: +160 1<>0
afc.c: +162 1<>0
afc.c: -162b 0=0
afc.c: -182 1<>0
afc.c: +191 1<>0
afc.c: -205 ((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))/14.700000)=<1.660000
afc.c: -207 ((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))/14.700000)>=0.130000

Simplified Path Predicate for case 115:
input[0].x_arr[10]=<-1.000000 AND
(input[0].float_state_arr[0]+0.010000)>=10.000000 AND
((unsigned char)input[0].float_state_arr[4])<>0 AND
input[0].x_arr[8]<50.000000 AND
((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))/14.700000)=<1.660000 AND
((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))/14.700000)>=0.130000

Output Values for case 115: (Symbolic,Concrete)
return value = 0, 0
ret_val[0].float_state_arr[0] = (input[0].float_state_arr[0]+0.010000), 209.000000
ret_val[0].float_state_arr[1] = input[0].float_state_arr[1], -78.000000
ret_val[0].float_state_arr[2] = (input[0].float_state_arr[2]+(((input[0].x_arr[9]+-((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))))*0.413280)*0.010000)), -478.000000
ret_val[0].float_state_arr[3] = 1.000000, 1.000000
ret_val[0].float_state_arr[4] = 0.000000, 0.000000
ret_val[0].float_state_arr[5] = 1.000000, 1.000000
ret_val[0].float_state_arr[6] = input[0].float_state_arr[6], -73.000000
ret_val[0].output_arr[0] = ((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))/14.700000), 1.020408
ret_val[0].output_arr[1] = 1.000000, 1.000000
ret_val[0].output_arr[2] = 14.700000, 14.700000

to explore negation deepest unexplored condition of predicate,
Path Predicate Prefix to solve :
afc.c: +140 input[0].x_arr[10]=<-1.000000
afc.c: +146 (input[0].float_state_arr[0]+0.010000)>=10.000000
afc.c: +151 ((unsigned char)input[0].float_state_arr[4])<>0
afc.c: -158 input[0].x_arr[8]<50.000000
afc.c: +160 1<>0
afc.c: +162 1<>0
afc.c: -162b 0=0
afc.c: -182 1<>0
afc.c: -191 1=0
Path Prefix to cover :
afc.c
+140 +146 +151 -158 +160 +162 -162b -182 -191
trivially infeasible

to explore negation deepest unexplored condition of predicate,
Path Predicate Prefix to solve :
afc.c: +140 input[0].x_arr[10]=<-1.000000
afc.c: +146 (input[0].float_state_arr[0]+0.010000)>=10.000000
afc.c: +151 ((unsigned char)input[0].float_state_arr[4])<>0
afc.c: -158 input[0].x_arr[8]<50.000000
afc.c: +160 1<>0
afc.c: +162 1<>0
afc.c: -162b 0=0
afc.c: +182 1=0
Path Prefix to cover :
afc.c
+140 +146 +151 -158 +160 +162 -162b +182
trivially infeasible

to explore negation deepest unexplored condition of predicate,
Path Predicate Prefix to solve :
afc.c: +140 input[0].x_arr[10]=<-1.000000
afc.c: +146 (input[0].float_state_arr[0]+0.010000)>=10.000000
afc.c: +151 ((unsigned char)input[0].float_state_arr[4])<>0
afc.c: -158 input[0].x_arr[8]<50.000000
afc.c: +160 1<>0
afc.c: +162 1<>0
afc.c: +162b 0<>0
Path Prefix to cover :
afc.c
+140 +146 +151 -158 +160 +162 +162b
trivially infeasible

to explore negation deepest unexplored condition of predicate,
Path Predicate Prefix to solve :
afc.c: +140 input[0].x_arr[10]=<-1.000000
afc.c: +146 (input[0].float_state_arr[0]+0.010000)>=10.000000
afc.c: +151 ((unsigned char)input[0].float_state_arr[4])<>0
afc.c: -158 input[0].x_arr[8]<50.000000
afc.c: +160 1<>0
afc.c: -162 1=0
Path Prefix to cover :
afc.c
+140 +146 +151 -158 +160 -162
trivially infeasible

to explore negation deepest unexplored condition of predicate,
Path Predicate Prefix to solve :
afc.c: +140 input[0].x_arr[10]=<-1.000000
afc.c: +146 (input[0].float_state_arr[0]+0.010000)>=10.000000
afc.c: +151 ((unsigned char)input[0].float_state_arr[4])<>0
afc.c: -158 input[0].x_arr[8]<50.000000
afc.c: -160 1=0
Path Prefix to cover :
afc.c
+140 +146 +151 -158 -160
trivially infeasible

to explore negation deepest unexplored condition of predicate,
Path Predicate Prefix to solve :
afc.c: +140 input[0].x_arr[10]=<-1.000000
afc.c: +146 (input[0].float_state_arr[0]+0.010000)>=10.000000
afc.c: +151 ((unsigned char)input[0].float_state_arr[4])<>0
afc.c: +158 input[0].x_arr[8]>=50.000000
Path Prefix to cover :
afc.c
+140 +146 +151 +158


TEST CASE 116

Dimensions:
input__controller = 1;
input__controller[0].input_arr = 1;
input__controller[0].int_state_arr = 0;
input__controller[0].float_state_arr = 7;
input__controller[0].x_arr = 13;
ret_val__controller = 1;
ret_val__controller[0].int_state_arr = 0;
ret_val__controller[0].float_state_arr = 7;
ret_val__controller[0].output_arr = 3;

Other input values:
input__controller[0].input_arr[0] = -423.000000;
input__controller[0].float_state_arr[0] = 208.990000;
input__controller[0].float_state_arr[1] = -78.000000;
input__controller[0].float_state_arr[2] = -292.000000;
input__controller[0].float_state_arr[3] = 272.000000;
input__controller[0].float_state_arr[4] = -193.000000;
input__controller[0].float_state_arr[5] = -384.000000;
input__controller[0].float_state_arr[6] = -73.000000;
input__controller[0].x_arr[0] = -493.000000;
input__controller[0].x_arr[1] = 170.000000;
input__controller[0].x_arr[2] = -8.000000;
input__controller[0].x_arr[3] = -463.000000;
input__controller[0].x_arr[4] = -387.000000;
input__controller[0].x_arr[5] = -245.000000;
input__controller[0].x_arr[6] = 150.000000;
input__controller[0].x_arr[7] = -475.000000;
input__controller[0].x_arr[8] = 607.000000;
input__controller[0].x_arr[9] = -156.000000;
input__controller[0].x_arr[10] = -793.000000;
input__controller[0].x_arr[11] = 173.000000;
input__controller[0].x_arr[12] = -343.000000;
ret_val__controller[0].float_state_arr[0] = 397.000000;
ret_val__controller[0].float_state_arr[1] = -241.000000;
ret_val__controller[0].float_state_arr[2] = -268.000000;
ret_val__controller[0].float_state_arr[3] = -365.000000;
ret_val__controller[0].float_state_arr[4] = -94.000000;
ret_val__controller[0].float_state_arr[5] = -68.000000;
ret_val__controller[0].float_state_arr[6] = -139.000000;
ret_val__controller[0].output_arr[0] = 438.000000;
ret_val__controller[0].output_arr[1] = -491.000000;
ret_val__controller[0].output_arr[2] = -16.000000;

Result:
unknown

Path Covered :
afc.c
+140 +146 +151 +158 +160 +162 +162b -182 +191 +205


Path Predicate for case 116:
afc.c: +140 input[0].x_arr[10]=<-1.000000
afc.c: +146 (input[0].float_state_arr[0]+0.010000)>=10.000000
afc.c: +151 ((unsigned char)input[0].float_state_arr[4])<>0
afc.c: +158 input[0].x_arr[8]>=50.000000
afc.c: +160 1<>0
afc.c: +162 1<>0
afc.c: +162b 1<>0
afc.c: -182 1<>0
afc.c: +191 1<>0
afc.c: +205 ((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))/12.500000)>1.660000

Simplified Path Predicate for case 116:
input[0].x_arr[10]=<-1.000000 AND
(input[0].float_state_arr[0]+0.010000)>=10.000000 AND
((unsigned char)input[0].float_state_arr[4])<>0 AND
input[0].x_arr[8]>=50.000000 AND
((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))/12.500000)>1.660000

Output Values for case 116: (Symbolic,Concrete)
return value = 0, 0
ret_val[0].float_state_arr[0] = (input[0].float_state_arr[0]+0.010000), 209.000000
ret_val[0].float_state_arr[1] = input[0].float_state_arr[1], -78.000000
ret_val[0].float_state_arr[2] = (input[0].float_state_arr[2]+(((input[0].x_arr[9]+-((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))))*0.413280)*0.010000)), -5957.592441
ret_val[0].float_state_arr[3] = 1.000000, 1.000000
ret_val[0].float_state_arr[4] = 1.000000, 1.000000
ret_val[0].float_state_arr[5] = 1.000000, 1.000000
ret_val[0].float_state_arr[6] = input[0].float_state_arr[6], -73.000000
ret_val[0].output_arr[0] = 1.660000, 1.660000
ret_val[0].output_arr[1] = 1.000000, 1.000000
ret_val[0].output_arr[2] = 12.500000, 12.500000

to explore negation deepest unexplored condition of predicate,
Path Predicate Prefix to solve :
afc.c: +140 input[0].x_arr[10]=<-1.000000
afc.c: +146 (input[0].float_state_arr[0]+0.010000)>=10.000000
afc.c: +151 ((unsigned char)input[0].float_state_arr[4])<>0
afc.c: +158 input[0].x_arr[8]>=50.000000
afc.c: +160 1<>0
afc.c: +162 1<>0
afc.c: +162b 1<>0
afc.c: -182 1<>0
afc.c: +191 1<>0
afc.c: -205 ((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))/12.500000)=<1.660000
Path Prefix to cover :
afc.c
+140 +146 +151 +158 +160 +162 +162b -182 +191 -205


TEST CASE 117

Dimensions:
input__controller = 1;
input__controller[0].input_arr = 1;
input__controller[0].int_state_arr = 0;
input__controller[0].float_state_arr = 7;
input__controller[0].x_arr = 13;
ret_val__controller = 1;
ret_val__controller[0].int_state_arr = 0;
ret_val__controller[0].float_state_arr = 7;
ret_val__controller[0].output_arr = 3;

Other input values:
input__controller[0].input_arr[0] = -423.000000;
input__controller[0].float_state_arr[0] = 208.990000;
input__controller[0].float_state_arr[1] = -78.000000;
input__controller[0].float_state_arr[2] = -308.000000;
input__controller[0].float_state_arr[3] = 272.000000;
input__controller[0].float_state_arr[4] = -193.000000;
input__controller[0].float_state_arr[5] = -384.000000;
input__controller[0].float_state_arr[6] = -73.000000;
input__controller[0].x_arr[0] = -493.000000;
input__controller[0].x_arr[1] = 170.000000;
input__controller[0].x_arr[2] = -8.000000;
input__controller[0].x_arr[3] = -463.000000;
input__controller[0].x_arr[4] = -387.000000;
input__controller[0].x_arr[5] = -245.000000;
input__controller[0].x_arr[6] = 150.000000;
input__controller[0].x_arr[7] = -0.000000;
input__controller[0].x_arr[8] = 607.000000;
input__controller[0].x_arr[9] = -0.366000;
input__controller[0].x_arr[10] = -793.000000;
input__controller[0].x_arr[11] = 173.000000;
input__controller[0].x_arr[12] = -343.000000;
ret_val__controller[0].float_state_arr[0] = 397.000000;
ret_val__controller[0].float_state_arr[1] = -241.000000;
ret_val__controller[0].float_state_arr[2] = -268.000000;
ret_val__controller[0].float_state_arr[3] = -365.000000;
ret_val__controller[0].float_state_arr[4] = -94.000000;
ret_val__controller[0].float_state_arr[5] = -68.000000;
ret_val__controller[0].float_state_arr[6] = -139.000000;
ret_val__controller[0].output_arr[0] = 438.000000;
ret_val__controller[0].output_arr[1] = -491.000000;
ret_val__controller[0].output_arr[2] = -16.000000;

Result:
unknown

Path Covered :
afc.c
+140 +146 +151 +158 +160 +162 +162b -182 +191 -205 +207


Path Predicate for case 117:
afc.c: +140 input[0].x_arr[10]=<-1.000000
afc.c: +146 (input[0].float_state_arr[0]+0.010000)>=10.000000
afc.c: +151 ((unsigned char)input[0].float_state_arr[4])<>0
afc.c: +158 input[0].x_arr[8]>=50.000000
afc.c: +160 1<>0
afc.c: +162 1<>0
afc.c: +162b 1<>0
afc.c: -182 1<>0
afc.c: +191 1<>0
afc.c: -205 ((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))/12.500000)=<1.660000
afc.c: +207 ((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))/12.500000)<0.130000

Simplified Path Predicate for case 117:
input[0].x_arr[10]=<-1.000000 AND
(input[0].float_state_arr[0]+0.010000)>=10.000000 AND
((unsigned char)input[0].float_state_arr[4])<>0 AND
input[0].x_arr[8]>=50.000000 AND
((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))/12.500000)=<1.660000 AND
((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))/12.500000)<0.130000

Output Values for case 117: (Symbolic,Concrete)
return value = 0, 0
ret_val[0].float_state_arr[0] = (input[0].float_state_arr[0]+0.010000), 209.000000
ret_val[0].float_state_arr[1] = input[0].float_state_arr[1], -78.000000
ret_val[0].float_state_arr[2] = (input[0].float_state_arr[2]+(((input[0].x_arr[9]+-((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))))*0.413280)*0.010000)), -308.000000
ret_val[0].float_state_arr[3] = 1.000000, 1.000000
ret_val[0].float_state_arr[4] = 1.000000, 1.000000
ret_val[0].float_state_arr[5] = 1.000000, 1.000000
ret_val[0].float_state_arr[6] = input[0].float_state_arr[6], -73.000000
ret_val[0].output_arr[0] = 0.130000, 0.130000
ret_val[0].output_arr[1] = 1.000000, 1.000000
ret_val[0].output_arr[2] = 12.500000, 12.500000

to explore negation deepest unexplored condition of predicate,
Path Predicate Prefix to solve :
afc.c: +140 input[0].x_arr[10]=<-1.000000
afc.c: +146 (input[0].float_state_arr[0]+0.010000)>=10.000000
afc.c: +151 ((unsigned char)input[0].float_state_arr[4])<>0
afc.c: +158 input[0].x_arr[8]>=50.000000
afc.c: +160 1<>0
afc.c: +162 1<>0
afc.c: +162b 1<>0
afc.c: -182 1<>0
afc.c: +191 1<>0
afc.c: -205 ((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))/12.500000)=<1.660000
afc.c: -207 ((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))/12.500000)>=0.130000
Path Prefix to cover :
afc.c
+140 +146 +151 +158 +160 +162 +162b -182 +191 -205 -207


TEST CASE 118

Dimensions:
input__controller = 1;
input__controller[0].input_arr = 1;
input__controller[0].int_state_arr = 0;
input__controller[0].float_state_arr = 7;
input__controller[0].x_arr = 13;
ret_val__controller = 1;
ret_val__controller[0].int_state_arr = 0;
ret_val__controller[0].float_state_arr = 7;
ret_val__controller[0].output_arr = 3;

Other input values:
input__controller[0].input_arr[0] = -423.000000;
input__controller[0].float_state_arr[0] = 208.990000;
input__controller[0].float_state_arr[1] = -78.000000;
input__controller[0].float_state_arr[2] = 127.000000;
input__controller[0].float_state_arr[3] = 272.000000;
input__controller[0].float_state_arr[4] = -193.000000;
input__controller[0].float_state_arr[5] = -384.000000;
input__controller[0].float_state_arr[6] = -73.000000;
input__controller[0].x_arr[0] = -493.000000;
input__controller[0].x_arr[1] = 170.000000;
input__controller[0].x_arr[2] = -8.000000;
input__controller[0].x_arr[3] = -463.000000;
input__controller[0].x_arr[4] = -387.000000;
input__controller[0].x_arr[5] = -245.000000;
input__controller[0].x_arr[6] = 150.000000;
input__controller[0].x_arr[7] = -0.017600;
input__controller[0].x_arr[8] = 607.000000;
input__controller[0].x_arr[9] = 9.000000;
input__controller[0].x_arr[10] = -793.000000;
input__controller[0].x_arr[11] = 173.000000;
input__controller[0].x_arr[12] = -343.000000;
ret_val__controller[0].float_state_arr[0] = 397.000000;
ret_val__controller[0].float_state_arr[1] = -241.000000;
ret_val__controller[0].float_state_arr[2] = -268.000000;
ret_val__controller[0].float_state_arr[3] = -365.000000;
ret_val__controller[0].float_state_arr[4] = -94.000000;
ret_val__controller[0].float_state_arr[5] = -68.000000;
ret_val__controller[0].float_state_arr[6] = -139.000000;
ret_val__controller[0].output_arr[0] = 438.000000;
ret_val__controller[0].output_arr[1] = -491.000000;
ret_val__controller[0].output_arr[2] = -16.000000;

Result:
unknown

Path Covered :
afc.c
+140 +146 +151 +158 +160 +162 +162b -182 +191 -205 -207


Path Predicate for case 118:
afc.c: +140 input[0].x_arr[10]=<-1.000000
afc.c: +146 (input[0].float_state_arr[0]+0.010000)>=10.000000
afc.c: +151 ((unsigned char)input[0].float_state_arr[4])<>0
afc.c: +158 input[0].x_arr[8]>=50.000000
afc.c: +160 1<>0
afc.c: +162 1<>0
afc.c: +162b 1<>0
afc.c: -182 1<>0
afc.c: +191 1<>0
afc.c: -205 ((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))/12.500000)=<1.660000
afc.c: -207 ((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))/12.500000)>=0.130000

Simplified Path Predicate for case 118:
input[0].x_arr[10]=<-1.000000 AND
(input[0].float_state_arr[0]+0.010000)>=10.000000 AND
((unsigned char)input[0].float_state_arr[4])<>0 AND
input[0].x_arr[8]>=50.000000 AND
((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))/12.500000)=<1.660000 AND
((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))/12.500000)>=0.130000

Output Values for case 118: (Symbolic,Concrete)
return value = 0, 0
ret_val[0].float_state_arr[0] = (input[0].float_state_arr[0]+0.010000), 209.000000
ret_val[0].float_state_arr[1] = input[0].float_state_arr[1], -78.000000
ret_val[0].float_state_arr[2] = (input[0].float_state_arr[2]+(((input[0].x_arr[9]+-((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))))*0.413280)*0.010000)), 127.000000
ret_val[0].float_state_arr[3] = 1.000000, 1.000000
ret_val[0].float_state_arr[4] = 1.000000, 1.000000
ret_val[0].float_state_arr[5] = 1.000000, 1.000000
ret_val[0].float_state_arr[6] = input[0].float_state_arr[6], -73.000000
ret_val[0].output_arr[0] = ((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))/12.500000), 0.720000
ret_val[0].output_arr[1] = 1.000000, 1.000000
ret_val[0].output_arr[2] = 12.500000, 12.500000

to explore negation deepest unexplored condition of predicate,
Path Predicate Prefix to solve :
afc.c: +140 input[0].x_arr[10]=<-1.000000
afc.c: +146 (input[0].float_state_arr[0]+0.010000)>=10.000000
afc.c: +151 ((unsigned char)input[0].float_state_arr[4])<>0
afc.c: +158 input[0].x_arr[8]>=50.000000
afc.c: +160 1<>0
afc.c: +162 1<>0
afc.c: +162b 1<>0
afc.c: -182 1<>0
afc.c: -191 1=0
Path Prefix to cover :
afc.c
+140 +146 +151 +158 +160 +162 +162b -182 -191
trivially infeasible

to explore negation deepest unexplored condition of predicate,
Path Predicate Prefix to solve :
afc.c: +140 input[0].x_arr[10]=<-1.000000
afc.c: +146 (input[0].float_state_arr[0]+0.010000)>=10.000000
afc.c: +151 ((unsigned char)input[0].float_state_arr[4])<>0
afc.c: +158 input[0].x_arr[8]>=50.000000
afc.c: +160 1<>0
afc.c: +162 1<>0
afc.c: +162b 1<>0
afc.c: +182 1=0
Path Prefix to cover :
afc.c
+140 +146 +151 +158 +160 +162 +162b +182
trivially infeasible

to explore negation deepest unexplored condition of predicate,
Path Predicate Prefix to solve :
afc.c: +140 input[0].x_arr[10]=<-1.000000
afc.c: +146 (input[0].float_state_arr[0]+0.010000)>=10.000000
afc.c: +151 ((unsigned char)input[0].float_state_arr[4])<>0
afc.c: +158 input[0].x_arr[8]>=50.000000
afc.c: +160 1<>0
afc.c: +162 1<>0
afc.c: -162b 1=0
Path Prefix to cover :
afc.c
+140 +146 +151 +158 +160 +162 -162b
trivially infeasible

to explore negation deepest unexplored condition of predicate,
Path Predicate Prefix to solve :
afc.c: +140 input[0].x_arr[10]=<-1.000000
afc.c: +146 (input[0].float_state_arr[0]+0.010000)>=10.000000
afc.c: +151 ((unsigned char)input[0].float_state_arr[4])<>0
afc.c: +158 input[0].x_arr[8]>=50.000000
afc.c: +160 1<>0
afc.c: -162 1=0
Path Prefix to cover :
afc.c
+140 +146 +151 +158 +160 -162
trivially infeasible

to explore negation deepest unexplored condition of predicate,
Path Predicate Prefix to solve :
afc.c: +140 input[0].x_arr[10]=<-1.000000
afc.c: +146 (input[0].float_state_arr[0]+0.010000)>=10.000000
afc.c: +151 ((unsigned char)input[0].float_state_arr[4])<>0
afc.c: +158 input[0].x_arr[8]>=50.000000
afc.c: -160 1=0
Path Prefix to cover :
afc.c
+140 +146 +151 +158 -160
trivially infeasible

to explore negation deepest unexplored condition of predicate,
Path Predicate Prefix to solve :
afc.c: +140 input[0].x_arr[10]=<-1.000000
afc.c: +146 (input[0].float_state_arr[0]+0.010000)>=10.000000
afc.c: -151 ((unsigned char)input[0].float_state_arr[4])=0
Path Prefix to cover :
afc.c
+140 +146 -151


TEST CASE 119

Dimensions:
input__controller = 1;
input__controller[0].input_arr = 1;
input__controller[0].int_state_arr = 0;
input__controller[0].float_state_arr = 7;
input__controller[0].x_arr = 13;
ret_val__controller = 1;
ret_val__controller[0].int_state_arr = 0;
ret_val__controller[0].float_state_arr = 7;
ret_val__controller[0].output_arr = 3;

Other input values:
input__controller[0].input_arr[0] = -423.000000;
input__controller[0].float_state_arr[0] = 208.990000;
input__controller[0].float_state_arr[1] = -78.000000;
input__controller[0].float_state_arr[2] = -292.000000;
input__controller[0].float_state_arr[3] = 272.000000;
input__controller[0].float_state_arr[4] = -0.400000;
input__controller[0].float_state_arr[5] = -384.000000;
input__controller[0].float_state_arr[6] = -73.000000;
input__controller[0].x_arr[0] = -493.000000;
input__controller[0].x_arr[1] = 170.000000;
input__controller[0].x_arr[2] = -8.000000;
input__controller[0].x_arr[3] = -463.000000;
input__controller[0].x_arr[4] = -387.000000;
input__controller[0].x_arr[5] = -245.000000;
input__controller[0].x_arr[6] = 150.000000;
input__controller[0].x_arr[7] = -475.000000;
input__controller[0].x_arr[8] = -478.000000;
input__controller[0].x_arr[9] = -156.000000;
input__controller[0].x_arr[10] = -793.000000;
input__controller[0].x_arr[11] = 173.000000;
input__controller[0].x_arr[12] = -343.000000;
ret_val__controller[0].float_state_arr[0] = 397.000000;
ret_val__controller[0].float_state_arr[1] = -241.000000;
ret_val__controller[0].float_state_arr[2] = -268.000000;
ret_val__controller[0].float_state_arr[3] = -365.000000;
ret_val__controller[0].float_state_arr[4] = -94.000000;
ret_val__controller[0].float_state_arr[5] = -68.000000;
ret_val__controller[0].float_state_arr[6] = -139.000000;
ret_val__controller[0].output_arr[0] = 438.000000;
ret_val__controller[0].output_arr[1] = -491.000000;
ret_val__controller[0].output_arr[2] = -16.000000;

Result:
unknown

Path Covered :
afc.c
+140 +146 -151 -158 +160 +162 -162b -182 +191 +205


Path Predicate for case 119:
afc.c: +140 input[0].x_arr[10]=<-1.000000
afc.c: +146 (input[0].float_state_arr[0]+0.010000)>=10.000000
afc.c: -151 ((unsigned char)input[0].float_state_arr[4])=0
afc.c: -158 input[0].x_arr[8]<70.000000
afc.c: +160 1<>0
afc.c: +162 1<>0
afc.c: -162b 0=0
afc.c: -182 1<>0
afc.c: +191 1<>0
afc.c: +205 ((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))/14.700000)>1.660000

Simplified Path Predicate for case 119:
input[0].x_arr[10]=<-1.000000 AND
(input[0].float_state_arr[0]+0.010000)>=10.000000 AND
((unsigned char)input[0].float_state_arr[4])=0 AND
input[0].x_arr[8]<70.000000 AND
((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))/14.700000)>1.660000

Output Values for case 119: (Symbolic,Concrete)
return value = 0, 0
ret_val[0].float_state_arr[0] = (input[0].float_state_arr[0]+0.010000), 209.000000
ret_val[0].float_state_arr[1] = input[0].float_state_arr[1], -78.000000
ret_val[0].float_state_arr[2] = (input[0].float_state_arr[2]+(((input[0].x_arr[9]+-((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))))*0.413280)*0.010000)), -5957.592441
ret_val[0].float_state_arr[3] = 1.000000, 1.000000
ret_val[0].float_state_arr[4] = 0.000000, 0.000000
ret_val[0].float_state_arr[5] = 1.000000, 1.000000
ret_val[0].float_state_arr[6] = input[0].float_state_arr[6], -73.000000
ret_val[0].output_arr[0] = 1.660000, 1.660000
ret_val[0].output_arr[1] = 1.000000, 1.000000
ret_val[0].output_arr[2] = 14.700000, 14.700000

to explore negation deepest unexplored condition of predicate,
Path Predicate Prefix to solve :
afc.c: +140 input[0].x_arr[10]=<-1.000000
afc.c: +146 (input[0].float_state_arr[0]+0.010000)>=10.000000
afc.c: -151 ((unsigned char)input[0].float_state_arr[4])=0
afc.c: -158 input[0].x_arr[8]<70.000000
afc.c: +160 1<>0
afc.c: +162 1<>0
afc.c: -162b 0=0
afc.c: -182 1<>0
afc.c: +191 1<>0
afc.c: -205 ((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))/14.700000)=<1.660000
Path Prefix to cover :
afc.c
+140 +146 -151 -158 +160 +162 -162b -182 +191 -205


TEST CASE 120

Dimensions:
input__controller = 1;
input__controller[0].input_arr = 1;
input__controller[0].int_state_arr = 0;
input__controller[0].float_state_arr = 7;
input__controller[0].x_arr = 13;
ret_val__controller = 1;
ret_val__controller[0].int_state_arr = 0;
ret_val__controller[0].float_state_arr = 7;
ret_val__controller[0].output_arr = 3;

Other input values:
input__controller[0].input_arr[0] = -423.000000;
input__controller[0].float_state_arr[0] = 208.990000;
input__controller[0].float_state_arr[1] = -78.000000;
input__controller[0].float_state_arr[2] = 440.000000;
input__controller[0].float_state_arr[3] = 272.000000;
input__controller[0].float_state_arr[4] = -0.400000;
input__controller[0].float_state_arr[5] = -384.000000;
input__controller[0].float_state_arr[6] = -73.000000;
input__controller[0].x_arr[0] = -493.000000;
input__controller[0].x_arr[1] = 170.000000;
input__controller[0].x_arr[2] = -8.000000;
input__controller[0].x_arr[3] = -463.000000;
input__controller[0].x_arr[4] = -387.000000;
input__controller[0].x_arr[5] = -245.000000;
input__controller[0].x_arr[6] = 150.000000;
input__controller[0].x_arr[7] = 0.000000;
input__controller[0].x_arr[8] = -478.000000;
input__controller[0].x_arr[9] = -0.366000;
input__controller[0].x_arr[10] = -793.000000;
input__controller[0].x_arr[11] = 173.000000;
input__controller[0].x_arr[12] = -343.000000;
ret_val__controller[0].float_state_arr[0] = 397.000000;
ret_val__controller[0].float_state_arr[1] = -241.000000;
ret_val__controller[0].float_state_arr[2] = -268.000000;
ret_val__controller[0].float_state_arr[3] = -365.000000;
ret_val__controller[0].float_state_arr[4] = -94.000000;
ret_val__controller[0].float_state_arr[5] = -68.000000;
ret_val__controller[0].float_state_arr[6] = -139.000000;
ret_val__controller[0].output_arr[0] = 438.000000;
ret_val__controller[0].output_arr[1] = -491.000000;
ret_val__controller[0].output_arr[2] = -16.000000;

Result:
unknown

Path Covered :
afc.c
+140 +146 -151 -158 +160 +162 -162b -182 +191 -205 +207


Path Predicate for case 120:
afc.c: +140 input[0].x_arr[10]=<-1.000000
afc.c: +146 (input[0].float_state_arr[0]+0.010000)>=10.000000
afc.c: -151 ((unsigned char)input[0].float_state_arr[4])=0
afc.c: -158 input[0].x_arr[8]<70.000000
afc.c: +160 1<>0
afc.c: +162 1<>0
afc.c: -162b 0=0
afc.c: -182 1<>0
afc.c: +191 1<>0
afc.c: -205 ((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))/14.700000)=<1.660000
afc.c: +207 ((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))/14.700000)<0.130000

Simplified Path Predicate for case 120:
input[0].x_arr[10]=<-1.000000 AND
(input[0].float_state_arr[0]+0.010000)>=10.000000 AND
((unsigned char)input[0].float_state_arr[4])=0 AND
input[0].x_arr[8]<70.000000 AND
((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))/14.700000)=<1.660000 AND
((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))/14.700000)<0.130000

Output Values for case 120: (Symbolic,Concrete)
return value = 0, 0
ret_val[0].float_state_arr[0] = (input[0].float_state_arr[0]+0.010000), 209.000000
ret_val[0].float_state_arr[1] = input[0].float_state_arr[1], -78.000000
ret_val[0].float_state_arr[2] = (input[0].float_state_arr[2]+(((input[0].x_arr[9]+-((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))))*0.413280)*0.010000)), 440.000000
ret_val[0].float_state_arr[3] = 1.000000, 1.000000
ret_val[0].float_state_arr[4] = 0.000000, 0.000000
ret_val[0].float_state_arr[5] = 1.000000, 1.000000
ret_val[0].float_state_arr[6] = input[0].float_state_arr[6], -73.000000
ret_val[0].output_arr[0] = 0.130000, 0.130000
ret_val[0].output_arr[1] = 1.000000, 1.000000
ret_val[0].output_arr[2] = 14.700000, 14.700000

to explore negation deepest unexplored condition of predicate,
Path Predicate Prefix to solve :
afc.c: +140 input[0].x_arr[10]=<-1.000000
afc.c: +146 (input[0].float_state_arr[0]+0.010000)>=10.000000
afc.c: -151 ((unsigned char)input[0].float_state_arr[4])=0
afc.c: -158 input[0].x_arr[8]<70.000000
afc.c: +160 1<>0
afc.c: +162 1<>0
afc.c: -162b 0=0
afc.c: -182 1<>0
afc.c: +191 1<>0
afc.c: -205 ((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))/14.700000)=<1.660000
afc.c: -207 ((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))/14.700000)>=0.130000
Path Prefix to cover :
afc.c
+140 +146 -151 -158 +160 +162 -162b -182 +191 -205 -207


TEST CASE 121

Dimensions:
input__controller = 1;
input__controller[0].input_arr = 1;
input__controller[0].int_state_arr = 0;
input__controller[0].float_state_arr = 7;
input__controller[0].x_arr = 13;
ret_val__controller = 1;
ret_val__controller[0].int_state_arr = 0;
ret_val__controller[0].float_state_arr = 7;
ret_val__controller[0].output_arr = 3;

Other input values:
input__controller[0].input_arr[0] = -423.000000;
input__controller[0].float_state_arr[0] = 208.990000;
input__controller[0].float_state_arr[1] = -78.000000;
input__controller[0].float_state_arr[2] = 107.000000;
input__controller[0].float_state_arr[3] = 272.000000;
input__controller[0].float_state_arr[4] = -0.400000;
input__controller[0].float_state_arr[5] = -384.000000;
input__controller[0].float_state_arr[6] = -73.000000;
input__controller[0].x_arr[0] = -493.000000;
input__controller[0].x_arr[1] = 170.000000;
input__controller[0].x_arr[2] = -8.000000;
input__controller[0].x_arr[3] = -463.000000;
input__controller[0].x_arr[4] = -387.000000;
input__controller[0].x_arr[5] = -245.000000;
input__controller[0].x_arr[6] = 150.000000;
input__controller[0].x_arr[7] = 35161.111605;
input__controller[0].x_arr[8] = -478.000000;
input__controller[0].x_arr[9] = 4.000000;
input__controller[0].x_arr[10] = -793.000000;
input__controller[0].x_arr[11] = 173.000000;
input__controller[0].x_arr[12] = -343.000000;
ret_val__controller[0].float_state_arr[0] = 397.000000;
ret_val__controller[0].float_state_arr[1] = -241.000000;
ret_val__controller[0].float_state_arr[2] = -268.000000;
ret_val__controller[0].float_state_arr[3] = -365.000000;
ret_val__controller[0].float_state_arr[4] = -94.000000;
ret_val__controller[0].float_state_arr[5] = -68.000000;
ret_val__controller[0].float_state_arr[6] = -139.000000;
ret_val__controller[0].output_arr[0] = 438.000000;
ret_val__controller[0].output_arr[1] = -491.000000;
ret_val__controller[0].output_arr[2] = -16.000000;

Result:
unknown

Path Covered :
afc.c
+140 +146 -151 -158 +160 +162 -162b -182 +191 -205 -207


Path Predicate for case 121:
afc.c: +140 input[0].x_arr[10]=<-1.000000
afc.c: +146 (input[0].float_state_arr[0]+0.010000)>=10.000000
afc.c: -151 ((unsigned char)input[0].float_state_arr[4])=0
afc.c: -158 input[0].x_arr[8]<70.000000
afc.c: +160 1<>0
afc.c: +162 1<>0
afc.c: -162b 0=0
afc.c: -182 1<>0
afc.c: +191 1<>0
afc.c: -205 ((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))/14.700000)=<1.660000
afc.c: -207 ((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))/14.700000)>=0.130000

Simplified Path Predicate for case 121:
input[0].x_arr[10]=<-1.000000 AND
(input[0].float_state_arr[0]+0.010000)>=10.000000 AND
((unsigned char)input[0].float_state_arr[4])=0 AND
input[0].x_arr[8]<70.000000 AND
((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))/14.700000)=<1.660000 AND
((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))/14.700000)>=0.130000

Output Values for case 121: (Symbolic,Concrete)
return value = 0, 0
ret_val[0].float_state_arr[0] = (input[0].float_state_arr[0]+0.010000), 209.000000
ret_val[0].float_state_arr[1] = input[0].float_state_arr[1], -78.000000
ret_val[0].float_state_arr[2] = (input[0].float_state_arr[2]+(((input[0].x_arr[9]+-((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))))*0.413280)*0.010000)), 107.000000
ret_val[0].float_state_arr[3] = 1.000000, 1.000000
ret_val[0].float_state_arr[4] = 0.000000, 0.000000
ret_val[0].float_state_arr[5] = 1.000000, 1.000000
ret_val[0].float_state_arr[6] = input[0].float_state_arr[6], -73.000000
ret_val[0].output_arr[0] = ((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))/14.700000), 0.272109
ret_val[0].output_arr[1] = 1.000000, 1.000000
ret_val[0].output_arr[2] = 14.700000, 14.700000

to explore negation deepest unexplored condition of predicate,
Path Predicate Prefix to solve :
afc.c: +140 input[0].x_arr[10]=<-1.000000
afc.c: +146 (input[0].float_state_arr[0]+0.010000)>=10.000000
afc.c: -151 ((unsigned char)input[0].float_state_arr[4])=0
afc.c: -158 input[0].x_arr[8]<70.000000
afc.c: +160 1<>0
afc.c: +162 1<>0
afc.c: -162b 0=0
afc.c: -182 1<>0
afc.c: -191 1=0
Path Prefix to cover :
afc.c
+140 +146 -151 -158 +160 +162 -162b -182 -191
trivially infeasible

to explore negation deepest unexplored condition of predicate,
Path Predicate Prefix to solve :
afc.c: +140 input[0].x_arr[10]=<-1.000000
afc.c: +146 (input[0].float_state_arr[0]+0.010000)>=10.000000
afc.c: -151 ((unsigned char)input[0].float_state_arr[4])=0
afc.c: -158 input[0].x_arr[8]<70.000000
afc.c: +160 1<>0
afc.c: +162 1<>0
afc.c: -162b 0=0
afc.c: +182 1=0
Path Prefix to cover :
afc.c
+140 +146 -151 -158 +160 +162 -162b +182
trivially infeasible

to explore negation deepest unexplored condition of predicate,
Path Predicate Prefix to solve :
afc.c: +140 input[0].x_arr[10]=<-1.000000
afc.c: +146 (input[0].float_state_arr[0]+0.010000)>=10.000000
afc.c: -151 ((unsigned char)input[0].float_state_arr[4])=0
afc.c: -158 input[0].x_arr[8]<70.000000
afc.c: +160 1<>0
afc.c: +162 1<>0
afc.c: +162b 0<>0
Path Prefix to cover :
afc.c
+140 +146 -151 -158 +160 +162 +162b
trivially infeasible

to explore negation deepest unexplored condition of predicate,
Path Predicate Prefix to solve :
afc.c: +140 input[0].x_arr[10]=<-1.000000
afc.c: +146 (input[0].float_state_arr[0]+0.010000)>=10.000000
afc.c: -151 ((unsigned char)input[0].float_state_arr[4])=0
afc.c: -158 input[0].x_arr[8]<70.000000
afc.c: +160 1<>0
afc.c: -162 1=0
Path Prefix to cover :
afc.c
+140 +146 -151 -158 +160 -162
trivially infeasible

to explore negation deepest unexplored condition of predicate,
Path Predicate Prefix to solve :
afc.c: +140 input[0].x_arr[10]=<-1.000000
afc.c: +146 (input[0].float_state_arr[0]+0.010000)>=10.000000
afc.c: -151 ((unsigned char)input[0].float_state_arr[4])=0
afc.c: -158 input[0].x_arr[8]<70.000000
afc.c: -160 1=0
Path Prefix to cover :
afc.c
+140 +146 -151 -158 -160
trivially infeasible

to explore negation deepest unexplored condition of predicate,
Path Predicate Prefix to solve :
afc.c: +140 input[0].x_arr[10]=<-1.000000
afc.c: +146 (input[0].float_state_arr[0]+0.010000)>=10.000000
afc.c: -151 ((unsigned char)input[0].float_state_arr[4])=0
afc.c: +158 input[0].x_arr[8]>=70.000000
Path Prefix to cover :
afc.c
+140 +146 -151 +158


TEST CASE 122

Dimensions:
input__controller = 1;
input__controller[0].input_arr = 1;
input__controller[0].int_state_arr = 0;
input__controller[0].float_state_arr = 7;
input__controller[0].x_arr = 13;
ret_val__controller = 1;
ret_val__controller[0].int_state_arr = 0;
ret_val__controller[0].float_state_arr = 7;
ret_val__controller[0].output_arr = 3;

Other input values:
input__controller[0].input_arr[0] = -423.000000;
input__controller[0].float_state_arr[0] = 208.990000;
input__controller[0].float_state_arr[1] = -78.000000;
input__controller[0].float_state_arr[2] = -292.000000;
input__controller[0].float_state_arr[3] = 272.000000;
input__controller[0].float_state_arr[4] = -0.400000;
input__controller[0].float_state_arr[5] = -384.000000;
input__controller[0].float_state_arr[6] = -73.000000;
input__controller[0].x_arr[0] = -493.000000;
input__controller[0].x_arr[1] = 170.000000;
input__controller[0].x_arr[2] = -8.000000;
input__controller[0].x_arr[3] = -463.000000;
input__controller[0].x_arr[4] = -387.000000;
input__controller[0].x_arr[5] = -245.000000;
input__controller[0].x_arr[6] = 150.000000;
input__controller[0].x_arr[7] = -475.000000;
input__controller[0].x_arr[8] = 161.000000;
input__controller[0].x_arr[9] = -156.000000;
input__controller[0].x_arr[10] = -793.000000;
input__controller[0].x_arr[11] = 173.000000;
input__controller[0].x_arr[12] = -343.000000;
ret_val__controller[0].float_state_arr[0] = 397.000000;
ret_val__controller[0].float_state_arr[1] = -241.000000;
ret_val__controller[0].float_state_arr[2] = -268.000000;
ret_val__controller[0].float_state_arr[3] = -365.000000;
ret_val__controller[0].float_state_arr[4] = -94.000000;
ret_val__controller[0].float_state_arr[5] = -68.000000;
ret_val__controller[0].float_state_arr[6] = -139.000000;
ret_val__controller[0].output_arr[0] = 438.000000;
ret_val__controller[0].output_arr[1] = -491.000000;
ret_val__controller[0].output_arr[2] = -16.000000;

Result:
unknown

Path Covered :
afc.c
+140 +146 -151 +158 +160 +162 +162b -182 +191 +205


Path Predicate for case 122:
afc.c: +140 input[0].x_arr[10]=<-1.000000
afc.c: +146 (input[0].float_state_arr[0]+0.010000)>=10.000000
afc.c: -151 ((unsigned char)input[0].float_state_arr[4])=0
afc.c: +158 input[0].x_arr[8]>=70.000000
afc.c: +160 1<>0
afc.c: +162 1<>0
afc.c: +162b 1<>0
afc.c: -182 1<>0
afc.c: +191 1<>0
afc.c: +205 ((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))/12.500000)>1.660000

Simplified Path Predicate for case 122:
input[0].x_arr[10]=<-1.000000 AND
(input[0].float_state_arr[0]+0.010000)>=10.000000 AND
((unsigned char)input[0].float_state_arr[4])=0 AND
input[0].x_arr[8]>=70.000000 AND
((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))/12.500000)>1.660000

Output Values for case 122: (Symbolic,Concrete)
return value = 0, 0
ret_val[0].float_state_arr[0] = (input[0].float_state_arr[0]+0.010000), 209.000000
ret_val[0].float_state_arr[1] = input[0].float_state_arr[1], -78.000000
ret_val[0].float_state_arr[2] = (input[0].float_state_arr[2]+(((input[0].x_arr[9]+-((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))))*0.413280)*0.010000)), -5957.592441
ret_val[0].float_state_arr[3] = 1.000000, 1.000000
ret_val[0].float_state_arr[4] = 1.000000, 1.000000
ret_val[0].float_state_arr[5] = 1.000000, 1.000000
ret_val[0].float_state_arr[6] = input[0].float_state_arr[6], -73.000000
ret_val[0].output_arr[0] = 1.660000, 1.660000
ret_val[0].output_arr[1] = 1.000000, 1.000000
ret_val[0].output_arr[2] = 12.500000, 12.500000

to explore negation deepest unexplored condition of predicate,
Path Predicate Prefix to solve :
afc.c: +140 input[0].x_arr[10]=<-1.000000
afc.c: +146 (input[0].float_state_arr[0]+0.010000)>=10.000000
afc.c: -151 ((unsigned char)input[0].float_state_arr[4])=0
afc.c: +158 input[0].x_arr[8]>=70.000000
afc.c: +160 1<>0
afc.c: +162 1<>0
afc.c: +162b 1<>0
afc.c: -182 1<>0
afc.c: +191 1<>0
afc.c: -205 ((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))/12.500000)=<1.660000
Path Prefix to cover :
afc.c
+140 +146 -151 +158 +160 +162 +162b -182 +191 -205


TEST CASE 123

Dimensions:
input__controller = 1;
input__controller[0].input_arr = 1;
input__controller[0].int_state_arr = 0;
input__controller[0].float_state_arr = 7;
input__controller[0].x_arr = 13;
ret_val__controller = 1;
ret_val__controller[0].int_state_arr = 0;
ret_val__controller[0].float_state_arr = 7;
ret_val__controller[0].output_arr = 3;

Other input values:
input__controller[0].input_arr[0] = -423.000000;
input__controller[0].float_state_arr[0] = 208.990000;
input__controller[0].float_state_arr[1] = -78.000000;
input__controller[0].float_state_arr[2] = -58.000000;
input__controller[0].float_state_arr[3] = 272.000000;
input__controller[0].float_state_arr[4] = -0.400000;
input__controller[0].float_state_arr[5] = -384.000000;
input__controller[0].float_state_arr[6] = -73.000000;
input__controller[0].x_arr[0] = -493.000000;
input__controller[0].x_arr[1] = 170.000000;
input__controller[0].x_arr[2] = -8.000000;
input__controller[0].x_arr[3] = -463.000000;
input__controller[0].x_arr[4] = -387.000000;
input__controller[0].x_arr[5] = -245.000000;
input__controller[0].x_arr[6] = 150.000000;
input__controller[0].x_arr[7] = 0.000000;
input__controller[0].x_arr[8] = 161.000000;
input__controller[0].x_arr[9] = -0.366000;
input__controller[0].x_arr[10] = -793.000000;
input__controller[0].x_arr[11] = 173.000000;
input__controller[0].x_arr[12] = -343.000000;
ret_val__controller[0].float_state_arr[0] = 397.000000;
ret_val__controller[0].float_state_arr[1] = -241.000000;
ret_val__controller[0].float_state_arr[2] = -268.000000;
ret_val__controller[0].float_state_arr[3] = -365.000000;
ret_val__controller[0].float_state_arr[4] = -94.000000;
ret_val__controller[0].float_state_arr[5] = -68.000000;
ret_val__controller[0].float_state_arr[6] = -139.000000;
ret_val__controller[0].output_arr[0] = 438.000000;
ret_val__controller[0].output_arr[1] = -491.000000;
ret_val__controller[0].output_arr[2] = -16.000000;

Result:
unknown

Path Covered :
afc.c
+140 +146 -151 +158 +160 +162 +162b -182 +191 -205 +207


Path Predicate for case 123:
afc.c: +140 input[0].x_arr[10]=<-1.000000
afc.c: +146 (input[0].float_state_arr[0]+0.010000)>=10.000000
afc.c: -151 ((unsigned char)input[0].float_state_arr[4])=0
afc.c: +158 input[0].x_arr[8]>=70.000000
afc.c: +160 1<>0
afc.c: +162 1<>0
afc.c: +162b 1<>0
afc.c: -182 1<>0
afc.c: +191 1<>0
afc.c: -205 ((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))/12.500000)=<1.660000
afc.c: +207 ((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))/12.500000)<0.130000

Simplified Path Predicate for case 123:
input[0].x_arr[10]=<-1.000000 AND
(input[0].float_state_arr[0]+0.010000)>=10.000000 AND
((unsigned char)input[0].float_state_arr[4])=0 AND
input[0].x_arr[8]>=70.000000 AND
((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))/12.500000)=<1.660000 AND
((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))/12.500000)<0.130000

Output Values for case 123: (Symbolic,Concrete)
return value = 0, 0
ret_val[0].float_state_arr[0] = (input[0].float_state_arr[0]+0.010000), 209.000000
ret_val[0].float_state_arr[1] = input[0].float_state_arr[1], -78.000000
ret_val[0].float_state_arr[2] = (input[0].float_state_arr[2]+(((input[0].x_arr[9]+-((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))))*0.413280)*0.010000)), -58.000000
ret_val[0].float_state_arr[3] = 1.000000, 1.000000
ret_val[0].float_state_arr[4] = 1.000000, 1.000000
ret_val[0].float_state_arr[5] = 1.000000, 1.000000
ret_val[0].float_state_arr[6] = input[0].float_state_arr[6], -73.000000
ret_val[0].output_arr[0] = 0.130000, 0.130000
ret_val[0].output_arr[1] = 1.000000, 1.000000
ret_val[0].output_arr[2] = 12.500000, 12.500000

to explore negation deepest unexplored condition of predicate,
Path Predicate Prefix to solve :
afc.c: +140 input[0].x_arr[10]=<-1.000000
afc.c: +146 (input[0].float_state_arr[0]+0.010000)>=10.000000
afc.c: -151 ((unsigned char)input[0].float_state_arr[4])=0
afc.c: +158 input[0].x_arr[8]>=70.000000
afc.c: +160 1<>0
afc.c: +162 1<>0
afc.c: +162b 1<>0
afc.c: -182 1<>0
afc.c: +191 1<>0
afc.c: -205 ((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))/12.500000)=<1.660000
afc.c: -207 ((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))/12.500000)>=0.130000
Path Prefix to cover :
afc.c
+140 +146 -151 +158 +160 +162 +162b -182 +191 -205 -207


TEST CASE 124

Dimensions:
input__controller = 1;
input__controller[0].input_arr = 1;
input__controller[0].int_state_arr = 0;
input__controller[0].float_state_arr = 7;
input__controller[0].x_arr = 13;
ret_val__controller = 1;
ret_val__controller[0].int_state_arr = 0;
ret_val__controller[0].float_state_arr = 7;
ret_val__controller[0].output_arr = 3;

Other input values:
input__controller[0].input_arr[0] = -423.000000;
input__controller[0].float_state_arr[0] = 208.990000;
input__controller[0].float_state_arr[1] = -78.000000;
input__controller[0].float_state_arr[2] = 151.000000;
input__controller[0].float_state_arr[3] = 272.000000;
input__controller[0].float_state_arr[4] = -0.400000;
input__controller[0].float_state_arr[5] = -384.000000;
input__controller[0].float_state_arr[6] = -73.000000;
input__controller[0].x_arr[0] = -493.000000;
input__controller[0].x_arr[1] = 170.000000;
input__controller[0].x_arr[2] = -8.000000;
input__controller[0].x_arr[3] = -463.000000;
input__controller[0].x_arr[4] = -387.000000;
input__controller[0].x_arr[5] = -245.000000;
input__controller[0].x_arr[6] = 150.000000;
input__controller[0].x_arr[7] = -0.008434;
input__controller[0].x_arr[8] = 161.000000;
input__controller[0].x_arr[9] = 6.000000;
input__controller[0].x_arr[10] = -793.000000;
input__controller[0].x_arr[11] = 173.000000;
input__controller[0].x_arr[12] = -343.000000;
ret_val__controller[0].float_state_arr[0] = 397.000000;
ret_val__controller[0].float_state_arr[1] = -241.000000;
ret_val__controller[0].float_state_arr[2] = -268.000000;
ret_val__controller[0].float_state_arr[3] = -365.000000;
ret_val__controller[0].float_state_arr[4] = -94.000000;
ret_val__controller[0].float_state_arr[5] = -68.000000;
ret_val__controller[0].float_state_arr[6] = -139.000000;
ret_val__controller[0].output_arr[0] = 438.000000;
ret_val__controller[0].output_arr[1] = -491.000000;
ret_val__controller[0].output_arr[2] = -16.000000;

Result:
unknown

Path Covered :
afc.c
+140 +146 -151 +158 +160 +162 +162b -182 +191 -205 -207


Path Predicate for case 124:
afc.c: +140 input[0].x_arr[10]=<-1.000000
afc.c: +146 (input[0].float_state_arr[0]+0.010000)>=10.000000
afc.c: -151 ((unsigned char)input[0].float_state_arr[4])=0
afc.c: +158 input[0].x_arr[8]>=70.000000
afc.c: +160 1<>0
afc.c: +162 1<>0
afc.c: +162b 1<>0
afc.c: -182 1<>0
afc.c: +191 1<>0
afc.c: -205 ((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))/12.500000)=<1.660000
afc.c: -207 ((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))/12.500000)>=0.130000

Simplified Path Predicate for case 124:
input[0].x_arr[10]=<-1.000000 AND
(input[0].float_state_arr[0]+0.010000)>=10.000000 AND
((unsigned char)input[0].float_state_arr[4])=0 AND
input[0].x_arr[8]>=70.000000 AND
((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))/12.500000)=<1.660000 AND
((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))/12.500000)>=0.130000

Output Values for case 124: (Symbolic,Concrete)
return value = 0, 0
ret_val[0].float_state_arr[0] = (input[0].float_state_arr[0]+0.010000), 209.000000
ret_val[0].float_state_arr[1] = input[0].float_state_arr[1], -78.000000
ret_val[0].float_state_arr[2] = (input[0].float_state_arr[2]+(((input[0].x_arr[9]+-((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))))*0.413280)*0.010000)), 151.000000
ret_val[0].float_state_arr[3] = 1.000000, 1.000000
ret_val[0].float_state_arr[4] = 1.000000, 1.000000
ret_val[0].float_state_arr[5] = 1.000000, 1.000000
ret_val[0].float_state_arr[6] = input[0].float_state_arr[6], -73.000000
ret_val[0].output_arr[0] = ((((((input[0].float_state_arr[2]*input[0].x_arr[7])*0.089790)+-0.366000)+(((input[0].float_state_arr[2]*input[0].float_state_arr[2])*input[0].x_arr[7])*-0.033700))+(((input[0].x_arr[7]*input[0].x_arr[7])*input[0].float_state_arr[2])*0.000100))/12.500000), 0.480000
ret_val[0].output_arr[1] = 1.000000, 1.000000
ret_val[0].output_arr[2] = 12.500000, 12.500000

to explore negation deepest unexplored condition of predicate,
Path Predicate Prefix to solve :
afc.c: +140 input[0].x_arr[10]=<-1.000000
afc.c: +146 (input[0].float_state_arr[0]+0.010000)>=10.000000
afc.c: -151 ((unsigned char)input[0].float_state_arr[4])=0
afc.c: +158 input[0].x_arr[8]>=70.000000
afc.c: +160 1<>0
afc.c: +162 1<>0
afc.c: +162b 1<>0
afc.c: -182 1<>0
afc.c: -191 1=0
Path Prefix to cover :
afc.c
+140 +146 -151 +158 +160 +162 +162b -182 -191
trivially infeasible

to explore negation deepest unexplored condition of predicate,
Path Predicate Prefix to solve :
afc.c: +140 input[0].x_arr[10]=<-1.000000
afc.c: +146 (input[0].float_state_arr[0]+0.010000)>=10.000000
afc.c: -151 ((unsigned char)input[0].float_state_arr[4])=0
afc.c: +158 input[0].x_arr[8]>=70.000000
afc.c: +160 1<>0
afc.c: +162 1<>0
afc.c: +162b 1<>0
afc.c: +182 1=0
Path Prefix to cover :
afc.c
+140 +146 -151 +158 +160 +162 +162b +182
trivially infeasible

to explore negation deepest unexplored condition of predicate,
Path Predicate Prefix to solve :
afc.c: +140 input[0].x_arr[10]=<-1.000000
afc.c: +146 (input[0].float_state_arr[0]+0.010000)>=10.000000
afc.c: -151 ((unsigned char)input[0].float_state_arr[4])=0
afc.c: +158 input[0].x_arr[8]>=70.000000
afc.c: +160 1<>0
afc.c: +162 1<>0
afc.c: -162b 1=0
Path Prefix to cover :
afc.c
+140 +146 -151 +158 +160 +162 -162b
trivially infeasible

to explore negation deepest unexplored condition of predicate,
Path Predicate Prefix to solve :
afc.c: +140 input[0].x_arr[10]=<-1.000000
afc.c: +146 (input[0].float_state_arr[0]+0.010000)>=10.000000
afc.c: -151 ((unsigned char)input[0].float_state_arr[4])=0
afc.c: +158 input[0].x_arr[8]>=70.000000
afc.c: +160 1<>0
afc.c: -162 1=0
Path Prefix to cover :
afc.c
+140 +146 -151 +158 +160 -162
trivially infeasible

to explore negation deepest unexplored condition of predicate,
Path Predicate Prefix to solve :
afc.c: +140 input[0].x_arr[10]=<-1.000000
afc.c: +146 (input[0].float_state_arr[0]+0.010000)>=10.000000
afc.c: -151 ((unsigned char)input[0].float_state_arr[4])=0
afc.c: +158 input[0].x_arr[8]>=70.000000
afc.c: -160 1=0
Path Prefix to cover :
afc.c
+140 +146 -151 +158 -160
trivially infeasible
